//
// File: model.cpp
//
// Code generated for Simulink model 'model'.
//
// Model version                  : 1.154
// Simulink Coder version         : 9.5 (R2021a) 14-Nov-2020
// C/C++ source code generated on : Tue Apr 16 01:12:13 2024
//
// Target selection: ert.tlc
// Embedded hardware selection: Intel->x86-32 (Windows32)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "model.h"
#include "model_private.h"

// Exported block parameters
real_T PumpOff = 0.0;                  // Variable: PumpOff
//  Referenced by: '<S1>/Constant4'

real_T PumpOn = 1.0;                   // Variable: PumpOn
//  Referenced by: '<S1>/Constant3'

real_T Tf[97] = { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0 };          // Variable: Tf
//  Referenced by: '<S1>/Constant1'


real_T breakPoints[97] = { 0.0, 900.0, 1800.0, 2700.0, 3600.0, 4500.0, 5400.0,
  6300.0, 7200.0, 8100.0, 9000.0, 9900.0, 10800.0, 11700.0, 12600.0, 13500.0,
  14400.0, 15300.0, 16200.0, 17100.0, 18000.0, 18900.0, 19800.0, 20700.0,
  21600.0, 22500.0, 23400.0, 24300.0, 25200.0, 26100.0, 27000.0, 27900.0,
  28800.0, 29700.0, 30600.0, 31500.0, 32400.0, 33300.0, 34200.0, 35100.0,
  36000.0, 36900.0, 37800.0, 38700.0, 39600.0, 40500.0, 41400.0, 42300.0,
  43200.0, 44100.0, 45000.0, 45900.0, 46800.0, 47700.0, 48600.0, 49500.0,
  50400.0, 51300.0, 52200.0, 53100.0, 54000.0, 54900.0, 55800.0, 56700.0,
  57600.0, 58500.0, 59400.0, 60300.0, 61200.0, 62100.0, 63000.0, 63900.0,
  64800.0, 65700.0, 66600.0, 67500.0, 68400.0, 69300.0, 70200.0, 71100.0,
  72000.0, 72900.0, 73800.0, 74700.0, 75600.0, 76500.0, 77400.0, 78300.0,
  79200.0, 80100.0, 81000.0, 81900.0, 82800.0, 83700.0, 84600.0, 85500.0,
  86400.0 };                          // Variable: breakPoints
//  Referenced by: '<S1>/Lookup Table ref'


real_T elseDown = 0.0;                 // Variable: elseDown
//  Referenced by: '<S3>/Constant23'

real_T elseUp = 0.0;                   // Variable: elseUp
//  Referenced by: '<S3>/Constant2'

real_T ifDown = 25.0;                  // Variable: ifDown
//  Referenced by: '<S3>/Constant22'

real_T ifUp = -15.0;                   // Variable: ifUp
//  Referenced by: '<S3>/Constant1'

real_T resetDown = 65.0;               // Variable: resetDown
//  Referenced by: '<S28>/Constant'

real_T resetUp = 75.0;                 // Variable: resetUp
//  Referenced by: '<S30>/Constant'

real_T setDown = 45.0;                 // Variable: setDown
//  Referenced by: '<S27>/Constant'

real_T setUp = 90.0;                   // Variable: setUp
//  Referenced by: '<S29>/Constant'

  
  
real_T tableData[97] = { 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0,
90.0, 90.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0,
40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0,
40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 90.0, 90.0, 90.0, 90.0 };// Variable: tableData
//  Referenced by: '<S1>/Lookup Table ref'


static void rate_scheduler(modelModelClass::RT_MODEL_model_T* const model_M);
real_T look1_binlxpw(real_T u0, const real_T bp0[], const real_T table[],
    uint32_T maxIndex)
{
    real_T frac;
    real_T yL_0d0;
    uint32_T bpIdx;
    uint32_T iLeft;
    uint32_T iRght;

    // Column-major Lookup 1-D
    // Search method: 'binary'
    // Use previous index: 'off'
    // Interpolation method: 'Linear point-slope'
    // Extrapolation method: 'Linear'
    // Use last breakpoint for index at or above upper limit: 'off'
    // Remove protection against out-of-range input in generated code: 'off'

    // Prelookup - Index and Fraction
    // Index Search method: 'binary'
    // Extrapolation method: 'Linear'
    // Use previous index: 'off'
    // Use last breakpoint for index at or above upper limit: 'off'
    // Remove protection against out-of-range input in generated code: 'off'

    if (u0 <= bp0[0U]) {
        iLeft = 0U;
        frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
    }
    else if (u0 < bp0[maxIndex]) {
        // Binary Search
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            }
            else {
                iLeft = bpIdx;
            }

            bpIdx = (iRght + iLeft) >> 1U;
        }

        frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
    }
    else {
        iLeft = maxIndex - 1U;
        frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
    }

    // Column-major Interpolation 1-D
    // Interpolation method: 'Linear point-slope'
    // Use last breakpoint for index at or above upper limit: 'off'
    // Overflow mode: 'portable wrapping'

    yL_0d0 = table[iLeft];
    return (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
}

//
//   This function updates active task flag for each subrate.
// The function is called at model base rate, hence the
// generated code self-manages all its subrates.
//
static void rate_scheduler(modelModelClass::RT_MODEL_model_T* const model_M)
{
    // Compute which subrates run during the next base time step.  Subrates
    //  are an integer multiple of the base rate counter.  Therefore, the subtask
    //  counter is reset when it reaches its limit (zero means run).

    (model_M->Timing.TaskCounters.TID[1])++;
    if ((model_M->Timing.TaskCounters.TID[1]) > 9) {// Sample time: [10.0s, 0.0s]
        model_M->Timing.TaskCounters.TID[1] = 0;
    }

    (model_M->Timing.TaskCounters.TID[2])++;
    if ((model_M->Timing.TaskCounters.TID[2]) > 899) {// Sample time: [900.0s, 0.0s] 
        model_M->Timing.TaskCounters.TID[2] = 0;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_znlmpc_setDecisions(const real_T X[96], const real_T
    Umv[96], real_T e, real_T z[193])
{
    real_T a[96];
    int32_T i;
    int32_T i_0;
    static const int8_T a_0[9216] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

    std::memset(&a[0], 0, 96U * sizeof(real_T));
    for (i_0 = 0; i_0 < 96; i_0++) {
        for (i = 0; i < 96; i++) {
            a[i] += static_cast<real_T>(a_0[96 * i_0 + i]) * Umv[i_0];
        }
    }

    for (i = 0; i < 96; i++) {
        z[i] = X[i];
        z[i + 96] = a[i];
    }

    z[192] = e;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_structConstructorHelper(real_T varargin_2, real_T
    varargin_4, const real_T varargin_6[96], const real_T varargin_10[96], const
    real_T varargin_12[96], const real_T varargin_14[96], const real_T
    varargin_18[96], const real_T varargin_20[96], const real_T varargin_22[96],
    const real_T varargin_24[96], const real_T varargin_26[96], const real_T
    varargin_28[96], const real_T varargin_30[96], const real_T varargin_32[96],
    const real_T varargin_34[96], const cell_0_model_T* varargin_36,
    s_iMrk9lYy4GSFeZiuOV2cXH_mode_T* s)
{
    s->x = varargin_2;
    s->lastMV = varargin_4;
    s->ECRWeight = 100000.0;
    std::memcpy(&s->ref[0], &varargin_6[0], 96U * sizeof(real_T));
    std::memcpy(&s->OutputWeights[0], &varargin_10[0], 96U * sizeof(real_T));
    std::memcpy(&s->MVWeights[0], &varargin_12[0], 96U * sizeof(real_T));
    std::memcpy(&s->MVRateWeights[0], &varargin_14[0], 96U * sizeof(real_T));
    std::memcpy(&s->OutputMin[0], &varargin_18[0], 96U * sizeof(real_T));
    std::memcpy(&s->OutputMax[0], &varargin_20[0], 96U * sizeof(real_T));
    std::memcpy(&s->StateMin[0], &varargin_22[0], 96U * sizeof(real_T));
    std::memcpy(&s->StateMax[0], &varargin_24[0], 96U * sizeof(real_T));
    std::memcpy(&s->MVMin[0], &varargin_26[0], 96U * sizeof(real_T));
    std::memcpy(&s->MVMax[0], &varargin_28[0], 96U * sizeof(real_T));
    std::memcpy(&s->MVRateMin[0], &varargin_30[0], 96U * sizeof(real_T));
    std::memcpy(&s->MVRateMax[0], &varargin_32[0], 96U * sizeof(real_T));
    std::memcpy(&s->MVScaledTarget[0], &varargin_34[0], 96U * sizeof(real_T));
    s->Parameters = *varargin_36;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::mode_znlmpc_generateRuntimeData(real_T x, real_T lastMV,
    real_T ref0, const cell_0_model_T* Parameters0, const real_T X0[95], const
    real_T MV0[95], real_T Slack0, s_iMrk9lYy4GSFeZiuOV2cXH_mode_T* runtimedata,
    sHwyw6iy4my0aQg5J32XtHE_model_T* userdata, real_T z0[193])
{
    real_T MV0_0[96];
    real_T X0_0[96];
    real_T tmp[96];
    real_T tmp_0[96];
    real_T tmp_1[96];
    real_T tmp_2[96];
    real_T tmp_3[96];
    real_T tmp_4[96];
    real_T tmp_5[96];
    real_T tmp_6[96];
    real_T tmp_7[96];
    real_T tmp_8[96];
    int32_T i;
    userdata->References[0] = ref0;
    X0_0[95] = X0[94];
    for (i = 0; i < 95; i++) {
        userdata->References[i + 1] = ref0;
        X0_0[i] = X0[i];
        MV0_0[i] = MV0[i];
    }

    MV0_0[95] = MV0[94];
    model_znlmpc_setDecisions(X0_0, MV0_0, Slack0, z0);
    userdata->Ts = 900.0;
    userdata->CurrentStates = x;
    userdata->LastMV = lastMV;
    userdata->PredictionHorizon = 96.0;
    userdata->NumOfStates = 1.0;
    userdata->NumOfOutputs = 1.0;
    userdata->NumOfInputs = 1.0;
    userdata->MVIndex = 1.0;
    for (i = 0; i < 96; i++) {
        userdata->MVTarget[i] = 0.0;
        X0_0[i] = 1.0;
        MV0_0[i] = 0.0;
        tmp[i] = 0.1;
        tmp_0[i] = 0.0;
        tmp_1[i] = 100.0;
        tmp_2[i] = (rtMinusInf);
        tmp_3[i] = (rtInf);
        tmp_4[i] = 0.0;
        tmp_5[i] = 1.0;
        tmp_6[i] = (rtMinusInf);
        tmp_7[i] = (rtInf);
        tmp_8[i] = 0.0;
    }

    model_structConstructorHelper(x, lastMV, userdata->References, X0_0, MV0_0,
        tmp, tmp_0, tmp_1, tmp_2, tmp_3, tmp_4, tmp_5, tmp_6, tmp_7, tmp_8,
        Parameters0, runtimedata);
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_znlmpc_getDecisions(const real_T z[193], real_T X[96],
    real_T Umv[96], real_T* e)
{
    int32_T i;
    int32_T i_0;
    static const int8_T a[9216] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

    std::memset(&Umv[0], 0, 96U * sizeof(real_T));
    for (i_0 = 0; i_0 < 96; i_0++) {
        for (i = 0; i < 96; i++) {
            Umv[i] += static_cast<real_T>(a[96 * i_0 + i]) * z[i_0 + 96];
        }
    }

    *e = z[192];
    std::memcpy(&X[0], &z[0], 96U * sizeof(real_T));
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_znlmpc_getXUe(const real_T z[193], real_T x, real_T
    X[97], real_T U[97], real_T* e)
{
    std::memset(&X[0], 0, 97U * sizeof(real_T));
    std::memset(&U[0], 0, 97U * sizeof(real_T));
    model_znlmpc_getDecisions(z, &X[1], &U[0], e);
    X[0] = x;
    U[96] = U[95];
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_customCostFunction(const real_T u[97])
{
    real_T x[97];
    real_T cost;
    int32_T k;
    for (k = 0; k < 97; k++) {
        x[k] = u[k] * 0.0;
    }

    cost = x[0];
    for (k = 0; k < 96; k++) {
        cost += x[k + 1];
    }

    return cost;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_znlmpc_getZBounds(const
    s_iMrk9lYy4GSFeZiuOV2cXH_mode_T* runtimedata, const real_T z0[193], real_T
    zLB[193], real_T zUB[193])
{
    real_T U0[97];
    real_T X0[97];
    real_T e0;
    int32_T i;
    zLB[192] = 0.0;
    for (i = 0; i < 96; i++) {
        zLB[i] = runtimedata->StateMin[i];
        zLB[i + 96] = (rtMinusInf);
        zUB[i] = runtimedata->StateMax[i];
        zUB[i + 96] = (rtInf);
    }

    zUB[192] = (rtInf);
    model_znlmpc_getXUe(z0, runtimedata->x, X0, U0, &e0);
    e0 = model_customCostFunction(U0);
    if (e0 <= e0) {
        zUB[192] = 0.0;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_mtimes(const real_T A_data[], const int32_T A_size[2],
    real_T C_data[], int32_T C_size[2])
{
    int32_T aoffset;
    int32_T b_i;
    int32_T bkj;
    int32_T boffset;
    int32_T coffset;
    int32_T i;
    int32_T j;
    int32_T m;
    int32_T tmp;
    static const int8_T b[9216] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

    m = A_size[0];
    C_size[0] = A_size[0];
    C_size[1] = 96;
    for (j = 0; j < 96; j++) {
        coffset = j * m;
        boffset = j * 96;
        for (i = 0; i < m; i++) {
            C_data[coffset + i] = 0.0;
        }

        for (i = 0; i < 96; i++) {
            aoffset = i * A_size[0];
            bkj = b[boffset + i];
            for (b_i = 1; b_i - 1 < m; b_i++) {
                tmp = (coffset + b_i) - 1;
                C_data[tmp] += A_data[(aoffset + b_i) - 1] * static_cast<real_T>(bkj);
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_znlmpc_getUBounds(const
    s_iMrk9lYy4GSFeZiuOV2cXH_mode_T* runtimedata, real_T A_data[], int32_T A_size
    [2], real_T Bu_data[], int32_T* Bu_size)
{
    real_T b_Bu[384];
    int32_T b[2];
    int32_T tmp_size[2];
    int32_T Au_tmp;
    int32_T i;
    int32_T icf_tmp;
    int32_T icf_tmp_0;
    int32_T icf_tmp_1;
    int16_T ii_data[384];
    boolean_T icf[384];
    boolean_T exitg1;
    std::memset(&model_B.Au[0], 0, 36864U * sizeof(real_T));
    std::memset(&b_Bu[0], 0, 384U * sizeof(real_T));
    for (i = 0; i < 96; i++) {
        icf[i << 2] = false;
        icf_tmp = (i << 2) + 1;
        icf[icf_tmp] = false;
        icf_tmp_0 = (i << 2) + 2;
        icf[icf_tmp_0] = true;
        icf_tmp_1 = (i << 2) + 3;
        icf[icf_tmp_1] = true;
        Au_tmp = (i << 2) + 384 * i;
        model_B.Au[Au_tmp] = -1.0;
        model_B.Au[Au_tmp + 1] = 1.0;
        model_B.Au[Au_tmp + 2] = -1.0;
        model_B.Au[Au_tmp + 3] = 1.0;
        b_Bu[i << 2] = (rtInf);
        b_Bu[icf_tmp] = (rtInf);
        b_Bu[icf_tmp_0] = -0.0;
        b_Bu[icf_tmp_1] = 1.0;
        if (i + 1 == 1) {
            b_Bu[i << 2] -= runtimedata->lastMV;
            b_Bu[icf_tmp] += runtimedata->lastMV;
        }
        else {
            Au_tmp = (i << 2) + 384 * (i - 1);
            model_B.Au[Au_tmp] = 1.0;
            model_B.Au[Au_tmp + 1] = -1.0;
        }
    }

    i = 0;
    icf_tmp = 0;
    exitg1 = false;
    while ((!exitg1) && (icf_tmp < 384)) {
        if (icf[icf_tmp]) {
            i++;
            ii_data[i - 1] = static_cast<int16_T>(icf_tmp + 1);
            if (i >= 384) {
                exitg1 = true;
            }
            else {
                icf_tmp++;
            }
        }
        else {
            icf_tmp++;
        }
    }

    if (1 > i) {
        i = 0;
    }

    if (i > 0) {
        *Bu_size = i;
        for (icf_tmp = 0; icf_tmp < i; icf_tmp++) {
            Bu_data[icf_tmp] = b_Bu[ii_data[icf_tmp] - 1];
        }

        icf_tmp_0 = i * 96 - 1;
        if (0 <= icf_tmp_0) {
            std::memset(&model_B.Auf_data[0], 0, (icf_tmp_0 + 1) * sizeof(real_T));
        }

        for (icf_tmp = 0; icf_tmp < 96; icf_tmp++) {
            for (icf_tmp_0 = 0; icf_tmp_0 < i; icf_tmp_0++) {
                model_B.Auf_data[icf_tmp_0 + i * icf_tmp] = model_B.Au[(384 * icf_tmp +
                    ii_data[icf_tmp_0]) - 1];
            }
        }

        b[0] = i;
        b[1] = 96;
        model_mtimes(model_B.Auf_data, b, model_B.Au, tmp_size);
        A_size[0] = i;
        A_size[1] = 193;
        icf_tmp_0 = i * 96;
        if (0 <= icf_tmp_0 - 1) {
            std::memset(&A_data[0], 0, icf_tmp_0 * sizeof(real_T));
        }

        icf_tmp_0 = i * 96;
        for (icf_tmp = 0; icf_tmp < icf_tmp_0; icf_tmp++) {
            A_data[icf_tmp + i * 96] = model_B.Au[icf_tmp];
        }

        if (0 <= i - 1) {
            std::memset(&A_data[i * 96 + i * 96], 0, ((((i + i * 96) + i * 96) - i *
                96) - i * 96) * sizeof(real_T));
        }
    }
    else {
        *Bu_size = 0;
        A_size[0] = 0;
        A_size[1] = 193;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::mod_znlmpc_computeJacobianState(real_T parameters_f1,
    real_T parameters_f2, real_T f0, real_T x0, real_T u0, real_T* Jx, real_T* Jmv)
{
    real_T dx;
    real_T f;
    real_T f_tmp;
    real_T xa;
    xa = std::abs(x0);
    if (xa < 1.0) {
        xa = 1.0;
    }

    dx = 1.0E-6 * xa;
    x0 += dx;
    xa = parameters_f2 * 900.0 / 200000.0;
    f_tmp = (parameters_f2 - parameters_f1 / 100.0 * 200.0 / 900.0) * 900.0 /
        200000.0 * 100.0;
    f = (xa * u0 * 100.0 - f_tmp) + x0;
    x0 -= dx;
    *Jx = (f - f0) / dx;
    dx = std::abs(u0);
    if (dx < 1.0) {
        dx = 1.0;
    }

    dx *= 1.0E-6;
    u0 += dx;
    *Jmv = (((xa * u0 * 100.0 - f_tmp) + x0) - f0) / dx;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_stateEvolution(const real_T X[97], const real_T U[97],
    real_T parameters_f1, real_T parameters_f2, real_T c[96], real_T J[18528])
{
    real_T Ak;
    real_T Bk;
    real_T U_0;
    real_T xk1;
    int32_T J_tmp;
    int32_T Jmv_tmp;
    int32_T Jx_tmp;
    int32_T i;
    static const int8_T Iz2u[9216] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

    std::memset(&model_B.Jx_g[0], 0, 9216U * sizeof(real_T));
    std::memset(&model_B.Jmv[0], 0, 9216U * sizeof(real_T));
    for (i = 0; i < 96; i++) {
        c[i] = 0.0;
        U_0 = U[i];
        xk1 = (parameters_f2 * 900.0 / 200000.0 * U_0 * 100.0 - (parameters_f2 -
            parameters_f1 / 100.0 * 200.0 / 900.0) * 900.0 / 200000.0 * 100.0) +
            X[i];
        mod_znlmpc_computeJacobianState(parameters_f1, parameters_f2, xk1, X[i], U_0,
            &Ak, &Bk);
        c[i] = X[i + 1] - xk1;
        Jx_tmp = i + 96 * i;
        model_B.Jx_g[Jx_tmp] = 1.0;
        if (i + 1 > 1) {
            model_B.Jx_g[i + 96 * (i - 1)] = -Ak;
        }

        model_B.Jmv[Jx_tmp] = -Bk;
    }

    for (i = 0; i < 96; i++) {
        for (Jx_tmp = 0; Jx_tmp < 96; Jx_tmp++) {
            Jmv_tmp = Jx_tmp + 96 * i;
            model_B.Jmv_g[Jmv_tmp] = 0.0;
            for (J_tmp = 0; J_tmp < 96; J_tmp++) {
                model_B.Jmv_g[Jmv_tmp] += model_B.Jmv[96 * J_tmp + i] *
                    static_cast<real_T>(Iz2u[96 * Jx_tmp + J_tmp]);
            }

            J_tmp = Jx_tmp + 193 * i;
            J[J_tmp] = model_B.Jx_g[96 * Jx_tmp + i];
            J[J_tmp + 96] = model_B.Jmv_g[Jmv_tmp];
        }

        J[193 * i + 192] = 0.0;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
boolean_T modelModelClass::model_any(const boolean_T x[2])
{
    int32_T k;
    boolean_T exitg1;
    boolean_T y;
    y = false;
    k = 0;
    exitg1 = false;
    while ((!exitg1) && (k <= 1)) {
        if (!x[k]) {
            k++;
        }
        else {
            y = true;
            exitg1 = true;
        }
    }

    return y;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_znlmpc_reformJacobian(const real_T Jx_data[], const
    int32_T Jx_size[3], const real_T Jmv_data[], const real_T Je_data[], const
    int32_T* Je_size, real_T Jc_data[], int32_T Jc_size[2])
{
    real_T Je_data_0[192];
    int32_T Jx[2];
    int32_T tmp_size[2];
    int32_T Jx_idx_0;
    int32_T empty_non_axis_sizes_idx_0;
    int32_T i;
    int32_T i_0;
    int32_T varargin_1_size_idx_1;
    uint8_T empty_non_axis_sizes[2];
    if (Jx_size[0] == 0) {
        Jc_size[0] = 0;
        Jc_size[1] = 0;
    }
    else {
        Jx_idx_0 = Jx_size[0];
        varargin_1_size_idx_1 = Jx_size[0];
        for (i_0 = 0; i_0 < Jx_idx_0; i_0++) {
            for (i = 0; i < 96; i++) {
                model_B.varargin_1_data[i + 96 * i_0] = Jx_data[i_0 + Jx_size[0] * i];
            }
        }

        Jx[0] = Jx_size[0];
        Jx[1] = 96;
        model_mtimes(Jmv_data, Jx, model_B.tmp_data, tmp_size);
        Jx_idx_0 = tmp_size[0];
        for (i_0 = 0; i_0 < Jx_idx_0; i_0++) {
            for (i = 0; i < 96; i++) {
                model_B.varargin_2_data[i + 96 * i_0] = model_B.tmp_data[i_0 + tmp_size
                    [0] * i];
            }
        }

        if (tmp_size[0] != 0) {
            empty_non_axis_sizes_idx_0 = 96;
        }
        else {
            empty_non_axis_sizes_idx_0 = 0;
        }

        if (0 <= *Je_size - 1) {
            std::memcpy(&Je_data_0[0], &Je_data[0], *Je_size * sizeof(real_T));
        }

        empty_non_axis_sizes[0] = (static_cast<uint8_T>(*Je_size) != 0);
        empty_non_axis_sizes[1] = static_cast<uint8_T>(Jx_size[0]);
        Jc_size[0] = (empty_non_axis_sizes_idx_0 + empty_non_axis_sizes[0]) + 96;
        Jc_size[1] = Jx_size[0];
        for (i_0 = 0; i_0 < varargin_1_size_idx_1; i_0++) {
            for (i = 0; i < 96; i++) {
                Jc_data[i + Jc_size[0] * i_0] = model_B.varargin_1_data[i + 96 * i_0];
            }
        }

        for (i_0 = 0; i_0 < varargin_1_size_idx_1; i_0++) {
            for (i = 0; i < empty_non_axis_sizes_idx_0; i++) {
                Jc_data[(i + Jc_size[0] * i_0) + 96] = model_B.varargin_2_data[i + 96 *
                    i_0];
            }
        }

        Jx_idx_0 = static_cast<uint8_T>(Jx_size[0]);
        if (0 <= empty_non_axis_sizes[0] - 1) {
            for (i_0 = 0; i_0 < Jx_idx_0; i_0++) {
                Jc_data[(empty_non_axis_sizes_idx_0 + Jc_size[0] * i_0) + 96] =
                    Je_data_0[empty_non_axis_sizes[0] * i_0];
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_outputBounds(const real_T runtimedata_OutputMin[96],
    const real_T runtimedata_OutputMax[96], const real_T X[97], real_T e, real_T
    c_data[], int32_T c_size[2], real_T Jc_data[], int32_T Jc_size[2])
{
    real_T b_c[192];
    real_T b_c_data[192];
    real_T b_c_tmp;
    int32_T Jx_size[3];
    int32_T Jx_tmp;
    int32_T b_c_tmp_0;
    int32_T i;
    int8_T Je[192];
    uint8_T b_data[192];
    uint8_T d_data[192];
    boolean_T b_b[96];
    boolean_T icf[2];
    boolean_T exitg1;
    boolean_T y;
    for (i = 0; i < 96; i++) {
        b_b[i] = rtIsInf(runtimedata_OutputMin[i]);
    }

    y = true;
    i = 0;
    exitg1 = false;
    while ((!exitg1) && (i <= 95)) {
        if (!b_b[i]) {
            y = false;
            exitg1 = true;
        }
        else {
            i++;
        }
    }

    if (y) {
        for (i = 0; i < 96; i++) {
            b_b[i] = rtIsInf(runtimedata_OutputMax[i]);
        }

        y = true;
        i = 0;
        exitg1 = false;
        while ((!exitg1) && (i <= 95)) {
            if (!b_b[i]) {
                y = false;
                exitg1 = true;
            }
            else {
                i++;
            }
        }
    }
    else {
        y = false;
    }

    if (y) {
        c_size[0] = 0;
        c_size[1] = 0;
        Jc_size[0] = 0;
        Jc_size[1] = 0;
    }
    else {
        std::memset(&b_c[0], 0, 192U * sizeof(real_T));
        std::memset(&model_B.Jx_c[0], 0, 18432U * sizeof(real_T));
        std::memset(&Je[0], 0, 192U * sizeof(int8_T));
        icf[0] = true;
        icf[1] = true;
        if (model_any(icf)) {
            for (i = 0; i < 96; i++) {
                b_c_tmp = X[i + 1];
                b_c[i << 1] = (0.0 - e) - b_c_tmp;
                b_c_tmp_0 = (i << 1) + 1;
                b_c[b_c_tmp_0] = (b_c_tmp - 100.0) - e;
                Jx_tmp = (i << 1) + 192 * i;
                model_B.Jx_c[Jx_tmp] = -1.0;
                model_B.Jx_c[Jx_tmp + 1] = 1.0;
                Je[i << 1] = -1;
                Je[b_c_tmp_0] = -1;
            }
        }

        i = 0;
        for (b_c_tmp_0 = 0; b_c_tmp_0 < 192; b_c_tmp_0++) {
            i++;
        }

        Jx_tmp = i;
        for (i = 0; i < 192; i++) {
            b_data[i] = static_cast<uint8_T>(i + 1);
        }

        for (i = 0; i < Jx_tmp; i++) {
            b_c_data[i] = b_c[b_data[i] - 1];
        }

        c_size[0] = Jx_tmp;
        c_size[1] = 1;
        if (0 <= Jx_tmp - 1) {
            std::memcpy(&c_data[0], &b_c_data[0], Jx_tmp * sizeof(real_T));
        }

        i = 0;
        for (b_c_tmp_0 = 0; b_c_tmp_0 < 192; b_c_tmp_0++) {
            i++;
        }

        b_c_tmp_0 = i;
        for (i = 0; i < 192; i++) {
            d_data[i] = static_cast<uint8_T>(i + 1);
        }

        Jx_size[0] = b_c_tmp_0;
        Jx_size[1] = 1;
        Jx_size[2] = 96;
        for (i = 0; i < 96; i++) {
            for (Jx_tmp = 0; Jx_tmp < b_c_tmp_0; Jx_tmp++) {
                model_B.Jx_data[Jx_tmp + b_c_tmp_0 * i] = model_B.Jx_c[(192 * i +
                    d_data[Jx_tmp]) - 1];
                model_B.tmp_data_f[Jx_tmp + b_c_tmp_0 * i] = 0.0;
            }
        }

        for (i = 0; i < b_c_tmp_0; i++) {
            b_c_data[i] = Je[d_data[i] - 1];
        }

        model_znlmpc_reformJacobian(model_B.Jx_data, Jx_size, model_B.tmp_data_f,
            b_c_data, &b_c_tmp_0, Jc_data, Jc_size);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::mode_znlmpc_computeJacobianIneq(const real_T f0[194],
    real_T x0[97], const real_T u0[97], real_T e0, real_T Jx[18624], real_T Jmv
    [18624], real_T Je[194])
{
    real_T f[194];
    real_T xa[97];
    real_T dx;
    real_T xa_0;
    int32_T i;
    int32_T k;
    for (k = 0; k < 97; k++) {
        xa_0 = std::abs(x0[k]);
        if (xa_0 < 1.0) {
            xa_0 = 1.0;
        }

        xa[k] = xa_0;
    }

    dx = 1.0E-6 * xa[0];
    for (k = 0; k < 96; k++) {
        x0[k + 1] += dx;
        for (i = 0; i < 97; i++) {
            xa_0 = x0[i];
            f[i] = 10.0 - xa_0;
            f[i + 97] = xa_0 - 100.0;
        }

        x0[k + 1] -= dx;
        for (i = 0; i < 194; i++) {
            xa_0 = (f[i] - f0[i]) / dx;
            Jx[i + 194 * k] = xa_0;
            f[i] = xa_0;
        }
    }

    for (k = 0; k < 97; k++) {
        xa_0 = std::abs(u0[k]);
        if (xa_0 < 1.0) {
            xa_0 = 1.0;
        }

        xa[k] = xa_0;
    }

    dx = 1.0E-6 * xa[0];
    for (k = 0; k < 97; k++) {
        xa_0 = x0[k];
        f[k] = ((10.0 - xa_0) - f0[k]) / dx;
        f[k + 97] = ((xa_0 - 100.0) - f0[k + 97]) / dx;
    }

    for (k = 0; k < 95; k++) {
        std::memcpy(&Jmv[k * 194], &f[0], 194U * sizeof(real_T));
    }

    for (k = 0; k < 97; k++) {
        xa_0 = x0[k];
        f[k] = ((10.0 - xa_0) - f0[k]) / dx;
        f[k + 97] = ((xa_0 - 100.0) - f0[k + 97]) / dx;
    }

    std::memcpy(&Jmv[18430], &f[0], 194U * sizeof(real_T));
    xa_0 = std::abs(e0);
    if ((1.0E-6 > xa_0) || rtIsNaN(xa_0)) {
        xa_0 = 1.0E-6;
    }

    dx = xa_0 * 1.0E-6;
    for (k = 0; k < 97; k++) {
        xa_0 = x0[k];
        Je[k] = ((10.0 - xa_0) - (10.0 - xa_0)) / (2.0 * dx);
        Je[k + 97] = ((xa_0 - 100.0) - (xa_0 - 100.0)) / (2.0 * dx);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_anon(real_T runtimedata_x, const real_T
    runtimedata_OutputMin[96], const real_T runtimedata_OutputMax[96], real_T
    runtimedata_Parameters_f1, real_T runtimedata_Parameters_f2, const real_T z
    [193], real_T varargout_1_data[], int32_T* varargout_1_size, real_T
    varargout_2[96], real_T varargout_3_data[], int32_T varargout_3_size[2],
    real_T varargout_4[18528])
{
    real_T Je[194];
    real_T cu[194];
    real_T c_data[192];
    real_T U[97];
    real_T X[97];
    real_T X_0;
    real_T e;
    int32_T Ju_tmp;
    int32_T c;
    int32_T c_0;
    int32_T i;
    int32_T i_0;
    int32_T i_1;
    static const int8_T Iz2u[9216] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

    int32_T Jc_size[2];
    int32_T c_size[2];
    model_znlmpc_getXUe(z, runtimedata_x, X, U, &e);
    model_stateEvolution(X, U, runtimedata_Parameters_f1,
        runtimedata_Parameters_f2, varargout_2, varargout_4);
    model_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax, X, e, c_data,
        c_size, model_B.Jc_data, Jc_size);
    for (i = 0; i < 97; i++) {
        X_0 = X[i];
        cu[i] = 10.0 - X_0;
        cu[i + 97] = X_0 - 100.0;
    }

    mode_znlmpc_computeJacobianIneq(cu, X, U, e, model_B.Jx, model_B.Ju, Je);
    if ((c_size[0] != 0) && (c_size[1] != 0)) {
        c = c_size[0];
    }
    else {
        c = 0;
    }

    *varargout_1_size = c + 194;
    if ((c_size[0] != 0) && (c_size[1] != 0)) {
        c = c_size[0];
    }
    else {
        c = 0;
    }

    if (0 <= c - 1) {
        std::memcpy(&varargout_1_data[0], &c_data[0], c * sizeof(real_T));
    }

    if ((Jc_size[0] != 0) && (Jc_size[1] != 0)) {
        c_0 = Jc_size[1];
    }
    else {
        c_0 = 0;
    }

    if ((c_size[0] != 0) && (c_size[1] != 0)) {
        c = c_size[0];
    }
    else {
        c = 0;
    }

    for (i = 0; i < 194; i++) {
        varargout_1_data[i + c] = cu[i];
        for (i_0 = 0; i_0 < 96; i_0++) {
            Ju_tmp = i_0 + 96 * i;
            model_B.Ju_b[Ju_tmp] = 0.0;
            for (i_1 = 0; i_1 < 96; i_1++) {
                model_B.Ju_b[Ju_tmp] += model_B.Ju[194 * i_1 + i] * static_cast<real_T>
                    (Iz2u[96 * i_0 + i_1]);
            }
        }
    }

    varargout_3_size[0] = 193;
    varargout_3_size[1] = c_0 + 194;
    for (i = 0; i < c_0; i++) {
        for (i_0 = 0; i_0 < 193; i_0++) {
            varargout_3_data[i_0 + 193 * i] = model_B.Jc_data[i_0 + Jc_size[0] * i];
        }
    }

    for (i = 0; i < 194; i++) {
        for (i_0 = 0; i_0 < 96; i_0++) {
            c = i + c_0;
            varargout_3_data[i_0 + 193 * c] = model_B.Jx[194 * i_0 + i];
            varargout_3_data[(i_0 + 193 * c) + 96] = model_B.Ju_b[96 * i + i_0];
        }

        varargout_3_data[192 + 193 * (i + c_0)] = Je[i];
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factoryConstruct(int32_T nVarMax, int32_T mConstrMax,
    int32_T mIneq, int32_T mNonlinIneq, s_4PJjBY6NtHkFemjansM2s_model_T* obj)
{
    obj->nVarMax = nVarMax;
    obj->mNonlinIneq = mNonlinIneq;
    obj->mNonlinEq = 96;
    obj->mIneq = mIneq;
    obj->mEq = 96;
    obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
    obj->iNonEq0 = 1;
    obj->sqpFval = 0.0;
    obj->sqpFval_old = 0.0;
    obj->cIneq.size = mIneq;
    obj->cIneq_old.size = mIneq;
    obj->grad.size = nVarMax;
    obj->grad_old.size = nVarMax;
    obj->FunctionEvaluations = 0;
    obj->sqpIterations = 0;
    obj->sqpExitFlag = 0;
    obj->lambdasqp.size = mConstrMax;
    if (0 <= mConstrMax - 1) {
        std::memset(&obj->lambdasqp.data[0], 0, mConstrMax * sizeof(real_T));
    }

    obj->lambdasqp_old.size = mConstrMax;
    obj->steplength = 1.0;
    obj->delta_x.size = nVarMax;
    if (0 <= nVarMax - 1) {
        std::memset(&obj->delta_x.data[0], 0, nVarMax * sizeof(real_T));
    }

    obj->socDirection.size = nVarMax;
    obj->lambda_old.size = mConstrMax;
    obj->workingset_old.size = mConstrMax;
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
    obj->JacCeqTrans_old.size[0] = nVarMax;
    obj->JacCeqTrans_old.size[1] = 96;
    obj->gradLag.size = nVarMax;
    obj->delta_gradLag.size = nVarMax;
    obj->xstar.size = nVarMax;
    obj->fstar = 0.0;
    obj->firstorderopt = 0.0;
    obj->lambda.size = mConstrMax;
    if (0 <= mConstrMax - 1) {
        std::memset(&obj->lambda.data[0], 0, mConstrMax * sizeof(real_T));
    }

    obj->state = 0;
    obj->maxConstr = 0.0;
    obj->iterations = 0;
    obj->searchDir.size = nVarMax;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factoryConstruct_hh1q(int32_T MaxVars, int32_T
    * obj_grad_size, int32_T* obj_Hx_size, boolean_T* obj_hasLinear, int32_T
    * obj_nvar, int32_T* obj_maxVar, real_T* obj_beta, real_T* obj_rho, int32_T
    * obj_objtype, int32_T* obj_prev_objtype, int32_T* obj_prev_nvar, boolean_T
    * obj_prev_hasLinear, real_T* obj_gammaScalar)
{
    *obj_grad_size = MaxVars;
    *obj_Hx_size = MaxVars - 1;
    *obj_hasLinear = false;
    *obj_nvar = 0;
    *obj_maxVar = MaxVars;
    *obj_beta = 0.0;
    *obj_rho = 0.0;
    *obj_objtype = 3;
    *obj_prev_objtype = 3;
    *obj_prev_nvar = 0;
    *obj_prev_hasLinear = false;
    *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factoryConstruct_hh1q4(int32_T mIneqMax, int32_T
    nVarMax, int32_T mConstrMax, s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj)
{
    int32_T i;
    obj->mConstr = 0;
    obj->mConstrOrig = 0;
    obj->mConstrMax = mConstrMax;
    obj->nVar = 193;
    obj->nVarOrig = 193;
    obj->nVarMax = nVarMax;
    obj->ldA = nVarMax;
    obj->Aineq.size = mIneqMax * nVarMax;
    obj->bineq.size = mIneqMax;
    obj->Aeq.size = 96 * nVarMax;
    obj->lb.size = nVarMax;
    obj->ub.size = nVarMax;
    obj->indexLB.size = nVarMax;
    obj->indexUB.size = nVarMax;
    obj->indexFixed.size = nVarMax;
    obj->mEqRemoved = 0;
    obj->ATwset.size = nVarMax * mConstrMax;
    obj->bwset.size = mConstrMax;
    obj->nActiveConstr = 0;
    obj->maxConstrWorkspace.size = mConstrMax;
    for (i = 0; i < 5; i++) {
        obj->sizes[i] = 0;
        obj->sizesNormal[i] = 0;
        obj->sizesPhaseOne[i] = 0;
        obj->sizesRegularized[i] = 0;
        obj->sizesRegPhaseOne[i] = 0;
    }

    for (i = 0; i < 6; i++) {
        obj->isActiveIdx[i] = 0;
        obj->isActiveIdxNormal[i] = 0;
        obj->isActiveIdxPhaseOne[i] = 0;
        obj->isActiveIdxRegularized[i] = 0;
        obj->isActiveIdxRegPhaseOne[i] = 0;
    }

    obj->isActiveConstr.size = mConstrMax;
    obj->Wid.size = mConstrMax;
    obj->Wlocalidx.size = mConstrMax;
    for (i = 0; i < 5; i++) {
        obj->nWConstr[i] = 0;
    }

    obj->probType = 3;
    obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_loadProblem(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj,
    int32_T mIneq, int32_T mLinIneq, const real_T Aineq_data[], int32_T mLB,
    int32_T mUB, int32_T mFixed, int32_T mConstrMax)
{
    int32_T x_tmp[6];
    int32_T e_k;
    int32_T i;
    e_k = mIneq + mLB;
    i = ((e_k + mUB) + mFixed) + 96;
    obj->mConstr = i;
    obj->mConstrOrig = i;
    obj->mConstrMax = mConstrMax;
    obj->sizes[0] = mFixed;
    obj->sizes[1] = 96;
    obj->sizes[2] = mIneq;
    obj->sizes[3] = mLB;
    obj->sizes[4] = mUB;
    for (i = 0; i < 5; i++) {
        obj->sizesNormal[i] = obj->sizes[i];
    }

    obj->sizesPhaseOne[0] = mFixed;
    obj->sizesPhaseOne[1] = 96;
    obj->sizesPhaseOne[2] = mIneq;
    obj->sizesPhaseOne[3] = mLB + 1;
    obj->sizesPhaseOne[4] = mUB;
    obj->sizesRegularized[0] = mFixed;
    obj->sizesRegularized[1] = 96;
    obj->sizesRegularized[2] = mIneq;
    obj->sizesRegularized[3] = e_k + 192;
    obj->sizesRegularized[4] = mUB;
    obj->sizesRegPhaseOne[0] = mFixed;
    obj->sizesRegPhaseOne[1] = 96;
    obj->sizesRegPhaseOne[2] = mIneq;
    obj->sizesRegPhaseOne[3] = e_k + 193;
    obj->sizesRegPhaseOne[4] = mUB;
    x_tmp[0] = 1;
    x_tmp[1] = mFixed;
    x_tmp[2] = 96;
    x_tmp[3] = mIneq;
    x_tmp[4] = mLB;
    x_tmp[5] = mUB;
    for (i = 0; i < 6; i++) {
        obj->isActiveIdxRegPhaseOne[i] = x_tmp[i];
    }

    for (i = 0; i < 5; i++) {
        obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
    }

    for (i = 0; i < 6; i++) {
        obj->isActiveIdx[i] = obj->isActiveIdxRegPhaseOne[i];
        obj->isActiveIdxRegPhaseOne[i] = x_tmp[i];
    }

    for (i = 0; i < 5; i++) {
        obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
    }

    for (i = 0; i < 6; i++) {
        obj->isActiveIdxNormal[i] = obj->isActiveIdxRegPhaseOne[i];
    }

    obj->isActiveIdxRegPhaseOne[0] = 1;
    obj->isActiveIdxRegPhaseOne[1] = mFixed;
    obj->isActiveIdxRegPhaseOne[2] = 96;
    obj->isActiveIdxRegPhaseOne[3] = mIneq;
    obj->isActiveIdxRegPhaseOne[4] = mLB + 1;
    obj->isActiveIdxRegPhaseOne[5] = mUB;
    for (i = 0; i < 5; i++) {
        obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
    }

    for (i = 0; i < 6; i++) {
        obj->isActiveIdxPhaseOne[i] = obj->isActiveIdxRegPhaseOne[i];
    }

    obj->isActiveIdxRegPhaseOne[0] = 1;
    obj->isActiveIdxRegPhaseOne[1] = mFixed;
    obj->isActiveIdxRegPhaseOne[2] = 96;
    obj->isActiveIdxRegPhaseOne[3] = mIneq;
    obj->isActiveIdxRegPhaseOne[4] = e_k + 192;
    obj->isActiveIdxRegPhaseOne[5] = mUB;
    for (i = 0; i < 5; i++) {
        obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
    }

    for (i = 0; i < 6; i++) {
        obj->isActiveIdxRegularized[i] = obj->isActiveIdxRegPhaseOne[i];
    }

    obj->isActiveIdxRegPhaseOne[0] = 1;
    obj->isActiveIdxRegPhaseOne[1] = mFixed;
    obj->isActiveIdxRegPhaseOne[2] = 96;
    obj->isActiveIdxRegPhaseOne[3] = mIneq;
    obj->isActiveIdxRegPhaseOne[4] = e_k + 193;
    obj->isActiveIdxRegPhaseOne[5] = mUB;
    for (e_k = 0; e_k < 5; e_k++) {
        obj->isActiveIdxRegPhaseOne[e_k + 1] += obj->isActiveIdxRegPhaseOne[e_k];
    }

    for (i = 0; i < mLinIneq; i++) {
        for (e_k = 0; e_k < 193; e_k++) {
            obj->Aineq.data[e_k + obj->ldA * i] = Aineq_data[mLinIneq * e_k + i];
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_quadraticObjective(real_T runtimedata_lastMV, const
    real_T runtimedata_ref[96], const real_T X[97], const real_T U[97], real_T e,
    real_T* f, real_T gfx[96], real_T gfu[96], real_T* gfe)
{
    real_T duk;
    real_T wtUerr;
    real_T yerr;
    int32_T i;
    *f = 0.0;
    for (i = 0; i < 96; i++) {
        gfu[i] = 0.0;
        yerr = X[i + 1] - runtimedata_ref[i];
        *f += yerr * yerr;
        if (i + 1 == 1) {
            duk = U[i] - runtimedata_lastMV;
        }
        else {
            duk = U[i] - U[i - 1];
        }

        wtUerr = 0.0 * U[i];
        *f += wtUerr * wtUerr;
        gfu[i] += 0.0 * wtUerr;
        duk *= 0.1;
        *f += duk * duk;
        duk *= 0.1;
        gfu[i] += duk;
        if (i + 1 > 1) {
            gfu[i - 1] -= duk;
        }

        gfx[i] = yerr;
    }

    *f += 100000.0 * e * e;
    for (i = 0; i < 96; i++) {
        gfx[i] *= 2.0;
        gfu[i] *= 2.0;
    }

    *gfe = 200000.0 * e;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::mode_znlmpc_computeJacobianCost(real_T f0, const real_T
    x0[97], real_T u0[97], real_T e0, real_T Jx[96], real_T Jmv[96], real_T* Je)
{
    real_T xa[97];
    real_T f;
    real_T xa_0;
    int32_T k;
    for (k = 0; k < 97; k++) {
        xa_0 = std::abs(x0[k]);
        if (xa_0 < 1.0) {
            xa_0 = 1.0;
        }

        xa[k] = xa_0;
    }

    for (k = 0; k < 96; k++) {
        Jx[k] = (model_customCostFunction(u0) - f0) / (1.0E-6 * xa[0]);
    }

    for (k = 0; k < 97; k++) {
        xa_0 = std::abs(u0[k]);
        if (xa_0 < 1.0) {
            xa_0 = 1.0;
        }

        xa[k] = xa_0;
    }

    xa_0 = 1.0E-6 * xa[0];
    for (k = 0; k < 95; k++) {
        u0[k] += xa_0;
        f = model_customCostFunction(u0);
        u0[k] -= xa_0;
        Jmv[k] = (f - f0) / xa_0;
    }

    u0[95] += xa_0;
    u0[96] += xa_0;
    f = model_customCostFunction(u0);
    u0[95] -= xa_0;
    u0[96] -= xa_0;
    Jmv[95] = (f - f0) / xa_0;
    xa_0 = model_customCostFunction(u0);
    f = std::abs(e0);
    if ((1.0E-6 > f) || rtIsNaN(f)) {
        f = 1.0E-6;
    }

    *Je = (xa_0 - xa_0) / (f * 1.0E-6 * 2.0);
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_anon_p(real_T runtimedata_x, real_T
    runtimedata_lastMV, const real_T runtimedata_ref[96], const real_T z[193],
    real_T* varargout_1, real_T varargout_2[193])
{
    real_T Gfxu_0[193];
    real_T gfX_0[193];
    real_T U[97];
    real_T X[97];
    real_T Gfuu[96];
    real_T Gfxu[96];
    real_T gfU[96];
    real_T gfX[96];
    real_T varargout_2_tmp[96];
    real_T e;
    real_T fs;
    real_T fu;
    real_T gfeu;
    int32_T i;
    int32_T i_0;
    static const int8_T b[9216] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

    const int8_T* varargout_2_tmp_0;
    model_znlmpc_getXUe(z, runtimedata_x, X, U, &e);
    model_quadraticObjective(runtimedata_lastMV, runtimedata_ref, X, U, e, &fs,
        gfX, gfU, &gfX_0[192]);
    fu = model_customCostFunction(U);
    mode_znlmpc_computeJacobianCost(fu, X, U, e, Gfxu, Gfuu, &gfeu);
    *varargout_1 = fs + fu;
    varargout_2_tmp_0 = &b[0];
    std::memset(&varargout_2_tmp[0], 0, 96U * sizeof(real_T));
    for (i_0 = 0; i_0 < 96; i_0++) {
        for (i = 0; i < 96; i++) {
            varargout_2_tmp[i] += static_cast<real_T>(varargout_2_tmp_0[96 * i_0 + i])
                * gfU[i_0];
        }
    }

    std::memset(&gfU[0], 0, 96U * sizeof(real_T));
    for (i_0 = 0; i_0 < 96; i_0++) {
        for (i = 0; i < 96; i++) {
            gfU[i] += static_cast<real_T>(varargout_2_tmp_0[96 * i_0 + i]) * Gfuu[i_0];
        }

        gfX_0[i_0] = gfX[i_0];
        gfX_0[i_0 + 96] = varargout_2_tmp[i_0];
        Gfxu_0[i_0] = Gfxu[i_0];
    }

    std::memcpy(&Gfxu_0[96], &gfU[0], 96U * sizeof(real_T));
    Gfxu_0[192] = gfeu;
    for (i = 0; i < 193; i++) {
        varargout_2[i] = gfX_0[i] + Gfxu_0[i];
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
int32_T modelModelClass::model_checkVectorNonFinite(int32_T N, const real_T
    vec_data[], int32_T iv0)
{
    real_T allFinite_tmp;
    int32_T idx_current;
    int32_T idx_end;
    int32_T status;
    boolean_T allFinite;
    status = 1;
    allFinite = true;
    idx_current = iv0;
    idx_end = (iv0 + N) - 1;
    while (allFinite && (idx_current <= idx_end)) {
        allFinite_tmp = vec_data[idx_current - 1];
        allFinite = ((!rtIsInf(allFinite_tmp)) && (!rtIsNaN(allFinite_tmp)));
        idx_current++;
    }

    if (!allFinite) {
        idx_current -= 2;
        if (rtIsNaN(vec_data[idx_current])) {
            status = -3;
        }
        else if (vec_data[idx_current] < 0.0) {
            status = -1;
        }
        else {
            status = -2;
        }
    }

    return status;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::computeObjectiveAndUserGradient(real_T
    obj_objfun_workspace_runtimedat, real_T obj_objfun_workspace_runtimed_0, const
    real_T obj_objfun_workspace_runtimed_1[96], const real_T x[193], real_T
    grad_workspace_data[], real_T* fval, int32_T* status)
{
    real_T varargout_2[193];
    model_anon_p(obj_objfun_workspace_runtimedat, obj_objfun_workspace_runtimed_0,
        obj_objfun_workspace_runtimed_1, x, fval, varargout_2);
    std::memcpy(&grad_workspace_data[0], &varargout_2[0], 193U * sizeof(real_T));
    if (rtIsInf(*fval) || rtIsNaN(*fval)) {
        if (rtIsNaN(*fval)) {
            *status = -3;
        }
        else if (*fval < 0.0) {
            *status = -1;
        }
        else {
            *status = -2;
        }
    }
    else {
        *status = model_checkVectorNonFinite(193, grad_workspace_data, 1);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
int32_T modelModelClass::model_checkVectorNonFinite_h(const real_T vec[96])
{
    int32_T idx_current;
    int32_T status;
    boolean_T allFinite;
    status = 1;
    allFinite = true;
    idx_current = 0;
    while (allFinite && (idx_current + 1 <= 96)) {
        allFinite = ((!rtIsInf(vec[idx_current])) && (!rtIsNaN(vec[idx_current])));
        idx_current++;
    }

    if (!allFinite) {
        idx_current--;
        if (rtIsNaN(vec[idx_current])) {
            status = -3;
        }
        else if (vec[idx_current] < 0.0) {
            status = -1;
        }
        else {
            status = -2;
        }
    }

    return status;
}

// Function for MATLAB Function: '<S4>/NLMPC'
int32_T modelModelClass::model_checkMatrixNonFinite(int32_T ncols, const real_T
    mat_data[], int32_T col0, int32_T ldm)
{
    int32_T col;
    int32_T col_end;
    int32_T idx_mat;
    int32_T row;
    int32_T status;
    boolean_T allFinite;
    status = 1;
    allFinite = true;
    row = -1;
    col = col0;
    col_end = (col0 + ncols) - 1;
    while (allFinite && (col <= col_end)) {
        row = -1;
        while (allFinite && (row + 2 <= 193)) {
            idx_mat = ((col - 1) * ldm + row) + 1;
            allFinite = ((!rtIsInf(mat_data[idx_mat])) && (!rtIsNaN(mat_data[idx_mat])));
            row++;
        }

        col++;
    }

    if (!allFinite) {
        idx_mat = (col - 2) * ldm + row;
        if (rtIsNaN(mat_data[idx_mat])) {
            status = -3;
        }
        else if (mat_data[idx_mat] < 0.0) {
            status = -1;
        }
        else {
            status = -2;
        }
    }

    return status;
}

// Function for MATLAB Function: '<S4>/NLMPC'
int32_T modelModelClass::computeConstraintsAndUserJacobi(real_T
    obj_nonlcon_workspace_runtimeda, const real_T obj_nonlcon_workspace_runtime_0
    [96], const real_T obj_nonlcon_workspace_runtime_1[96], real_T
    obj_nonlcon_workspace_runtime_2, real_T obj_nonlcon_workspace_runtime_3,
    int32_T obj_mCineq, const real_T x[193], real_T Cineq_workspace_data[],
    int32_T ineq0, real_T Ceq_workspace[96], real_T JacIneqTrans_workspace_data[],
    int32_T iJI_col, int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T
    ldJE)
{
    real_T varargout_1_data[386];
    real_T varargout_2[96];
    int32_T varargout_3_size[2];
    int32_T idx_col;
    int32_T status;
    int32_T varargout_1_size;
    model_anon(obj_nonlcon_workspace_runtimeda, obj_nonlcon_workspace_runtime_0,
        obj_nonlcon_workspace_runtime_1, obj_nonlcon_workspace_runtime_2,
        obj_nonlcon_workspace_runtime_3, x, varargout_1_data,
        &varargout_1_size, varargout_2, model_B.varargout_3_data_c,
        varargout_3_size, model_B.varargout_4_p);
    for (varargout_1_size = -1; varargout_1_size < obj_mCineq - 1;
        varargout_1_size++) {
        Cineq_workspace_data[ineq0 + varargout_1_size] =
            varargout_1_data[varargout_1_size + 1];
    }

    std::memcpy(&Ceq_workspace[0], &varargout_2[0], 96U * sizeof(real_T));
    for (varargout_1_size = 0; varargout_1_size < 193; varargout_1_size++) {
        for (idx_col = 0; idx_col < varargout_3_size[1]; idx_col++) {
            JacIneqTrans_workspace_data[varargout_1_size + ldJI * ((iJI_col + idx_col)
                - 1)] = model_B.varargout_3_data_c[varargout_1_size + 193 * idx_col];
        }

        for (idx_col = 0; idx_col < 96; idx_col++) {
            JacEqTrans_workspace_data[varargout_1_size + ldJE * idx_col] =
                model_B.varargout_4_p[193 * idx_col + varargout_1_size];
        }
    }

    status = model_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data, ineq0);
    if (status == 1) {
        status = model_checkVectorNonFinite_h(Ceq_workspace);
        if (status == 1) {
            status = model_checkMatrixNonFinite(obj_mCineq,
                JacIneqTrans_workspace_data, iJI_col, ldJI);
            if (status == 1) {
                status = model_checkMatrixNonFinite(96, JacEqTrans_workspace_data, 1,
                    ldJE);
            }
        }
    }

    return status;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::evalObjAndConstrAndDerivatives(real_T
    obj_objfun_workspace_runtimedat, real_T obj_objfun_workspace_runtimed_0, const
    real_T obj_objfun_workspace_runtimed_1[96], real_T
    obj_nonlcon_workspace_runtimeda, const real_T obj_nonlcon_workspace_runtime_0
    [96], const real_T obj_nonlcon_workspace_runtime_1[96], real_T
    obj_nonlcon_workspace_runtime_2, real_T obj_nonlcon_workspace_runtime_3,
    int32_T obj_mCineq, const real_T x[193], real_T grad_workspace_data[], real_T
    Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[96], real_T
    JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
    JacEqTrans_workspace_data[], int32_T ldJE, real_T* fval, int32_T* status)
{
    computeObjectiveAndUserGradient(obj_objfun_workspace_runtimedat,
        obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1, x,
        grad_workspace_data, fval, status);
    if (*status == 1) {
        *status = computeConstraintsAndUserJacobi(obj_nonlcon_workspace_runtimeda,
            obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
            obj_nonlcon_workspace_runtime_2, obj_nonlcon_workspace_runtime_3,
            obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace,
            JacIneqTrans_workspace_data, iJI_col, ldJI, JacEqTrans_workspace_data,
            ldJE);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_updateWorkingSetForNewQP(const real_T xk[193],
    s_yK2JoCuYdmZkt0peIhHCXB_mode_T* WorkingSet, int32_T mIneq, const real_T
    cIneq_data[], const real_T cEq[96], int32_T mLB, const real_T lb[193], int32_T
    mUB, const real_T ub[193], int32_T mFixed)
{
    int32_T b_idx;
    int32_T iEq0;
    int32_T iw0;
    iw0 = WorkingSet->ldA * mFixed;
    iEq0 = 0;
    for (b_idx = 0; b_idx < 96; b_idx++) {
        WorkingSet->beq[b_idx] = -cEq[b_idx];
        WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
        std::memcpy(&WorkingSet->ATwset.data[iw0], &WorkingSet->Aeq.data[iEq0], 193U
            * sizeof(real_T));
        iw0 += WorkingSet->ldA;
        iEq0 += WorkingSet->ldA;
    }

    for (b_idx = 0; b_idx < mIneq; b_idx++) {
        WorkingSet->bineq.data[b_idx] = -cIneq_data[b_idx];
    }

    for (b_idx = 0; b_idx < mLB; b_idx++) {
        WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1] = -lb
            [WorkingSet->indexLB.data[b_idx] - 1] + xk[WorkingSet->indexLB.data[b_idx]
            - 1];
    }

    for (b_idx = 0; b_idx < mUB; b_idx++) {
        WorkingSet->ub.data[WorkingSet->indexUB.data[b_idx] - 1] = ub
            [WorkingSet->indexUB.data[b_idx] - 1] - xk[WorkingSet->indexUB.data[b_idx]
            - 1];
    }

    for (b_idx = 0; b_idx < mFixed; b_idx++) {
        WorkingSet->ub.data[WorkingSet->indexFixed.data[b_idx] - 1] = ub
            [WorkingSet->indexFixed.data[b_idx] - 1] - xk[WorkingSet->
            indexFixed.data[b_idx] - 1];
        WorkingSet->bwset.data[b_idx] = ub[WorkingSet->indexFixed.data[b_idx] - 1] -
            xk[WorkingSet->indexFixed.data[b_idx] - 1];
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_modifyOverheadPhaseOne_
(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj)
{
    int32_T idxEq;
    int32_T idxUpperExisting;
    int32_T tmp;
    for (idxUpperExisting = 0; idxUpperExisting < obj->sizes[0]; idxUpperExisting
        ++) {
        obj->ATwset.data[(obj->nVar + obj->ldA * idxUpperExisting) - 1] = 0.0;
    }

    for (idxUpperExisting = 0; idxUpperExisting < 96; idxUpperExisting++) {
        idxEq = (obj->ldA * idxUpperExisting + obj->nVar) - 1;
        obj->Aeq.data[idxEq] = 0.0;
        obj->ATwset.data[idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)] = 0.0;
    }

    for (idxUpperExisting = 0; idxUpperExisting < obj->sizes[2]; idxUpperExisting
        ++) {
        obj->Aineq.data[(obj->nVar + obj->ldA * idxUpperExisting) - 1] = -1.0;
    }

    obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
    obj->lb.data[obj->nVar - 1] = 1.0E-5;
    for (idxUpperExisting = obj->isActiveIdx[2]; idxUpperExisting <=
        obj->nActiveConstr; idxUpperExisting++) {
        obj->ATwset.data[(obj->nVar + obj->ldA * (idxUpperExisting - 1)) - 1] = -1.0;
    }

    idxUpperExisting = obj->isActiveIdx[4] - 1;
    if (obj->nWConstr[4] > 0) {
        for (idxEq = 1; idxEq - 1 < obj->sizesNormal[4]; idxEq++) {
            tmp = idxUpperExisting + idxEq;
            obj->isActiveConstr.data[tmp] = obj->isActiveConstr.data[tmp - 1];
        }
    }

    obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_setProblemType(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj,
    int32_T PROBLEM_TYPE)
{
    int32_T b_tmp;
    int32_T colOffsetATw;
    int32_T colOffsetAeq;
    int32_T colOffsetAineq;
    int32_T d_idx_row;
    int32_T f_idx_row;
    int32_T mIneq;
    int32_T offsetEq1;
    int32_T offsetEq2;
    switch (PROBLEM_TYPE) {
    case 3:
        obj->nVar = 193;
        obj->mConstr = obj->mConstrOrig;
        if (obj->nWConstr[4] > 0) {
            for (mIneq = -1; mIneq < obj->sizesNormal[4] - 1; mIneq++) {
                obj->isActiveConstr.data[obj->isActiveIdxNormal[4] + mIneq] =
                    obj->isActiveConstr.data[obj->isActiveIdx[4] + mIneq];
            }
        }

        for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
            obj->sizes[d_idx_row] = obj->sizesNormal[d_idx_row];
        }

        for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
            obj->isActiveIdx[d_idx_row] = obj->isActiveIdxNormal[d_idx_row];
        }
        break;

    case 1:
        obj->nVar = 194;
        obj->mConstr = obj->mConstrOrig + 1;
        for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
            obj->sizes[d_idx_row] = obj->sizesPhaseOne[d_idx_row];
        }

        for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
            obj->isActiveIdx[d_idx_row] = obj->isActiveIdxPhaseOne[d_idx_row];
        }

        model_modifyOverheadPhaseOne_(obj);
        break;

    case 2:
        obj->nVar = obj->nVarMax - 1;
        obj->mConstr = obj->mConstrMax - 1;
        for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
            obj->sizes[d_idx_row] = obj->sizesRegularized[d_idx_row];
        }

        if (obj->probType != 4) {
            mIneq = obj->sizes[2] + 193;
            offsetEq1 = obj->sizes[2];
            offsetEq2 = obj->sizes[2];
            for (colOffsetAineq = 0; colOffsetAineq < obj->sizes[0]; colOffsetAineq++)
            {
                colOffsetATw = obj->ldA * colOffsetAineq;
                for (colOffsetAeq = 194; colOffsetAeq <= obj->nVar; colOffsetAeq++) {
                    obj->ATwset.data[(colOffsetAeq + colOffsetATw) - 1] = 0.0;
                }
            }

            for (colOffsetATw = 0; colOffsetATw <= mIneq - 194; colOffsetATw++) {
                colOffsetAineq = obj->ldA * colOffsetATw - 1;
                for (colOffsetAeq = 194; colOffsetAeq <= colOffsetATw + 193;
                    colOffsetAeq++) {
                    obj->Aineq.data[colOffsetAeq + colOffsetAineq] = 0.0;
                }

                obj->Aineq.data[(colOffsetATw + colOffsetAineq) + 194] = -1.0;
                for (colOffsetAeq = colOffsetATw + 195; colOffsetAeq <= obj->nVar;
                    colOffsetAeq++) {
                    obj->Aineq.data[colOffsetAeq + colOffsetAineq] = 0.0;
                }
            }

            for (colOffsetAineq = 0; colOffsetAineq < 96; colOffsetAineq++) {
                colOffsetAeq = obj->ldA * colOffsetAineq - 1;
                colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA + colOffsetAeq;
                for (d_idx_row = 194; d_idx_row <= mIneq; d_idx_row++) {
                    obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
                    obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
                }

                b_tmp = mIneq + colOffsetAineq;
                for (d_idx_row = offsetEq1 + 194; d_idx_row <= b_tmp; d_idx_row++) {
                    obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
                    obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
                }

                d_idx_row = b_tmp + colOffsetAeq;
                obj->Aeq.data[d_idx_row + 1] = -1.0;
                obj->ATwset.data[(b_tmp + colOffsetATw) + 1] = -1.0;
                for (f_idx_row = (offsetEq1 + colOffsetAineq) + 195; f_idx_row <= mIneq
                    + 96; f_idx_row++) {
                    obj->Aeq.data[f_idx_row + colOffsetAeq] = 0.0;
                    obj->ATwset.data[f_idx_row + colOffsetATw] = 0.0;
                }

                for (f_idx_row = offsetEq2 + 290; f_idx_row <= b_tmp + 96; f_idx_row++)
                {
                    obj->Aeq.data[f_idx_row + colOffsetAeq] = 0.0;
                    obj->ATwset.data[f_idx_row + colOffsetATw] = 0.0;
                }

                obj->Aeq.data[d_idx_row + 97] = 1.0;
                obj->ATwset.data[(b_tmp + colOffsetATw) + 97] = 1.0;
                for (d_idx_row = (offsetEq2 + colOffsetAineq) + 291; d_idx_row <=
                    obj->nVar; d_idx_row++) {
                    obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
                    obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
                }
            }

            offsetEq1 = 193;
            for (offsetEq2 = obj->sizesNormal[3]; offsetEq2 < obj->sizesRegularized[3];
                offsetEq2++) {
                offsetEq1++;
                obj->indexLB.data[offsetEq2] = offsetEq1;
            }

            if (obj->nWConstr[4] > 0) {
                for (offsetEq1 = -1; offsetEq1 < obj->sizesRegularized[4] - 1; offsetEq1
                    ++) {
                    obj->isActiveConstr.data[(obj->isActiveIdxRegularized[4] + offsetEq1)
                        + 1] = obj->isActiveConstr.data[obj->isActiveIdx[4] + offsetEq1];
                }
            }

            for (offsetEq1 = obj->isActiveIdx[4]; offsetEq1 <
                obj->isActiveIdxRegularized[4]; offsetEq1++) {
                obj->isActiveConstr.data[offsetEq1 - 1] = false;
            }

            for (offsetEq1 = 194; offsetEq1 <= mIneq + 192; offsetEq1++) {
                obj->lb.data[offsetEq1 - 1] = 0.0;
            }

            for (mIneq = obj->isActiveIdx[2] - 1; mIneq < obj->nActiveConstr; mIneq++)
            {
                colOffsetATw = obj->ldA * mIneq - 1;
                if (obj->Wid.data[mIneq] == 3) {
                    for (offsetEq1 = 194; offsetEq1 <= obj->Wlocalidx.data[mIneq] + 192;
                        offsetEq1++) {
                        obj->ATwset.data[offsetEq1 + colOffsetATw] = 0.0;
                    }

                    obj->ATwset.data[(obj->Wlocalidx.data[mIneq] + colOffsetATw) + 193] =
                        -1.0;
                    for (offsetEq1 = obj->Wlocalidx.data[mIneq] + 194; offsetEq1 <=
                        obj->nVar; offsetEq1++) {
                        obj->ATwset.data[offsetEq1 + colOffsetATw] = 0.0;
                    }
                }
                else {
                    for (offsetEq1 = 194; offsetEq1 <= obj->nVar; offsetEq1++) {
                        obj->ATwset.data[offsetEq1 + colOffsetATw] = 0.0;
                    }
                }
            }
        }

        for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
            obj->isActiveIdx[d_idx_row] = obj->isActiveIdxRegularized[d_idx_row];
        }
        break;

    default:
        obj->nVar = obj->nVarMax;
        obj->mConstr = obj->mConstrMax;
        for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
            obj->sizes[d_idx_row] = obj->sizesRegPhaseOne[d_idx_row];
        }

        for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
            obj->isActiveIdx[d_idx_row] = obj->isActiveIdxRegPhaseOne[d_idx_row];
        }

        model_modifyOverheadPhaseOne_(obj);
        break;
    }

    obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_initActiveSet(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj)
{
    int32_T b_idx_local;
    int32_T c_i;
    int32_T iATw0;
    int32_T iAeq0;
    int32_T idx_global;
    int32_T nWFixed;
    model_setProblemType(obj, 3);
    for (nWFixed = obj->isActiveIdx[2]; nWFixed <= obj->mConstrMax; nWFixed++) {
        obj->isActiveConstr.data[nWFixed - 1] = false;
    }

    obj->nWConstr[0] = obj->sizes[0];
    obj->nWConstr[1] = 96;
    obj->nWConstr[2] = 0;
    obj->nWConstr[3] = 0;
    obj->nWConstr[4] = 0;
    obj->nActiveConstr = obj->nWConstr[0] + 96;
    nWFixed = obj->sizes[0];
    for (b_idx_local = 0; b_idx_local < nWFixed; b_idx_local++) {
        obj->Wid.data[b_idx_local] = 1;
        obj->Wlocalidx.data[b_idx_local] = b_idx_local + 1;
        obj->isActiveConstr.data[b_idx_local] = true;
        idx_global = obj->ldA * b_idx_local - 1;
        for (iAeq0 = 0; iAeq0 <= obj->indexFixed.data[b_idx_local] - 2; iAeq0++) {
            obj->ATwset.data[(iAeq0 + idx_global) + 1] = 0.0;
        }

        obj->ATwset.data[obj->indexFixed.data[b_idx_local] + idx_global] = 1.0;
        for (iAeq0 = obj->indexFixed.data[b_idx_local] + 1; iAeq0 <= obj->nVar;
            iAeq0++) {
            obj->ATwset.data[iAeq0 + idx_global] = 0.0;
        }

        obj->bwset.data[b_idx_local] = obj->ub.data[obj->indexFixed.data[b_idx_local]
            - 1];
    }

    for (b_idx_local = 0; b_idx_local < 96; b_idx_local++) {
        idx_global = nWFixed + b_idx_local;
        obj->Wid.data[idx_global] = 2;
        obj->Wlocalidx.data[idx_global] = b_idx_local + 1;
        obj->isActiveConstr.data[idx_global] = true;
        iAeq0 = obj->ldA * b_idx_local;
        iATw0 = obj->ldA * idx_global;
        for (c_i = 0; c_i < obj->nVar; c_i++) {
            obj->ATwset.data[iATw0 + c_i] = obj->Aeq.data[iAeq0 + c_i];
        }

        obj->bwset.data[idx_global] = obj->beq[b_idx_local];
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factoryConstruct_hh(int32_T maxRows, int32_T maxCols,
    int32_T* obj_ldq, int32_T obj_QR_size[2], real_T obj_Q_data[], int32_T
    obj_Q_size[2], int32_T obj_jpvt_data[], int32_T* obj_jpvt_size, int32_T
    * obj_mrows, int32_T* obj_ncols, int32_T* obj_tau_size, int32_T* obj_minRowCol,
    boolean_T* obj_usedPivoting)
{
    int32_T loop_ub;
    *obj_ldq = maxRows;
    obj_QR_size[0] = maxRows;
    obj_QR_size[1] = maxCols;
    obj_Q_size[0] = maxRows;
    obj_Q_size[1] = maxRows;
    loop_ub = maxRows * maxRows - 1;
    if (0 <= loop_ub) {
        std::memset(&obj_Q_data[0], 0, (loop_ub + 1) * sizeof(real_T));
    }

    *obj_jpvt_size = maxCols;
    if (0 <= maxCols - 1) {
        std::memset(&obj_jpvt_data[0], 0, maxCols * sizeof(int32_T));
    }

    *obj_mrows = 0;
    *obj_ncols = 0;
    if (maxRows < maxCols) {
        *obj_tau_size = maxRows;
    }
    else {
        *obj_tau_size = maxCols;
    }

    *obj_minRowCol = 0;
    *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factoryConstruct_hh1(int32_T MaxDims, int32_T
    obj_FMat_size[2], int32_T* obj_ldm, int32_T* obj_ndims, int32_T* obj_info,
    real_T* obj_scaleFactor, boolean_T* obj_ConvexCheck, real_T* obj_regTol_,
    real_T* obj_workspace_, real_T* obj_workspace2_)
{
    obj_FMat_size[0] = MaxDims;
    obj_FMat_size[1] = MaxDims;
    *obj_ldm = MaxDims;
    *obj_ndims = 0;
    *obj_info = 0;
    *obj_scaleFactor = 0.0;
    *obj_ConvexCheck = true;
    *obj_regTol_ = (rtInf);
    *obj_workspace_ = (rtInf);
    *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv(int32_T m, int32_T n, const real_T A_data[],
    int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
    int32_T b;
    int32_T c;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    int32_T iy;
    ix = ix0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
        iy = 0;
        b = (iac + m) - 1;
        for (ia = iac; ia <= b; ia++) {
            y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
            iy++;
        }

        ix++;
        iac += lda;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_computeGradLag(real_T workspace_data[], int32_T ldA,
    int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
    AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
    finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
    const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
    int32_T c_idx;
    int32_T iL0;
    for (iL0 = 0; iL0 < nVar; iL0++) {
        workspace_data[iL0] = grad_data[iL0];
    }

    for (iL0 = 0; iL0 < mFixed; iL0++) {
        workspace_data[finiteFixed_data[iL0] - 1] += lambda_data[iL0];
    }

    model_xgemv(nVar, 96, AeqTrans_data, ldA, lambda_data, mFixed + 1,
        workspace_data);
    model_xgemv(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed + 97,
        workspace_data);
    iL0 = (mFixed + mIneq) + 96;
    for (c_idx = 0; c_idx < mLB; c_idx++) {
        workspace_data[finiteLB_data[c_idx] - 1] -= lambda_data[iL0];
        iL0++;
    }

    for (c_idx = 0; c_idx < mUB; c_idx++) {
        workspace_data[finiteUB_data[c_idx] - 1] += lambda_data[iL0];
        iL0++;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_computePrimalFeasError(const real_T x[193],
    int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[], const real_T
    cEq[96], const int32_T finiteLB_data[], int32_T mLB, const real_T lb[193],
    const int32_T finiteUB_data[], int32_T mUB, const real_T ub[193])
{
    real_T feasError;
    real_T u1;
    int32_T b_idx;
    int32_T mIneq;
    feasError = 0.0;
    mIneq = mNonlinIneq + mLinIneq;
    for (b_idx = 0; b_idx < 96; b_idx++) {
        u1 = std::abs(cEq[b_idx]);
        if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
            feasError = u1;
        }
    }

    for (b_idx = 0; b_idx < mIneq; b_idx++) {
        u1 = cIneq_data[b_idx];
        if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
            feasError = u1;
        }
    }

    for (mIneq = 0; mIneq < mLB; mIneq++) {
        u1 = lb[finiteLB_data[mIneq] - 1] - x[finiteLB_data[mIneq] - 1];
        if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
            feasError = u1;
        }
    }

    for (mIneq = 0; mIneq < mUB; mIneq++) {
        u1 = x[finiteUB_data[mIneq] - 1] - ub[finiteUB_data[mIneq] - 1];
        if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
            feasError = u1;
        }
    }

    return feasError;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_computeDualFeasError(int32_T nVar, const real_T
    gradLag_data[], boolean_T* gradOK, real_T* val)
{
    real_T u1;
    int32_T b_idx;
    boolean_T exitg1;
    *gradOK = true;
    *val = 0.0;
    b_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (b_idx <= nVar - 1)) {
        *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
        if (!*gradOK) {
            exitg1 = true;
        }
        else {
            u1 = std::abs(gradLag_data[b_idx]);
            if ((!(*val > u1)) && (!rtIsNaN(u1))) {
                *val = u1;
            }

            b_idx++;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_saveJacobian(s_4PJjBY6NtHkFemjansM2s_model_T* obj,
    int32_T nVar, int32_T mIneq, const real_T JacCineqTrans_data[], int32_T
    ineqCol0, const real_T JacCeqTrans_data[], int32_T ldJ)
{
    int32_T b;
    int32_T iCol;
    int32_T iCol_old;
    int32_T idx_col;
    int32_T loop_ub_tmp;
    int32_T y_size_idx_0;
    int32_T y_size_idx_1;
    iCol = (ineqCol0 - 1) * ldJ;
    iCol_old = -1;
    b = mIneq - ineqCol0;
    for (idx_col = 0; idx_col <= b; idx_col++) {
        y_size_idx_0 = obj->JacCineqTrans_old.size[0];
        y_size_idx_1 = obj->JacCineqTrans_old.size[1];
        loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
        if (0 <= loop_ub_tmp - 1) {
            std::memcpy(&model_B.y_data[0], &obj->JacCineqTrans_old.data[0],
                loop_ub_tmp * sizeof(real_T));
        }

        for (loop_ub_tmp = 1; loop_ub_tmp - 1 < nVar; loop_ub_tmp++) {
            model_B.y_data[iCol_old + loop_ub_tmp] = JacCineqTrans_data[(iCol +
                loop_ub_tmp) - 1];
        }

        obj->JacCineqTrans_old.size[1] = y_size_idx_1;
        y_size_idx_0 *= y_size_idx_1;
        if (0 <= y_size_idx_0 - 1) {
            std::memcpy(&obj->JacCineqTrans_old.data[0], &model_B.y_data[0],
                y_size_idx_0 * sizeof(real_T));
        }

        iCol += ldJ;
        iCol_old += ldJ;
    }

    iCol = -1;
    iCol_old = -1;
    for (b = 0; b < 96; b++) {
        for (idx_col = 1; idx_col - 1 < nVar; idx_col++) {
            obj->JacCeqTrans_old.data[iCol_old + idx_col] = JacCeqTrans_data[iCol +
                idx_col];
        }

        iCol += ldJ;
        iCol_old += ldJ;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_saveState(s_4PJjBY6NtHkFemjansM2s_model_T* obj)
{
    int32_T k;
    int32_T y_size_idx_0;
    obj->sqpFval_old = obj->sqpFval;
    for (k = 0; k < 193; k++) {
        obj->xstarsqp_old[k] = obj->xstarsqp[k];
        obj->grad_old.data[k] = obj->grad.data[k];
    }

    y_size_idx_0 = obj->cIneq_old.size;
    if (0 <= obj->cIneq_old.size - 1) {
        std::memcpy(&model_B.y_data_l[0], &obj->cIneq_old.data[0],
            obj->cIneq_old.size * sizeof(real_T));
    }

    for (k = 0; k < obj->mIneq; k++) {
        model_B.y_data_l[k] = obj->cIneq.data[k];
    }

    if (0 <= y_size_idx_0 - 1) {
        std::memcpy(&obj->cIneq_old.data[0], &model_B.y_data_l[0], y_size_idx_0 *
            sizeof(real_T));
    }

    std::memcpy(&obj->cEq_old[0], &obj->cEq[0], 96U * sizeof(real_T));
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_computeComplError(const int32_T
    * fscales_lineq_constraint_size, const int32_T* fscales_cineq_constraint_size,
    const real_T xCurrent[193], int32_T mIneq, const real_T cIneq_data[], const
    int32_T finiteLB_data[], int32_T mLB, const real_T lb[193], const int32_T
    finiteUB_data[], int32_T mUB, const real_T ub[193], const real_T lambda_data[],
    int32_T iL0)
{
    real_T nlpComplError;
    real_T u0;
    real_T ubDelta;
    real_T ubLambda;
    int32_T c_idx;
    int32_T iLineq0;
    int32_T mLinIneq;
    nlpComplError = 0.0;
    for (iLineq0 = 0; iLineq0 < *fscales_lineq_constraint_size; iLineq0++) {
        u0 = std::abs(cIneq_data[iLineq0]);
        ubDelta = lambda_data[(iL0 + iLineq0) - 1];
        if ((!(u0 < ubDelta)) && (!rtIsNaN(ubDelta))) {
            u0 = ubDelta;
        }

        ubDelta = std::abs(ubDelta * cIneq_data[iLineq0]);
        if ((ubDelta < u0) || rtIsNaN(u0)) {
            u0 = ubDelta;
        }

        if ((!(nlpComplError > u0)) && (!rtIsNaN(u0))) {
            nlpComplError = u0;
        }
    }

    iLineq0 = (iL0 + *fscales_lineq_constraint_size) - 2;
    for (c_idx = 1; c_idx - 1 < *fscales_cineq_constraint_size; c_idx++) {
        u0 = std::abs(cIneq_data[(*fscales_lineq_constraint_size - 1) + c_idx]);
        ubDelta = lambda_data[iLineq0 + c_idx];
        if ((!(u0 < ubDelta)) && (!rtIsNaN(ubDelta))) {
            u0 = ubDelta;
        }

        ubDelta = std::abs(cIneq_data[(*fscales_lineq_constraint_size - 1) + c_idx] *
            ubDelta);
        if ((ubDelta < u0) || rtIsNaN(u0)) {
            u0 = ubDelta;
        }

        if ((!(nlpComplError > u0)) && (!rtIsNaN(u0))) {
            nlpComplError = u0;
        }
    }

    iLineq0 = (iL0 + mIneq) - 1;
    mLinIneq = iLineq0 + mLB;
    for (c_idx = 0; c_idx < mLB; c_idx++) {
        ubDelta = xCurrent[finiteLB_data[c_idx] - 1] - lb[finiteLB_data[c_idx] - 1];
        ubLambda = lambda_data[iLineq0 + c_idx];
        u0 = std::abs(ubDelta);
        if ((!(u0 < ubLambda)) && (!rtIsNaN(ubLambda))) {
            u0 = ubLambda;
        }

        ubDelta = std::abs(ubDelta * ubLambda);
        if ((ubDelta < u0) || rtIsNaN(u0)) {
            u0 = ubDelta;
        }

        if ((!(nlpComplError > u0)) && (!rtIsNaN(u0))) {
            nlpComplError = u0;
        }
    }

    for (iLineq0 = 0; iLineq0 < mUB; iLineq0++) {
        ubDelta = ub[finiteUB_data[iLineq0] - 1] - xCurrent[finiteUB_data[iLineq0] -
            1];
        ubLambda = lambda_data[mLinIneq + iLineq0];
        u0 = std::abs(ubDelta);
        if ((!(u0 < ubLambda)) && (!rtIsNaN(ubLambda))) {
            u0 = ubLambda;
        }

        ubDelta = std::abs(ubDelta * ubLambda);
        if ((ubDelta < u0) || rtIsNaN(u0)) {
            u0 = ubDelta;
        }

        if ((!(nlpComplError > u0)) && (!rtIsNaN(u0))) {
            nlpComplError = u0;
        }
    }

    return nlpComplError;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i(int32_T m, int32_T n, const real_T A_data[],
    int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
    int32_T b;
    int32_T c;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    int32_T iy;
    ix = ix0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
        iy = 0;
        b = (iac + m) - 1;
        for (ia = iac; ia <= b; ia++) {
            y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
            iy++;
        }

        ix++;
        iac += lda;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_computeGradLag_n(real_T workspace_data[], int32_T
    ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
    AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
    finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
    const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
    int32_T c_idx;
    int32_T iL0;
    for (iL0 = 0; iL0 < nVar; iL0++) {
        workspace_data[iL0] = grad_data[iL0];
    }

    for (iL0 = 0; iL0 < mFixed; iL0++) {
        workspace_data[finiteFixed_data[iL0] - 1] += lambda_data[iL0];
    }

    model_xgemv_i(nVar, 96, AeqTrans_data, ldA, lambda_data, mFixed + 1,
        workspace_data);
    model_xgemv_i(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed + 97,
        workspace_data);
    iL0 = (mFixed + mIneq) + 96;
    for (c_idx = 0; c_idx < mLB; c_idx++) {
        workspace_data[finiteLB_data[c_idx] - 1] -= lambda_data[iL0];
        iL0++;
    }

    for (c_idx = 0; c_idx < mUB; c_idx++) {
        workspace_data[finiteUB_data[c_idx] - 1] += lambda_data[iL0];
        iL0++;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_computeDualFeasError_j(int32_T nVar, const real_T
    gradLag_data[], boolean_T* gradOK, real_T* val)
{
    real_T u1;
    int32_T b_idx;
    boolean_T exitg1;
    *gradOK = true;
    *val = 0.0;
    b_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (b_idx <= nVar - 1)) {
        *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
        if (!*gradOK) {
            exitg1 = true;
        }
        else {
            u1 = std::abs(gradLag_data[b_idx]);
            if ((!(*val > u1)) && (!rtIsNaN(u1))) {
                *val = u1;
            }

            b_idx++;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::mode_updateWorkingSetForNewQP_d(const real_T xk[193],
    s_yK2JoCuYdmZkt0peIhHCXB_mode_T* WorkingSet, int32_T mIneq, int32_T
    mNonlinIneq, const real_T cIneq_data[], const real_T cEq[96], int32_T mLB,
    const real_T lb[193], int32_T mUB, const real_T ub[193], int32_T mFixed)
{
    int32_T b_idx;
    int32_T i;
    int32_T iEq0;
    int32_T iw0;
    int32_T nVar;
    nVar = WorkingSet->nVar - 1;
    iw0 = WorkingSet->ldA * mFixed;
    iEq0 = 0;
    for (b_idx = 0; b_idx < 96; b_idx++) {
        WorkingSet->beq[b_idx] = -cEq[b_idx];
        WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
        for (i = 0; i <= nVar; i++) {
            WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
        }

        iw0 += WorkingSet->ldA;
        iEq0 += WorkingSet->ldA;
    }

    for (iw0 = 0; iw0 < mIneq; iw0++) {
        WorkingSet->bineq.data[iw0] = -cIneq_data[iw0];
    }

    for (iw0 = 0; iw0 < mLB; iw0++) {
        WorkingSet->lb.data[WorkingSet->indexLB.data[iw0] - 1] = -lb
            [WorkingSet->indexLB.data[iw0] - 1] + xk[WorkingSet->indexLB.data[iw0] - 1];
    }

    for (iw0 = 0; iw0 < mUB; iw0++) {
        WorkingSet->ub.data[WorkingSet->indexUB.data[iw0] - 1] = ub
            [WorkingSet->indexUB.data[iw0] - 1] - xk[WorkingSet->indexUB.data[iw0] - 1];
    }

    for (iw0 = 0; iw0 < mFixed; iw0++) {
        WorkingSet->ub.data[WorkingSet->indexFixed.data[iw0] - 1] = ub
            [WorkingSet->indexFixed.data[iw0] - 1] - xk[WorkingSet->
            indexFixed.data[iw0] - 1];
        WorkingSet->bwset.data[iw0] = ub[WorkingSet->indexFixed.data[iw0] - 1] -
            xk[WorkingSet->indexFixed.data[iw0] - 1];
    }

    if (WorkingSet->nActiveConstr > mFixed + 96) {
        for (b_idx = mFixed + 96; b_idx < WorkingSet->nActiveConstr; b_idx++) {
            switch (WorkingSet->Wid.data[b_idx]) {
            case 4:
                WorkingSet->bwset.data[b_idx] = WorkingSet->lb.data
                    [WorkingSet->indexLB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
                break;

            case 5:
                WorkingSet->bwset.data[b_idx] = WorkingSet->ub.data
                    [WorkingSet->indexUB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
                break;

            default:
                WorkingSet->bwset.data[b_idx] = WorkingSet->bineq.data
                    [WorkingSet->Wlocalidx.data[b_idx] - 1];
                if (WorkingSet->Wlocalidx.data[b_idx] >= mNonlinIneq) {
                    iw0 = WorkingSet->ldA * b_idx;
                    iEq0 = (WorkingSet->Wlocalidx.data[b_idx] - 1) * WorkingSet->ldA;
                    for (i = 1; i - 1 <= nVar; i++) {
                        WorkingSet->ATwset.data[(iw0 + i) - 1] = WorkingSet->Aineq.data
                            [(iEq0 + i) - 1];
                    }
                }
                break;
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_xnrm2(int32_T n, const real_T x_data[], int32_T
    ix0)
{
    real_T absxk;
    real_T scale;
    real_T t;
    real_T y;
    int32_T k;
    int32_T kend;
    y = 0.0;
    if (n >= 1) {
        if (n == 1) {
            y = std::abs(x_data[ix0 - 1]);
        }
        else {
            scale = 3.3121686421112381E-170;
            kend = (ix0 + n) - 1;
            for (k = ix0; k <= kend; k++) {
                absxk = std::abs(x_data[k - 1]);
                if (absxk > scale) {
                    t = scale / absxk;
                    y = y * t * t + 1.0;
                    scale = absxk;
                }
                else {
                    t = absxk / scale;
                    y += t * t;
                }
            }

            y = scale * std::sqrt(y);
        }
    }

    return y;
}

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
    real_T a;
    real_T y;
    a = std::abs(u0);
    y = std::abs(u1);
    if (a < y) {
        a /= y;
        y *= std::sqrt(a * a + 1.0);
    }
    else if (a > y) {
        y /= a;
        y = std::sqrt(y * y + 1.0) * a;
    }
    else if (!rtIsNaN(y)) {
        y = a * 1.4142135623730951;
    }

    return y;
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_xzlarfg(int32_T n, real_T* alpha1, real_T x_data[],
    int32_T ix0)
{
    real_T tau;
    real_T xnorm;
    int32_T b_k;
    int32_T c_k;
    int32_T knt;
    tau = 0.0;
    if (n > 0) {
        xnorm = model_xnrm2(n - 1, x_data, ix0);
        if (xnorm != 0.0) {
            xnorm = rt_hypotd_snf(*alpha1, xnorm);
            if (*alpha1 >= 0.0) {
                xnorm = -xnorm;
            }

            if (std::abs(xnorm) < 1.0020841800044864E-292) {
                knt = -1;
                c_k = (ix0 + n) - 2;
                do {
                    knt++;
                    for (b_k = ix0; b_k <= c_k; b_k++) {
                        x_data[b_k - 1] *= 9.9792015476736E+291;
                    }

                    xnorm *= 9.9792015476736E+291;
                    *alpha1 *= 9.9792015476736E+291;
                } while (!(std::abs(xnorm) >= 1.0020841800044864E-292));

                xnorm = rt_hypotd_snf(*alpha1, model_xnrm2(n - 1, x_data, ix0));
                if (*alpha1 >= 0.0) {
                    xnorm = -xnorm;
                }

                tau = (xnorm - *alpha1) / xnorm;
                *alpha1 = 1.0 / (*alpha1 - xnorm);
                for (b_k = ix0; b_k <= c_k; b_k++) {
                    x_data[b_k - 1] *= *alpha1;
                }

                for (c_k = 0; c_k <= knt; c_k++) {
                    xnorm *= 1.0020841800044864E-292;
                }

                *alpha1 = xnorm;
            }
            else {
                tau = (xnorm - *alpha1) / xnorm;
                *alpha1 = 1.0 / (*alpha1 - xnorm);
                knt = (ix0 + n) - 2;
                for (c_k = ix0; c_k <= knt; c_k++) {
                    x_data[c_k - 1] *= *alpha1;
                }

                *alpha1 = xnorm;
            }
        }
    }

    return tau;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4(int32_T m, int32_T n, const real_T A_data[],
    int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
    real_T c;
    int32_T b;
    int32_T b_iy;
    int32_T d;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    if (n != 0) {
        for (b_iy = 0; b_iy < n; b_iy++) {
            y_data[b_iy] = 0.0;
        }

        b_iy = 0;
        b = (n - 1) * lda + ia0;
        iac = ia0;
        while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
            ix = ix0;
            c = 0.0;
            d = (iac + m) - 1;
            for (ia = iac; ia <= d; ia++) {
                c += A_data[ia - 1] * x_data[ix - 1];
                ix++;
            }

            y_data[b_iy] += c;
            b_iy++;
            iac += lda;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgerc(int32_T m, int32_T n, real_T alpha1, int32_T
    ix0, const real_T y_data[], real_T A_data[], int32_T ia0, int32_T lda)
{
    real_T temp;
    int32_T b;
    int32_T ijA;
    int32_T ix;
    int32_T j;
    int32_T jA;
    int32_T jy;
    if (!(alpha1 == 0.0)) {
        jA = ia0 - 1;
        jy = 0;
        for (j = 0; j < n; j++) {
            if (y_data[jy] != 0.0) {
                temp = y_data[jy] * alpha1;
                ix = ix0;
                b = m + jA;
                for (ijA = jA; ijA < b; ijA++) {
                    A_data[ijA] += A_data[ix - 1] * temp;
                    ix++;
                }
            }

            jy++;
            jA += lda;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xzlarf(int32_T m, int32_T n, int32_T iv0, real_T tau,
    real_T C_data[], int32_T ic0, int32_T ldc, real_T work_data[])
{
    int32_T coltop;
    int32_T exitg1;
    int32_T ia;
    int32_T lastc;
    int32_T lastv;
    boolean_T exitg2;
    if (tau != 0.0) {
        lastv = m;
        lastc = iv0 + m;
        while ((lastv > 0) && (C_data[lastc - 2] == 0.0)) {
            lastv--;
            lastc--;
        }

        lastc = n;
        exitg2 = false;
        while ((!exitg2) && (lastc > 0)) {
            coltop = (lastc - 1) * ldc + ic0;
            ia = coltop;
            do {
                exitg1 = 0;
                if (ia <= (coltop + lastv) - 1) {
                    if (C_data[ia - 1] != 0.0) {
                        exitg1 = 1;
                    }
                    else {
                        ia++;
                    }
                }
                else {
                    lastc--;
                    exitg1 = 2;
                }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
                exitg2 = true;
            }
        }
    }
    else {
        lastv = 0;
        lastc = 0;
    }

    if (lastv > 0) {
        model_xgemv_i4(lastv, lastc, C_data, ic0, ldc, C_data, iv0, work_data);
        model_xgerc(lastv, lastc, -tau, iv0, work_data, C_data, ic0, ldc);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_qrf(real_T A_data[], const int32_T A_size[2],
    int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
    real_T b_atmp;
    int32_T i;
    int32_T ii;
    int32_T lda;
    int32_T mmi;
    lda = A_size[0];
    ii = A_size[1];
    if (0 <= ii - 1) {
        std::memset(&model_B.work_data[0], 0, ii * sizeof(real_T));
    }

    for (i = 0; i < nfxd; i++) {
        ii = i * lda + i;
        mmi = m - i;
        if (i + 1 < m) {
            b_atmp = A_data[ii];
            tau_data[i] = model_xzlarfg(mmi, &b_atmp, A_data, ii + 2);
            A_data[ii] = b_atmp;
        }
        else {
            tau_data[i] = 0.0;
        }

        if (i + 1 < n) {
            b_atmp = A_data[ii];
            A_data[ii] = 1.0;
            model_xzlarf(mmi, (n - i) - 1, ii + 1, tau_data[i], A_data, (ii + lda) + 1,
                lda, model_B.work_data);
            A_data[ii] = b_atmp;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xswap(int32_T n, real_T x_data[], int32_T ix0,
    int32_T iy0)
{
    real_T temp;
    int32_T ix;
    int32_T iy;
    int32_T k;
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (k = 0; k < n; k++) {
        temp = x_data[ix];
        x_data[ix] = x_data[iy];
        x_data[iy] = temp;
        ix++;
        iy++;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_qrpf(real_T A_data[], const int32_T A_size[2],
    int32_T m, int32_T n, int32_T nfxd, real_T tau_data[], int32_T jpvt_data[])
{
    real_T smax;
    real_T temp2;
    int32_T ii;
    int32_T ix;
    int32_T j;
    int32_T k;
    int32_T ma;
    int32_T minmn;
    int32_T mmi;
    int32_T nmi;
    int32_T pvt;
    ma = A_size[0];
    if (m < n) {
        minmn = m;
    }
    else {
        minmn = n;
    }

    mmi = A_size[1];
    if (0 <= mmi - 1) {
        std::memset(&model_B.work_data_n[0], 0, mmi * sizeof(real_T));
    }

    mmi = A_size[1];
    if (0 <= mmi - 1) {
        std::memset(&model_B.vn1_data[0], 0, mmi * sizeof(real_T));
    }

    mmi = A_size[1];
    if (0 <= mmi - 1) {
        std::memset(&model_B.vn2_data[0], 0, mmi * sizeof(real_T));
    }

    for (j = nfxd; j < n; j++) {
        model_B.vn1_data[j] = model_xnrm2(m - nfxd, A_data, (j * ma + nfxd) + 1);
        model_B.vn2_data[j] = model_B.vn1_data[j];
    }

    for (j = nfxd; j < minmn; j++) {
        ii = j * ma + j;
        nmi = n - j;
        mmi = m - j;
        if (nmi < 1) {
            pvt = -1;
        }
        else {
            pvt = 0;
            if (nmi > 1) {
                ix = j;
                smax = std::abs(model_B.vn1_data[j]);
                for (k = 2; k <= nmi; k++) {
                    ix++;
                    temp2 = std::abs(model_B.vn1_data[ix]);
                    if (temp2 > smax) {
                        pvt = k - 1;
                        smax = temp2;
                    }
                }
            }
        }

        pvt += j;
        if (pvt + 1 != j + 1) {
            model_xswap(m, A_data, pvt * ma + 1, j * ma + 1);
            ix = jpvt_data[pvt];
            jpvt_data[pvt] = jpvt_data[j];
            jpvt_data[j] = ix;
            model_B.vn1_data[pvt] = model_B.vn1_data[j];
            model_B.vn2_data[pvt] = model_B.vn2_data[j];
        }

        if (j + 1 < m) {
            smax = A_data[ii];
            tau_data[j] = model_xzlarfg(mmi, &smax, A_data, ii + 2);
            A_data[ii] = smax;
        }
        else {
            tau_data[j] = 0.0;
        }

        if (j + 1 < n) {
            smax = A_data[ii];
            A_data[ii] = 1.0;
            model_xzlarf(mmi, nmi - 1, ii + 1, tau_data[j], A_data, (ii + ma) + 1, ma,
                model_B.work_data_n);
            A_data[ii] = smax;
        }

        for (ii = j + 1; ii < n; ii++) {
            nmi = ii * ma + j;
            if (model_B.vn1_data[ii] != 0.0) {
                smax = std::abs(A_data[nmi]) / model_B.vn1_data[ii];
                smax = 1.0 - smax * smax;
                if (smax < 0.0) {
                    smax = 0.0;
                }

                temp2 = model_B.vn1_data[ii] / model_B.vn2_data[ii];
                temp2 = temp2 * temp2 * smax;
                if (temp2 <= 1.4901161193847656E-8) {
                    if (j + 1 < m) {
                        model_B.vn1_data[ii] = model_xnrm2(mmi - 1, A_data, nmi + 2);
                        model_B.vn2_data[ii] = model_B.vn1_data[ii];
                    }
                    else {
                        model_B.vn1_data[ii] = 0.0;
                        model_B.vn2_data[ii] = 0.0;
                    }
                }
                else {
                    model_B.vn1_data[ii] *= std::sqrt(smax);
                }
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgeqp3(real_T A_data[], const int32_T A_size[2],
    int32_T m, int32_T n, int32_T jpvt_data[], real_T tau_data[], int32_T
    * tau_size)
{
    int32_T ma;
    int32_T minmana;
    int32_T minmn;
    int32_T nfxd;
    ma = A_size[0];
    if (A_size[0] < A_size[1]) {
        minmana = A_size[0];
    }
    else {
        minmana = A_size[1];
    }

    if (m < n) {
        minmn = m;
    }
    else {
        minmn = n;
    }

    *tau_size = minmana;
    if (0 <= minmana - 1) {
        std::memset(&tau_data[0], 0, minmana * sizeof(real_T));
    }

    if (minmn < 1) {
        for (ma = 0; ma < n; ma++) {
            jpvt_data[ma] = ma + 1;
        }
    }
    else {
        nfxd = -1;
        for (minmana = 0; minmana < n; minmana++) {
            if (jpvt_data[minmana] != 0) {
                nfxd++;
                if (minmana + 1 != nfxd + 1) {
                    model_xswap(m, A_data, minmana * ma + 1, nfxd * ma + 1);
                    jpvt_data[minmana] = jpvt_data[nfxd];
                    jpvt_data[nfxd] = minmana + 1;
                }
                else {
                    jpvt_data[minmana] = minmana + 1;
                }
            }
            else {
                jpvt_data[minmana] = minmana + 1;
            }
        }

        if (nfxd + 1 < minmn) {
            nfxd++;
        }
        else {
            nfxd = minmn;
        }

        model_qrf(A_data, A_size, m, n, nfxd, tau_data);
        if (nfxd < minmn) {
            model_qrpf(A_data, A_size, m, n, nfxd, tau_data, jpvt_data);
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factorQRE(s_0DR0BN84H2zTEyVrtxAC8C_mode_T* obj,
    const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
    int32_T b_size[2];
    int32_T b;
    int32_T b_idx;
    int32_T iA0;
    int32_T iQR0;
    for (b_idx = 0; b_idx < ncols; b_idx++) {
        iA0 = ldA * b_idx;
        iQR0 = obj->ldq * b_idx;
        for (b = 1; b - 1 < mrows; b++) {
            obj->QR.data[(iQR0 + b) - 1] = A_data[(iA0 + b) - 1];
        }
    }

    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows < ncols) {
        obj->minRowCol = mrows;
    }
    else {
        obj->minRowCol = ncols;
    }

    b_size[0] = obj->QR.size[0];
    b_size[1] = obj->QR.size[1];
    iA0 = obj->QR.size[0] * obj->QR.size[1];
    if (0 <= iA0 - 1) {
        std::memcpy(&model_B.b_data[0], &obj->QR.data[0], iA0 * sizeof(real_T));
    }

    model_xgeqp3(model_B.b_data, b_size, mrows, ncols, obj->jpvt.data,
        obj->tau.data, &obj->tau.size);
    obj->QR.size[0] = b_size[0];
    obj->QR.size[1] = b_size[1];
    iA0 = b_size[0] * b_size[1];
    if (0 <= iA0 - 1) {
        std::memcpy(&obj->QR.data[0], &model_B.b_data[0], iA0 * sizeof(real_T));
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xorgqr(int32_T m, int32_T n, int32_T k, real_T
    A_data[], const int32_T A_size[2], int32_T lda, const real_T tau_data[])
{
    int32_T b_k;
    int32_T d;
    int32_T i;
    int32_T iaii;
    int32_T itau;
    if (n >= 1) {
        for (itau = k; itau < n; itau++) {
            i = itau * lda;
            for (iaii = 0; iaii < m; iaii++) {
                A_data[i + iaii] = 0.0;
            }

            A_data[i + itau] = 1.0;
        }

        itau = k - 1;
        iaii = static_cast<int16_T>(A_size[1]);
        if (0 <= iaii - 1) {
            std::memset(&model_B.work_data_p[0], 0, iaii * sizeof(real_T));
        }

        for (i = k; i >= 1; i--) {
            iaii = (i - 1) * lda + i;
            if (i < n) {
                A_data[iaii - 1] = 1.0;
                model_xzlarf((m - i) + 1, n - i, iaii, tau_data[itau], A_data, iaii +
                    lda, lda, model_B.work_data_p);
            }

            if (i < m) {
                d = (iaii + m) - i;
                for (b_k = iaii; b_k < d; b_k++) {
                    A_data[b_k] *= -tau_data[itau];
                }
            }

            A_data[iaii - 1] = 1.0 - tau_data[itau];
            for (d = 0; d <= i - 2; d++) {
                A_data[(iaii - d) - 2] = 0.0;
            }

            itau--;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_computeQ_(s_0DR0BN84H2zTEyVrtxAC8C_mode_T* obj,
    int32_T nrows)
{
    int32_T iQR0;
    int32_T idx;
    int32_T k;
    int32_T n;
    int32_T tmp;
    for (idx = 0; idx < obj->minRowCol; idx++) {
        iQR0 = obj->ldq * idx + idx;
        n = obj->mrows - idx;
        for (k = 1; k - 1 <= n - 2; k++) {
            tmp = iQR0 + k;
            obj->Q.data[tmp] = obj->QR.data[tmp];
        }
    }

    model_xorgqr(obj->mrows, nrows, obj->minRowCol, obj->Q.data, obj->Q.size,
        obj->ldq, obj->tau.data);
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4w(int32_T m, int32_T n, const real_T A_data[],
    int32_T lda, const real_T x_data[], real_T y_data[])
{
    real_T c;
    int32_T b;
    int32_T b_c;
    int32_T b_iy;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    if (m != 0) {
        for (b_iy = 0; b_iy < n; b_iy++) {
            y_data[b_iy] = 0.0;
        }

        b_iy = 0;
        b_c = (n - 1) * lda + 1;
        iac = 1;
        while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
            ix = 0;
            c = 0.0;
            b = (iac + m) - 1;
            for (ia = iac; ia <= b; ia++) {
                c += A_data[ia - 1] * x_data[ix];
                ix++;
            }

            y_data[b_iy] += c;
            b_iy++;
            iac += lda;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xtrsv(int32_T n, const real_T A_data[], int32_T lda,
    real_T x_data[])
{
    int32_T i;
    int32_T ix;
    int32_T j;
    int32_T jjA;
    if (n != 0) {
        for (j = n - 1; j + 1 > 0; j--) {
            jjA = j * lda + j;
            x_data[j] /= A_data[jjA];
            for (i = 1; i - 1 < j; i++) {
                ix = j - i;
                x_data[ix] -= x_data[j] * A_data[jjA - i];
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_sortLambdaQP(real_T lambda_data[], int32_T
    WorkingSet_nActiveConstr, const int32_T WorkingSet_sizes[5], const int32_T
    WorkingSet_isActiveIdx[6], const int32_T WorkingSet_Wid_data[], const int32_T
    WorkingSet_Wlocalidx_data[], real_T workspace_data[])
{
    int32_T idx;
    int32_T idxOffset;
    int32_T mAll;
    if (WorkingSet_nActiveConstr != 0) {
        mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 95;
        for (idx = 0; idx <= mAll; idx++) {
            workspace_data[idx] = lambda_data[idx];
        }

        for (idx = 0; idx <= mAll; idx++) {
            lambda_data[idx] = 0.0;
        }

        mAll = 0;
        idx = 0;
        while ((idx + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[idx] <=
            2)) {
            if (WorkingSet_Wid_data[idx] == 1) {
                idxOffset = 1;
            }
            else {
                idxOffset = WorkingSet_isActiveIdx[1];
            }

            lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
                workspace_data[mAll];
            mAll++;
            idx++;
        }

        while (idx + 1 <= WorkingSet_nActiveConstr) {
            switch (WorkingSet_Wid_data[idx]) {
            case 3:
                idxOffset = WorkingSet_isActiveIdx[2];
                break;

            case 4:
                idxOffset = WorkingSet_isActiveIdx[3];
                break;

            default:
                idxOffset = WorkingSet_isActiveIdx[4];
                break;
            }

            lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
                workspace_data[mAll];
            mAll++;
            idx++;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
int32_T modelModelClass::model_ixamax(int32_T n, const real_T x_data[])
{
    real_T smax;
    real_T y;
    int32_T idxmax;
    int32_T ix;
    int32_T k;
    if (n < 1) {
        idxmax = 0;
    }
    else {
        idxmax = 1;
        if (n > 1) {
            ix = 0;
            smax = std::abs(x_data[0]);
            for (k = 2; k <= n; k++) {
                ix++;
                y = std::abs(x_data[ix]);
                if (y > smax) {
                    idxmax = k;
                    smax = y;
                }
            }
        }
    }

    return idxmax;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_test_exit(s7RdrPWkr8UPAUyTdDJkLaG_model_T* Flags,
    s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace, sG8JZ69axY52WWR6RKyApQC_model_T
    * MeritFunction, const int32_T* fscales_lineq_constraint_size, const int32_T
    * fscales_cineq_constraint_size, s_yK2JoCuYdmZkt0peIhHCXB_mode_T* WorkingSet,
    s_4PJjBY6NtHkFemjansM2s_model_T* TrialState, s_0DR0BN84H2zTEyVrtxAC8C_mode_T
    * QRManager, const real_T lb[193], const real_T ub[193])
{
    real_T nlpComplErrorLSQ;
    real_T nlpComplErrorTmp;
    real_T optimRelativeFactor;
    real_T tmp;
    real_T tol;
    int32_T e_size[2];
    int32_T fullRank_R;
    int32_T iQR_diag;
    int32_T mFixed;
    int32_T mIneq;
    int32_T mLB;
    int32_T mLambda;
    int32_T mUB;
    int32_T nActiveConstr;
    int32_T nVar;
    int32_T rankR;
    boolean_T dxTooSmall;
    boolean_T exitg1;
    boolean_T guard1 = false;
    boolean_T isFeasible;
    nVar = WorkingSet->nVar;
    mFixed = WorkingSet->sizes[0];
    mIneq = WorkingSet->sizes[2];
    mLB = WorkingSet->sizes[3];
    mUB = WorkingSet->sizes[4];
    mLambda = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) + WorkingSet->sizes
        [3]) + WorkingSet->sizes[4]) + 95;
    model_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
        WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data,
        WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
        WorkingSet->sizes[0], WorkingSet->indexLB.data,
        WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdasqp.data);
    optimRelativeFactor = std::abs(TrialState->grad.data[model_ixamax
    (WorkingSet->nVar, TrialState->grad.data) - 1]);
    if ((1.0 > optimRelativeFactor) || rtIsNaN(optimRelativeFactor)) {
        optimRelativeFactor = 1.0;
    }

    if (rtIsInf(optimRelativeFactor)) {
        optimRelativeFactor = 1.0;
    }

    MeritFunction->nlpPrimalFeasError = model_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
        TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
        WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
        WorkingSet->indexUB.data, WorkingSet->sizes[4], ub);
    if (TrialState->sqpIterations == 0) {
        if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
        (MeritFunction->nlpPrimalFeasError)) {
            MeritFunction->feasRelativeFactor = 1.0;
        }
        else {
            MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
        }
    }

    isFeasible = (MeritFunction->nlpPrimalFeasError <= 1.0E-6 *
        MeritFunction->feasRelativeFactor);
    model_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
        &dxTooSmall, &tol);
    Flags->gradOK = dxTooSmall;
    MeritFunction->nlpDualFeasError = tol;
    if (!dxTooSmall) {
        Flags->done = true;
        if (isFeasible) {
            TrialState->sqpExitFlag = 2;
        }
        else {
            TrialState->sqpExitFlag = -2;
        }
    }
    else {
        MeritFunction->nlpComplError = model_computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
            TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
            WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
            WorkingSet->indexUB.data, WorkingSet->sizes[4], ub,
            TrialState->lambdasqp.data, WorkingSet->sizes[0] + 97);
        if ((tol > MeritFunction->nlpComplError) || rtIsNaN
        (MeritFunction->nlpComplError)) {
            MeritFunction->firstOrderOpt = tol;
        }
        else {
            MeritFunction->firstOrderOpt = MeritFunction->nlpComplError;
        }

        if (TrialState->sqpIterations > 1) {
            model_computeGradLag_n(memspace->workspace_double.data, WorkingSet->ldA,
                WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
                WorkingSet->Aineq.data, WorkingSet->Aeq.data,
                WorkingSet->indexFixed.data, WorkingSet->sizes[0],
                WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
                WorkingSet->sizes[4], TrialState->lambdasqp_old.data);
            model_computeDualFeasError_j(WorkingSet->nVar,
                memspace->workspace_double.data, &dxTooSmall, &nlpComplErrorLSQ);
            nlpComplErrorTmp = model_computeComplError(fscales_lineq_constraint_size,
                fscales_cineq_constraint_size, TrialState->xstarsqp, WorkingSet->sizes[2],
                TrialState->cIneq.data, WorkingSet->indexLB.data, WorkingSet->sizes[3],
                lb, WorkingSet->indexUB.data, WorkingSet->sizes[4], ub,
                TrialState->lambdasqp_old.data, WorkingSet->sizes[0] + 1);
            if ((nlpComplErrorLSQ > nlpComplErrorTmp) || rtIsNaN(nlpComplErrorTmp)) {
                tmp = nlpComplErrorLSQ;
            }
            else {
                tmp = nlpComplErrorTmp;
            }

            if ((!(tol > MeritFunction->nlpComplError)) && (!rtIsNaN
            (MeritFunction->nlpComplError))) {
                tol = MeritFunction->nlpComplError;
            }

            if (tmp < tol) {
                MeritFunction->nlpDualFeasError = nlpComplErrorLSQ;
                MeritFunction->nlpComplError = nlpComplErrorTmp;
                MeritFunction->firstOrderOpt = tmp;
                for (iQR_diag = 0; iQR_diag <= mLambda; iQR_diag++) {
                    TrialState->lambdasqp.data[iQR_diag] = TrialState->
                        lambdasqp_old.data[iQR_diag];
                }
            }
            else {
                for (iQR_diag = 0; iQR_diag <= mLambda; iQR_diag++) {
                    TrialState->lambdasqp_old.data[iQR_diag] = TrialState->
                        lambdasqp.data[iQR_diag];
                }
            }
        }
        else {
            for (iQR_diag = 0; iQR_diag <= mLambda; iQR_diag++) {
                TrialState->lambdasqp_old.data[iQR_diag] = TrialState->
                    lambdasqp.data[iQR_diag];
            }
        }

        if (isFeasible && (MeritFunction->nlpDualFeasError <= 1.0E-6 *
            optimRelativeFactor) && (MeritFunction->nlpComplError <=
                1.0E-6 * optimRelativeFactor)) {
            Flags->done = true;
            TrialState->sqpExitFlag = 1;
        }
        else {
            Flags->done = false;
            if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
                Flags->done = true;
                TrialState->sqpExitFlag = -3;
            }
            else {
                guard1 = false;
                if (TrialState->sqpIterations > 0) {
                    dxTooSmall = true;
                    iQR_diag = 0;
                    exitg1 = false;
                    while ((!exitg1) && (iQR_diag <= nVar - 1)) {
                        tol = std::abs(TrialState->xstarsqp[iQR_diag]);
                        if ((1.0 > tol) || rtIsNaN(tol)) {
                            tol = 1.0;
                        }

                        if (1.0E-6 * tol <= std::abs(TrialState->delta_x.data[iQR_diag])) {
                            dxTooSmall = false;
                            exitg1 = true;
                        }
                        else {
                            iQR_diag++;
                        }
                    }

                    if (dxTooSmall) {
                        if (!isFeasible) {
                            if (Flags->stepType != 2) {
                                Flags->stepType = 2;
                                Flags->failedLineSearch = false;
                                Flags->stepAccepted = false;
                                guard1 = true;
                            }
                            else {
                                Flags->done = true;
                                TrialState->sqpExitFlag = -2;
                            }
                        }
                        else {
                            nActiveConstr = WorkingSet->nActiveConstr;
                            if (WorkingSet->nActiveConstr > 0) {
                                mode_updateWorkingSetForNewQP_d(TrialState->xstarsqp, WorkingSet,
                                    WorkingSet->sizes[2], TrialState->mNonlinIneq,
                                    TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                                    lb, WorkingSet->sizes[4], ub, WorkingSet->sizes[0]);
                                for (iQR_diag = 0; iQR_diag < nActiveConstr; iQR_diag++) {
                                    TrialState->lambda.data[iQR_diag] = 0.0;
                                }

                                model_factorQRE(QRManager, WorkingSet->ATwset.data, nVar,
                                    nActiveConstr, WorkingSet->ldA);
                                model_computeQ_(QRManager, QRManager->mrows);
                                if (nVar > nActiveConstr) {
                                    iQR_diag = nVar;
                                }
                                else {
                                    iQR_diag = nActiveConstr;
                                }

                                tol = static_cast<real_T>(iQR_diag) * 2.2204460492503131E-16;
                                if (1.4901161193847656E-8 < tol) {
                                    tol = 1.4901161193847656E-8;
                                }

                                tol *= std::abs(QRManager->QR.data[0]);
                                if (nVar < nActiveConstr) {
                                    fullRank_R = nVar;
                                }
                                else {
                                    fullRank_R = nActiveConstr;
                                }

                                rankR = 0;
                                iQR_diag = 0;
                                while ((rankR < fullRank_R) && (std::abs(QRManager->
                                    QR.data[iQR_diag]) > tol)) {
                                    rankR++;
                                    iQR_diag = (iQR_diag + QRManager->ldq) + 1;
                                }

                                e_size[0] = memspace->workspace_double.size[0];
                                e_size[1] = memspace->workspace_double.size[1];
                                iQR_diag = memspace->workspace_double.size[0] *
                                    memspace->workspace_double.size[1];
                                if (0 <= iQR_diag - 1) {
                                    std::memcpy(&model_B.e_data[0],
                                        &memspace->workspace_double.data[0], iQR_diag *
                                        sizeof(real_T));
                                }

                                model_xgemv_i4w(nVar, nVar, QRManager->Q.data, QRManager->ldq,
                                    TrialState->grad.data, model_B.e_data);
                                model_xtrsv(rankR, QRManager->QR.data, QRManager->ldq,
                                    model_B.e_data);
                                if (nActiveConstr < fullRank_R) {
                                    fullRank_R = nActiveConstr;
                                }

                                for (iQR_diag = 0; iQR_diag < fullRank_R; iQR_diag++) {
                                    TrialState->lambda.data[QRManager->jpvt.data[iQR_diag] - 1] =
                                        model_B.e_data[iQR_diag];
                                }

                                for (iQR_diag = mFixed; iQR_diag < mFixed + 96; iQR_diag++) {
                                    TrialState->lambda.data[iQR_diag] = -TrialState->
                                        lambda.data[iQR_diag];
                                }

                                model_sortLambdaQP(TrialState->lambda.data,
                                    WorkingSet->nActiveConstr, WorkingSet->sizes,
                                    WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                                    WorkingSet->Wlocalidx.data, model_B.e_data);
                                memspace->workspace_double.size[0] = e_size[0];
                                memspace->workspace_double.size[1] = e_size[1];
                                iQR_diag = e_size[0] * e_size[1];
                                if (0 <= iQR_diag - 1) {
                                    std::memcpy(&memspace->workspace_double.data[0],
                                        &model_B.e_data[0], iQR_diag * sizeof(real_T));
                                }

                                model_computeGradLag_n(memspace->workspace_double.data,
                                    WorkingSet->ldA, nVar, TrialState->grad.data, mIneq,
                                    WorkingSet->Aineq.data, WorkingSet->Aeq.data,
                                    WorkingSet->indexFixed.data, mFixed, WorkingSet->indexLB.data,
                                    mLB, WorkingSet->indexUB.data, mUB, TrialState->lambda.data);
                                model_computeDualFeasError_j(nVar,
                                    memspace->workspace_double.data, &isFeasible, &tol);
                                nlpComplErrorLSQ = model_computeComplError
                                (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
                                    TrialState->xstarsqp, mIneq, TrialState->cIneq.data,
                                    WorkingSet->indexLB.data, mLB, lb, WorkingSet->indexUB.data,
                                    mUB, ub, TrialState->lambda.data, mFixed + 1);
                                if ((tol <= 1.0E-6 * optimRelativeFactor) && (nlpComplErrorLSQ <=
                                    1.0E-6 * optimRelativeFactor)) {
                                    MeritFunction->nlpDualFeasError = tol;
                                    MeritFunction->nlpComplError = nlpComplErrorLSQ;
                                    if (tol > nlpComplErrorLSQ) {
                                        MeritFunction->firstOrderOpt = tol;
                                    }
                                    else {
                                        MeritFunction->firstOrderOpt = nlpComplErrorLSQ;
                                    }

                                    for (nVar = 0; nVar <= mLambda; nVar++) {
                                        TrialState->lambdasqp.data[nVar] = TrialState->
                                            lambda.data[nVar];
                                    }

                                    Flags->done = true;
                                    TrialState->sqpExitFlag = 1;
                                }
                                else {
                                    Flags->done = true;
                                    TrialState->sqpExitFlag = 2;
                                }
                            }
                            else {
                                Flags->done = true;
                                TrialState->sqpExitFlag = 2;
                            }
                        }
                    }
                    else {
                        guard1 = true;
                    }
                }
                else {
                    guard1 = true;
                }

                if (guard1) {
                    if (TrialState->sqpIterations >= 400) {
                        Flags->done = true;
                        TrialState->sqpExitFlag = 0;
                    }
                    else if (TrialState->FunctionEvaluations >= 19300) {
                        Flags->done = true;
                        TrialState->sqpExitFlag = 0;
                    }
                }
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4wks12vozfw(int32_T m, int32_T n, const
    real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0,
    real_T y_data[])
{
    int32_T b;
    int32_T c;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    int32_T iy;
    ix = ix0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
        iy = 0;
        c = (iac + m) - 1;
        for (ia = iac; ia <= c; ia++) {
            y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
            iy++;
        }

        ix++;
        iac += lda;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
boolean_T modelModelClass::model_BFGSUpdate(int32_T nvar, real_T Bk[37249],
    const real_T sk_data[], real_T yk_data[], real_T workspace_data[])
{
    real_T curvatureS;
    real_T dotSY;
    real_T temp;
    int32_T b_ix;
    int32_T d;
    int32_T iac;
    int32_T ijA;
    int32_T ix;
    int32_T jy;
    boolean_T success;
    dotSY = 0.0;
    if (nvar >= 1) {
        for (ix = 0; ix < nvar; ix++) {
            dotSY += sk_data[ix] * yk_data[ix];
        }
    }

    for (ix = 0; ix < nvar; ix++) {
        workspace_data[ix] = 0.0;
    }

    ix = 0;
    jy = (nvar - 1) * 193;
    for (iac = 1; iac <= jy + 1; iac += 193) {
        b_ix = 0;
        d = (iac + nvar) - 1;
        for (ijA = iac; ijA <= d; ijA++) {
            workspace_data[b_ix] += Bk[ijA - 1] * sk_data[ix];
            b_ix++;
        }

        ix++;
    }

    curvatureS = 0.0;
    if (nvar >= 1) {
        for (ix = 0; ix < nvar; ix++) {
            curvatureS += workspace_data[ix] * sk_data[ix];
        }
    }

    if (dotSY < 0.2 * curvatureS) {
        dotSY = 0.8 * curvatureS / (curvatureS - dotSY);
        for (ix = 0; ix < nvar; ix++) {
            yk_data[ix] *= dotSY;
        }

        dotSY = 1.0 - dotSY;
        if (!(dotSY == 0.0)) {
            for (ix = 0; ix < nvar; ix++) {
                yk_data[ix] += workspace_data[ix] * dotSY;
            }
        }

        dotSY = 0.0;
        if (nvar >= 1) {
            for (ix = 0; ix < nvar; ix++) {
                dotSY += sk_data[ix] * yk_data[ix];
            }
        }
    }

    success = ((curvatureS > 2.2204460492503131E-16) && (dotSY >
        2.2204460492503131E-16));
    if (success) {
        curvatureS = -1.0 / curvatureS;
        if (!(curvatureS == 0.0)) {
            ix = 0;
            jy = 0;
            for (iac = 0; iac < nvar; iac++) {
                if (workspace_data[jy] != 0.0) {
                    temp = workspace_data[jy] * curvatureS;
                    b_ix = 0;
                    d = nvar + ix;
                    for (ijA = ix; ijA < d; ijA++) {
                        Bk[ijA] += workspace_data[b_ix] * temp;
                        b_ix++;
                    }
                }

                jy++;
                ix += 193;
            }
        }

        curvatureS = 1.0 / dotSY;
        if (!(curvatureS == 0.0)) {
            ix = 0;
            jy = 0;
            for (iac = 0; iac < nvar; iac++) {
                if (yk_data[jy] != 0.0) {
                    dotSY = yk_data[jy] * curvatureS;
                    b_ix = 0;
                    d = nvar + ix;
                    for (ijA = ix; ijA < d; ijA++) {
                        Bk[ijA] += yk_data[b_ix] * dotSY;
                        b_ix++;
                    }
                }

                jy++;
                ix += 193;
            }
        }
    }

    return success;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factorQRE_j(s_0DR0BN84H2zTEyVrtxAC8C_mode_T* obj,
    int32_T mrows, int32_T ncols)
{
    int32_T b_size[2];
    int32_T loop_ub;
    if (mrows * ncols == 0) {
        obj->mrows = mrows;
        obj->ncols = ncols;
        obj->minRowCol = 0;
    }
    else {
        obj->usedPivoting = true;
        obj->mrows = mrows;
        obj->ncols = ncols;
        if (mrows < ncols) {
            obj->minRowCol = mrows;
        }
        else {
            obj->minRowCol = ncols;
        }

        b_size[0] = obj->QR.size[0];
        b_size[1] = obj->QR.size[1];
        loop_ub = obj->QR.size[0] * obj->QR.size[1];
        if (0 <= loop_ub - 1) {
            std::memcpy(&model_B.b_data_m[0], &obj->QR.data[0], loop_ub * sizeof
            (real_T));
        }

        model_xgeqp3(model_B.b_data_m, b_size, mrows, ncols, obj->jpvt.data,
            obj->tau.data, &obj->tau.size);
        obj->QR.size[0] = b_size[0];
        obj->QR.size[1] = b_size[1];
        loop_ub = b_size[0] * b_size[1];
        if (0 <= loop_ub - 1) {
            std::memcpy(&obj->QR.data[0], &model_B.b_data_m[0], loop_ub * sizeof
            (real_T));
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_countsort(int32_T x_data[], int32_T xLen, int32_T
    workspace_data[], int32_T xMin, int32_T xMax)
{
    int32_T b_idxW;
    int32_T b_tmp;
    int32_T idxEnd;
    int32_T idxStart;
    if ((xLen > 1) && (xMax > xMin)) {
        b_tmp = xMax - xMin;
        for (idxStart = 0; idxStart <= b_tmp; idxStart++) {
            workspace_data[idxStart] = 0;
        }

        for (idxStart = 0; idxStart < xLen; idxStart++) {
            idxEnd = x_data[idxStart] - xMin;
            workspace_data[idxEnd]++;
        }

        for (idxStart = 1; idxStart < b_tmp + 1; idxStart++) {
            workspace_data[idxStart] += workspace_data[idxStart - 1];
        }

        idxStart = 1;
        idxEnd = workspace_data[0];
        for (b_idxW = 0; b_idxW < b_tmp; b_idxW++) {
            while (idxStart <= idxEnd) {
                x_data[idxStart - 1] = b_idxW + xMin;
                idxStart++;
            }

            idxStart = workspace_data[b_idxW] + 1;
            idxEnd = workspace_data[b_idxW + 1];
        }

        while (idxStart <= idxEnd) {
            x_data[idxStart - 1] = xMax;
            idxStart++;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_removeConstr(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj,
    int32_T idx_global)
{
    int32_T TYPE_tmp;
    int32_T b_idx;
    int32_T idx_global_start_tmp_tmp;
    TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
    obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
        Wlocalidx.data[idx_global - 1]) - 2] = false;
    idx_global_start_tmp_tmp = obj->nActiveConstr - 1;
    obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
    obj->Wlocalidx.data[idx_global - 1] = obj->
        Wlocalidx.data[idx_global_start_tmp_tmp];
    for (b_idx = 0; b_idx < obj->nVar; b_idx++) {
        obj->ATwset.data[b_idx + obj->ldA * (idx_global - 1)] = obj->ATwset.data
            [obj->ldA * idx_global_start_tmp_tmp + b_idx];
    }

    obj->bwset.data[idx_global - 1] = obj->bwset.data[idx_global_start_tmp_tmp];
    obj->nActiveConstr--;
    obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S4>/NLMPC'
int32_T modelModelClass::model_RemoveDependentEq_
(s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace, s_yK2JoCuYdmZkt0peIhHCXB_mode_T
    * workingset, s_0DR0BN84H2zTEyVrtxAC8C_mode_T* qrmanager)
{
    real_T qtb;
    real_T tol;
    int32_T b_k;
    int32_T ix;
    int32_T iy;
    int32_T mTotalWorkingEq;
    int32_T nDepInd;
    int32_T totalEq;
    int32_T totalRank;
    boolean_T exitg1;
    totalEq = workingset->nVar - 1;
    mTotalWorkingEq = workingset->nWConstr[0] + workingset->nWConstr[1];
    nDepInd = 0;
    if (mTotalWorkingEq > 0) {
        for (totalRank = 0; totalRank < mTotalWorkingEq; totalRank++) {
            for (ix = 0; ix <= totalEq; ix++) {
                qrmanager->QR.data[totalRank + qrmanager->ldq * ix] =
                    workingset->ATwset.data[workingset->ldA * totalRank + ix];
            }
        }

        nDepInd = mTotalWorkingEq - workingset->nVar;
        if (0 > nDepInd) {
            nDepInd = 0;
        }

        for (totalRank = 0; totalRank <= totalEq; totalRank++) {
            qrmanager->jpvt.data[totalRank] = 0;
        }

        model_factorQRE_j(qrmanager, mTotalWorkingEq, workingset->nVar);
        tol = 100.0 * static_cast<real_T>(workingset->nVar) * 2.2204460492503131E-16;
        if (workingset->nVar < mTotalWorkingEq) {
            totalRank = workingset->nVar;
        }
        else {
            totalRank = mTotalWorkingEq;
        }

        totalRank += (totalRank - 1) * qrmanager->ldq;
        while ((totalRank > 0) && (std::abs(qrmanager->QR.data[totalRank - 1]) < tol))
        {
            totalRank = (totalRank - qrmanager->ldq) - 1;
            nDepInd++;
        }

        if (nDepInd > 0) {
            model_computeQ_(qrmanager, qrmanager->mrows);
            totalRank = 0;
            exitg1 = false;
            while ((!exitg1) && (totalRank <= nDepInd - 1)) {
                qtb = 0.0;
                ix = ((mTotalWorkingEq - totalRank) - 1) * qrmanager->ldq;
                iy = 0;
                for (b_k = 0; b_k < mTotalWorkingEq; b_k++) {
                    qtb += qrmanager->Q.data[ix] * workingset->bwset.data[iy];
                    ix++;
                    iy++;
                }

                if (std::abs(qtb) >= tol) {
                    nDepInd = -1;
                    exitg1 = true;
                }
                else {
                    totalRank++;
                }
            }
        }

        if (nDepInd > 0) {
            for (totalRank = 0; totalRank < mTotalWorkingEq; totalRank++) {
                ix = qrmanager->ldq * totalRank;
                iy = workingset->ldA * totalRank;
                for (b_k = 1; b_k - 1 <= totalEq; b_k++) {
                    qrmanager->QR.data[(ix + b_k) - 1] = workingset->ATwset.data[(iy + b_k)
                        - 1];
                }
            }

            for (totalEq = 0; totalEq < workingset->nWConstr[0]; totalEq++) {
                qrmanager->jpvt.data[totalEq] = 1;
            }

            for (totalEq = workingset->nWConstr[0]; totalEq < mTotalWorkingEq; totalEq
                ++) {
                qrmanager->jpvt.data[totalEq] = 0;
            }

            model_factorQRE_j(qrmanager, workingset->nVar, mTotalWorkingEq);
            for (totalEq = 0; totalEq < nDepInd; totalEq++) {
                memspace->workspace_int.data[totalEq] = qrmanager->jpvt.data
                    [(mTotalWorkingEq - nDepInd) + totalEq];
            }

            model_countsort(memspace->workspace_int.data, nDepInd,
                memspace->workspace_sort.data, 1, mTotalWorkingEq);
            for (mTotalWorkingEq = nDepInd - 1; mTotalWorkingEq + 1 > 0;
                mTotalWorkingEq--) {
                totalEq = (workingset->nWConstr[0] + workingset->nWConstr[1]) - 1;
                if ((totalEq + 1 != 0) && (memspace->workspace_int.data[mTotalWorkingEq]
                    <= totalEq + 1)) {
                    if ((totalEq + 1 == workingset->nActiveConstr) || (totalEq + 1 ==
                        memspace->workspace_int.data[mTotalWorkingEq])) {
                        workingset->mEqRemoved++;
                        workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
                            workingset->Wlocalidx.data[memspace->
                            workspace_int.data[mTotalWorkingEq] - 1];
                        model_removeConstr(workingset, memspace->
                            workspace_int.data[mTotalWorkingEq]);
                    }
                    else {
                        workingset->mEqRemoved++;
                        totalRank = workingset->Wid.data[memspace->
                            workspace_int.data[mTotalWorkingEq] - 1] - 1;
                        workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
                            workingset->Wlocalidx.data[memspace->
                            workspace_int.data[mTotalWorkingEq] - 1];
                        workingset->isActiveConstr.data[(workingset->isActiveIdx
                            [workingset->Wid.data[memspace->workspace_int.data[mTotalWorkingEq]
                            - 1] - 1] + workingset->Wlocalidx.data
                            [memspace->workspace_int.data[mTotalWorkingEq] - 1]) - 2] = false;
                        workingset->Wid.data[memspace->workspace_int.data[mTotalWorkingEq] -
                            1] = workingset->Wid.data[totalEq];
                        workingset->Wlocalidx.data[memspace->
                            workspace_int.data[mTotalWorkingEq] - 1] =
                            workingset->Wlocalidx.data[totalEq];
                        for (ix = 0; ix < workingset->nVar; ix++) {
                            workingset->ATwset.data[ix + workingset->ldA *
                                (memspace->workspace_int.data[mTotalWorkingEq] - 1)] =
                                workingset->ATwset.data[workingset->ldA * totalEq + ix];
                        }

                        workingset->bwset.data[memspace->workspace_int.data[mTotalWorkingEq]
                            - 1] = workingset->bwset.data[totalEq];
                        ix = workingset->nActiveConstr - 1;
                        workingset->Wid.data[totalEq] = workingset->Wid.data
                            [workingset->nActiveConstr - 1];
                        workingset->Wlocalidx.data[totalEq] = workingset->Wlocalidx.data[ix];
                        for (iy = 0; iy < workingset->nVar; iy++) {
                            workingset->ATwset.data[iy + workingset->ldA * totalEq] =
                                workingset->ATwset.data[workingset->ldA * ix + iy];
                        }

                        workingset->bwset.data[totalEq] = workingset->bwset.data[ix];
                        workingset->nActiveConstr--;
                        workingset->nWConstr[totalRank]--;
                    }
                }
            }
        }
    }

    return nDepInd;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_removeAllIneqConstr(s_yK2JoCuYdmZkt0peIhHCXB_mode_T*
    obj)
{
    int32_T idx_global;
    for (idx_global = obj->nWConstr[0] + obj->nWConstr[1]; idx_global <
        obj->nActiveConstr; idx_global++) {
        obj->isActiveConstr.data[(obj->isActiveIdx[obj->Wid.data[idx_global] - 1] +
            obj->Wlocalidx.data[idx_global]) - 2] = false;
    }

    obj->nWConstr[2] = 0;
    obj->nWConstr[3] = 0;
    obj->nWConstr[4] = 0;
    obj->nActiveConstr = obj->nWConstr[0] + obj->nWConstr[1];
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_RemoveDependentIneq_(s_yK2JoCuYdmZkt0peIhHCXB_mode_T
    * workingset, s_0DR0BN84H2zTEyVrtxAC8C_mode_T* qrmanager,
    s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace)
{
    real_T tol;
    int32_T idxPosATwset;
    int32_T idxPosQR;
    int32_T k;
    int32_T nDepIneq;
    int32_T nFixedConstr;
    int32_T nVar;
    nFixedConstr = workingset->nWConstr[0] + workingset->nWConstr[1];
    nVar = workingset->nVar;
    if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
        nWConstr[4] > 0) {
        tol = 100.0 * static_cast<real_T>(workingset->nVar) * 2.2204460492503131E-16;
        for (nDepIneq = 0; nDepIneq < nFixedConstr; nDepIneq++) {
            qrmanager->jpvt.data[nDepIneq] = 1;
        }

        for (nDepIneq = nFixedConstr + 1; nDepIneq <= workingset->nActiveConstr;
            nDepIneq++) {
            qrmanager->jpvt.data[nDepIneq - 1] = 0;
        }

        for (nDepIneq = 0; nDepIneq < workingset->nActiveConstr; nDepIneq++) {
            idxPosQR = qrmanager->ldq * nDepIneq;
            idxPosATwset = workingset->ldA * nDepIneq;
            for (k = 1; k - 1 < nVar; k++) {
                qrmanager->QR.data[(idxPosQR + k) - 1] = workingset->ATwset.data
                    [(idxPosATwset + k) - 1];
            }
        }

        model_factorQRE_j(qrmanager, workingset->nVar, workingset->nActiveConstr);
        nDepIneq = 0;
        for (idxPosQR = workingset->nActiveConstr - 1; idxPosQR + 1 > nVar; idxPosQR
            --) {
            nDepIneq++;
            memspace->workspace_int.data[nDepIneq - 1] = qrmanager->jpvt.data[idxPosQR];
        }

        if (idxPosQR + 1 <= workingset->nVar) {
            nVar = qrmanager->ldq * idxPosQR + idxPosQR;
            while ((idxPosQR + 1 > nFixedConstr) && (std::abs(qrmanager->QR.data[nVar])
                < tol)) {
                nDepIneq++;
                memspace->workspace_int.data[nDepIneq - 1] = qrmanager->
                    jpvt.data[idxPosQR];
                idxPosQR--;
                nVar = (nVar - qrmanager->ldq) - 1;
            }
        }

        model_countsort(memspace->workspace_int.data, nDepIneq,
            memspace->workspace_sort.data, nFixedConstr + 1,
            workingset->nActiveConstr);
        while (nDepIneq > 0) {
            model_removeConstr(workingset, memspace->workspace_int.data[nDepIneq - 1]);
            nDepIneq--;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgeqrf(real_T A_data[], const int32_T A_size[2],
    int32_T m, int32_T n, real_T tau_data[], int32_T* tau_size)
{
    int32_T minmana;
    int32_T minmn;
    if (A_size[0] < A_size[1]) {
        minmana = A_size[0];
    }
    else {
        minmana = A_size[1];
    }

    if (m < n) {
        minmn = m;
    }
    else {
        minmn = n;
    }

    *tau_size = minmana;
    if (0 <= minmana - 1) {
        std::memset(&tau_data[0], 0, minmana * sizeof(real_T));
    }

    if (minmn >= 1) {
        model_qrf(A_data, A_size, m, n, minmn, tau_data);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factorQR_j(s_0DR0BN84H2zTEyVrtxAC8C_mode_T* obj,
    const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
    int32_T b_idx;
    int32_T iA0;
    int32_T iQR0;
    int32_T obj_0;
    boolean_T guard1 = false;
    b_idx = mrows * ncols;
    guard1 = false;
    if (b_idx > 0) {
        for (b_idx = 0; b_idx < ncols; b_idx++) {
            iA0 = ldA * b_idx;
            iQR0 = obj->ldq * b_idx;
            for (obj_0 = 1; obj_0 - 1 < mrows; obj_0++) {
                obj->QR.data[(iQR0 + obj_0) - 1] = A_data[(iA0 + obj_0) - 1];
            }
        }

        guard1 = true;
    }
    else if (b_idx == 0) {
        obj->mrows = mrows;
        obj->ncols = ncols;
        obj->minRowCol = 0;
    }
    else {
        guard1 = true;
    }

    if (guard1) {
        obj->usedPivoting = false;
        obj->mrows = mrows;
        obj->ncols = ncols;
        for (b_idx = 0; b_idx < ncols; b_idx++) {
            obj->jpvt.data[b_idx] = b_idx + 1;
        }

        if (mrows < ncols) {
            obj->minRowCol = mrows;
        }
        else {
            obj->minRowCol = ncols;
        }

        model_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
            &obj->tau.size);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factorQR(s_0DR0BN84H2zTEyVrtxAC8C_mode_T* obj,
    int32_T mrows, int32_T ncols)
{
    int32_T idx;
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    for (idx = 0; idx < ncols; idx++) {
        obj->jpvt.data[idx] = idx + 1;
    }

    if (mrows < ncols) {
        obj->minRowCol = mrows;
    }
    else {
        obj->minRowCol = ncols;
    }

    model_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
        &obj->tau.size);
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4wks(int32_T m, int32_T n, const real_T
    A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
    real_T c;
    int32_T b;
    int32_T b_c;
    int32_T b_iy;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    for (b_iy = 0; b_iy < n; b_iy++) {
        y_data[b_iy] = -y_data[b_iy];
    }

    b_iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
        ix = 0;
        c = 0.0;
        b = (iac + m) - 1;
        for (ia = iac; ia <= b; ia++) {
            c += x_data[ix] * A_data[ia - 1];
            ix++;
        }

        y_data[b_iy] += c;
        b_iy++;
        iac += lda;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4wk(int32_T n, const real_T A_data[], int32_T
    lda, const real_T x_data[], real_T y_data[])
{
    real_T c;
    int32_T b_c;
    int32_T b_iy;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    for (b_iy = 0; b_iy < n; b_iy++) {
        y_data[b_iy] = -y_data[b_iy];
    }

    b_iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
        ix = 0;
        c = 0.0;
        for (ia = iac; ia <= iac + 192; ia++) {
            c += x_data[ix] * A_data[ia - 1];
            ix++;
        }

        y_data[b_iy] += c;
        b_iy++;
        iac += lda;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_maxConstraintViolation
(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj, const real_T x_data[])
{
    real_T u1;
    real_T v;
    int32_T b_k;
    int32_T mFixed;
    int32_T mIneq;
    int32_T mLB;
    int32_T mUB;
    mLB = obj->sizes[3];
    mUB = obj->sizes[4];
    mFixed = obj->sizes[0];
    if (obj->probType == 2) {
        v = 0.0;
        mIneq = obj->sizes[2] - 1;
        for (b_k = 0; b_k <= mIneq; b_k++) {
            obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
        }

        model_xgemv_i4wk(obj->sizes[2], obj->Aineq.data, obj->ldA, x_data,
            obj->maxConstrWorkspace.data);
        for (b_k = 0; b_k <= mIneq; b_k++) {
            obj->maxConstrWorkspace.data[b_k] -= x_data[b_k + 193];
            u1 = obj->maxConstrWorkspace.data[b_k];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }

        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 96U * sizeof
        (real_T));
        model_xgemv_i4wk(96, obj->Aeq.data, obj->ldA, x_data,
            obj->maxConstrWorkspace.data);
        for (b_k = 0; b_k < 96; b_k++) {
            obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
                x_data[(mIneq + b_k) + 194]) + x_data[(obj->sizes[2] + b_k) + 289];
            u1 = std::abs(obj->maxConstrWorkspace.data[b_k]);
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }
    else {
        v = 0.0;
        mIneq = obj->sizes[2] - 1;
        for (b_k = 0; b_k <= mIneq; b_k++) {
            obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
        }

        model_xgemv_i4wks(obj->nVar, obj->sizes[2], obj->Aineq.data, obj->ldA,
            x_data, obj->maxConstrWorkspace.data);
        for (b_k = 0; b_k <= mIneq; b_k++) {
            u1 = obj->maxConstrWorkspace.data[b_k];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }

        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 96U * sizeof
        (real_T));
        model_xgemv_i4wks(obj->nVar, 96, obj->Aeq.data, obj->ldA, x_data,
            obj->maxConstrWorkspace.data);
        for (mIneq = 0; mIneq < 96; mIneq++) {
            u1 = std::abs(obj->maxConstrWorkspace.data[mIneq]);
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    if (mLB > 0) {
        for (mIneq = 0; mIneq < mLB; mIneq++) {
            u1 = -x_data[obj->indexLB.data[mIneq] - 1] - obj->lb.data
                [obj->indexLB.data[mIneq] - 1];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    if (mUB > 0) {
        for (mLB = 0; mLB < mUB; mLB++) {
            u1 = x_data[obj->indexUB.data[mLB] - 1] - obj->ub.data[obj->
                indexUB.data[mLB] - 1];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    if (mFixed > 0) {
        for (mUB = 0; mUB < mFixed; mUB++) {
            u1 = std::abs(x_data[obj->indexFixed.data[mUB] - 1] - obj->ub.data
                [obj->indexFixed.data[mUB] - 1]);
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    return v;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4wks1(int32_T m, int32_T n, const real_T
    A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
    real_T c;
    int32_T b;
    int32_T b_c;
    int32_T b_iy;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    for (b_iy = 0; b_iy < n; b_iy++) {
        y_data[b_iy] = -y_data[b_iy];
    }

    b_iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
        ix = ix0;
        c = 0.0;
        b = (iac + m) - 1;
        for (ia = iac; ia <= b; ia++) {
            c += x_data[ix - 1] * A_data[ia - 1];
            ix++;
        }

        y_data[b_iy] += c;
        b_iy++;
        iac += lda;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_maxConstraintViolation_h
(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj, const real_T x_data[], int32_T ix0)
{
    real_T u1;
    real_T v;
    int32_T b_k;
    int32_T mFixed;
    int32_T mIneq;
    int32_T mLB;
    int32_T mUB;
    mLB = obj->sizes[3];
    mUB = obj->sizes[4];
    mFixed = obj->sizes[0];
    if (obj->probType == 2) {
        v = 0.0;
        mIneq = obj->sizes[2] - 1;
        for (b_k = 0; b_k <= mIneq; b_k++) {
            obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
        }

        model_xgemv_i4wks1(193, obj->sizes[2], obj->Aineq.data, obj->ldA, x_data,
            ix0, obj->maxConstrWorkspace.data);
        for (b_k = 0; b_k <= mIneq; b_k++) {
            obj->maxConstrWorkspace.data[b_k] -= x_data[(ix0 + b_k) + 192];
            u1 = obj->maxConstrWorkspace.data[b_k];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }

        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 96U * sizeof
        (real_T));
        model_xgemv_i4wks1(193, 96, obj->Aeq.data, obj->ldA, x_data, ix0,
            obj->maxConstrWorkspace.data);
        for (b_k = 0; b_k < 96; b_k++) {
            obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
                x_data[((ix0 + mIneq) + b_k) + 193]) + x_data[((ix0 + obj->sizes[2]) +
                    b_k) + 288];
            u1 = std::abs(obj->maxConstrWorkspace.data[b_k]);
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }
    else {
        v = 0.0;
        mIneq = obj->sizes[2] - 1;
        for (b_k = 0; b_k <= mIneq; b_k++) {
            obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
        }

        model_xgemv_i4wks1(obj->nVar, obj->sizes[2], obj->Aineq.data, obj->ldA,
            x_data, ix0, obj->maxConstrWorkspace.data);
        for (b_k = 0; b_k <= mIneq; b_k++) {
            u1 = obj->maxConstrWorkspace.data[b_k];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }

        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 96U * sizeof
        (real_T));
        model_xgemv_i4wks1(obj->nVar, 96, obj->Aeq.data, obj->ldA, x_data, ix0,
            obj->maxConstrWorkspace.data);
        for (mIneq = 0; mIneq < 96; mIneq++) {
            u1 = std::abs(obj->maxConstrWorkspace.data[mIneq]);
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    if (mLB > 0) {
        for (mIneq = 0; mIneq < mLB; mIneq++) {
            u1 = -x_data[(ix0 + obj->indexLB.data[mIneq]) - 2] - obj->lb.data
                [obj->indexLB.data[mIneq] - 1];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    if (mUB > 0) {
        for (mLB = 0; mLB < mUB; mLB++) {
            u1 = x_data[(ix0 + obj->indexUB.data[mLB]) - 2] - obj->ub.data
                [obj->indexUB.data[mLB] - 1];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    if (mFixed > 0) {
        for (mUB = 0; mUB < mFixed; mUB++) {
            u1 = std::abs(x_data[(ix0 + obj->indexFixed.data[mUB]) - 2] - obj->
                ub.data[obj->indexFixed.data[mUB] - 1]);
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    return v;
}

// Function for MATLAB Function: '<S4>/NLMPC'
boolean_T modelModelClass::model_feasibleX0ForWorkingSet(real_T workspace_data[],
    const int32_T workspace_size[2], real_T xCurrent_data[],
    s_yK2JoCuYdmZkt0peIhHCXB_mode_T* workingset, s_0DR0BN84H2zTEyVrtxAC8C_mode_T
    * qrmanager)
{
    real_T c;
    real_T constrViolation_basicX;
    int32_T b;
    int32_T b_ia;
    int32_T b_ic;
    int32_T br;
    int32_T exitg1;
    int32_T f;
    int32_T iAcol;
    int32_T ia;
    int32_T ix;
    int32_T iy;
    int32_T ldq;
    int32_T mWConstr_tmp_tmp;
    int32_T nVar;
    boolean_T nonDegenerateWset;
    mWConstr_tmp_tmp = workingset->nActiveConstr - 1;
    nVar = workingset->nVar;
    nonDegenerateWset = true;
    if (workingset->nActiveConstr != 0) {
        for (ldq = 0; ldq <= mWConstr_tmp_tmp; ldq++) {
            workspace_data[ldq] = workingset->bwset.data[ldq];
            workspace_data[ldq + workspace_size[0]] = workingset->bwset.data[ldq];
        }

        ldq = workingset->ldA;
        if (workingset->nActiveConstr != 0) {
            iy = 0;
            br = (workingset->nActiveConstr - 1) * workingset->ldA + 1;
            iAcol = 1;
            while (((ldq > 0) && (iAcol <= br)) || ((ldq < 0) && (iAcol >= br))) {
                ix = 0;
                c = 0.0;
                b = (iAcol + nVar) - 1;
                for (ia = iAcol; ia <= b; ia++) {
                    c += workingset->ATwset.data[ia - 1] * xCurrent_data[ix];
                    ix++;
                }

                workspace_data[iy] += -c;
                iy++;
                iAcol += ldq;
            }
        }

        if (workingset->nActiveConstr >= workingset->nVar) {
            for (ldq = 0; ldq < nVar; ldq++) {
                iy = qrmanager->ldq * ldq;
                for (br = 0; br <= mWConstr_tmp_tmp; br++) {
                    qrmanager->QR.data[br + iy] = workingset->ATwset.data[workingset->ldA *
                        br + ldq];
                }
            }

            model_factorQR(qrmanager, workingset->nActiveConstr, workingset->nVar);
            model_computeQ_(qrmanager, qrmanager->mrows);
            ldq = qrmanager->ldq;
            iy = workspace_size[0];
            iAcol = workspace_size[0] * workspace_size[1];
            if (0 <= iAcol - 1) {
                std::memcpy(&model_B.B_data[0], &workspace_data[0], iAcol * sizeof
                (real_T));
            }

            br = 0;
            while ((iy > 0) && (br <= iy)) {
                iAcol = br + nVar;
                for (ix = br; ix < iAcol; ix++) {
                    workspace_data[ix] = 0.0;
                }

                br += iy;
            }

            br = -1;
            iAcol = 0;
            while ((iy > 0) && (iAcol <= iy)) {
                ix = -1;
                b = iAcol + nVar;
                for (ia = iAcol; ia < b; ia++) {
                    c = 0.0;
                    for (b_ia = 1; b_ia - 1 <= mWConstr_tmp_tmp; b_ia++) {
                        c += qrmanager->Q.data[b_ia + ix] * model_B.B_data[b_ia + br];
                    }

                    workspace_data[ia] += c;
                    ix += ldq;
                }

                br += iy;
                iAcol += iy;
            }

            for (mWConstr_tmp_tmp = workingset->nVar; mWConstr_tmp_tmp > 0;
                mWConstr_tmp_tmp--) {
                iAcol = (mWConstr_tmp_tmp - 1) * ldq - 1;
                c = workspace_data[mWConstr_tmp_tmp + -1];
                if (c != 0.0) {
                    workspace_data[mWConstr_tmp_tmp + -1] = c / qrmanager->
                        QR.data[mWConstr_tmp_tmp + iAcol];
                    for (ix = 1; ix - 1 <= mWConstr_tmp_tmp - 2; ix++) {
                        workspace_data[ix + -1] -= workspace_data[mWConstr_tmp_tmp + -1] *
                            qrmanager->QR.data[ix + iAcol];
                    }
                }
            }

            for (mWConstr_tmp_tmp = workingset->nVar; mWConstr_tmp_tmp > 0;
                mWConstr_tmp_tmp--) {
                iAcol = (mWConstr_tmp_tmp - 1) * ldq - 1;
                br = (iy + mWConstr_tmp_tmp) - 1;
                if (workspace_data[br] != 0.0) {
                    workspace_data[br] /= qrmanager->QR.data[mWConstr_tmp_tmp + iAcol];
                    for (ix = 1; ix - 1 <= mWConstr_tmp_tmp - 2; ix++) {
                        b = (iy + ix) - 1;
                        workspace_data[b] -= workspace_data[br] * qrmanager->QR.data[ix +
                            iAcol];
                    }
                }
            }
        }
        else {
            model_factorQR_j(qrmanager, workingset->ATwset.data, workingset->nVar,
                workingset->nActiveConstr, workingset->ldA);
            model_computeQ_(qrmanager, qrmanager->minRowCol);
            ldq = qrmanager->ldq;
            iy = workspace_size[0];
            for (br = 1; br - 1 <= mWConstr_tmp_tmp; br++) {
                iAcol = (br - 1) * ldq - 1;
                c = workspace_data[br + -1];
                for (b = 1; b - 1 <= br - 2; b++) {
                    c -= qrmanager->QR.data[b + iAcol] * workspace_data[b + -1];
                }

                workspace_data[br + -1] = c / qrmanager->QR.data[br + iAcol];
            }

            for (br = 1; br - 1 <= mWConstr_tmp_tmp; br++) {
                iAcol = (br - 1) * ldq - 1;
                ix = (iy + br) - 1;
                c = workspace_data[ix];
                for (b = 1; b - 1 <= br - 2; b++) {
                    c -= qrmanager->QR.data[b + iAcol] * workspace_data[(iy + b) - 1];
                }

                workspace_data[ix] = c / qrmanager->QR.data[br + iAcol];
            }

            iAcol = workspace_size[0] * workspace_size[1];
            if (0 <= iAcol - 1) {
                std::memcpy(&model_B.B_data[0], &workspace_data[0], iAcol * sizeof
                (real_T));
            }

            br = 0;
            while ((iy > 0) && (br <= iy)) {
                iAcol = br + nVar;
                for (ix = br; ix < iAcol; ix++) {
                    workspace_data[ix] = 0.0;
                }

                br += iy;
            }

            br = 1;
            iAcol = 0;
            while ((iy > 0) && (iAcol <= iy)) {
                ix = -1;
                b = br + mWConstr_tmp_tmp;
                for (ia = br; ia <= b; ia++) {
                    b_ia = ix;
                    f = iAcol + nVar;
                    for (b_ic = iAcol; b_ic < f; b_ic++) {
                        b_ia++;
                        workspace_data[b_ic] += model_B.B_data[ia - 1] * qrmanager->
                            Q.data[b_ia];
                    }

                    ix += ldq;
                }

                br += iy;
                iAcol += iy;
            }
        }

        mWConstr_tmp_tmp = 0;
        do {
            exitg1 = 0;
            if (mWConstr_tmp_tmp <= nVar - 1) {
                c = workspace_data[mWConstr_tmp_tmp];
                if (rtIsInf(c) || rtIsNaN(c)) {
                    nonDegenerateWset = false;
                    exitg1 = 1;
                }
                else {
                    c = workspace_data[mWConstr_tmp_tmp + workspace_size[0]];
                    if (rtIsInf(c) || rtIsNaN(c)) {
                        nonDegenerateWset = false;
                        exitg1 = 1;
                    }
                    else {
                        mWConstr_tmp_tmp++;
                    }
                }
            }
            else {
                for (mWConstr_tmp_tmp = 0; mWConstr_tmp_tmp < nVar; mWConstr_tmp_tmp++)
                {
                    workspace_data[mWConstr_tmp_tmp] += xCurrent_data[mWConstr_tmp_tmp];
                }

                c = model_maxConstraintViolation(workingset, workspace_data);
                constrViolation_basicX = model_maxConstraintViolation_h(workingset,
                    workspace_data, workspace_size[0] + 1);
                if ((c <= 2.2204460492503131E-16) || (c < constrViolation_basicX)) {
                    for (mWConstr_tmp_tmp = 0; mWConstr_tmp_tmp < nVar; mWConstr_tmp_tmp++)
                    {
                        xCurrent_data[mWConstr_tmp_tmp] = workspace_data[mWConstr_tmp_tmp];
                    }
                }
                else {
                    for (mWConstr_tmp_tmp = 0; mWConstr_tmp_tmp < nVar; mWConstr_tmp_tmp++)
                    {
                        xCurrent_data[mWConstr_tmp_tmp] = workspace_data[workspace_size[0] +
                            mWConstr_tmp_tmp];
                    }
                }

                exitg1 = 1;
            }
        } while (exitg1 == 0);
    }

    return nonDegenerateWset;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_RemoveDependentIneq__j
(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* workingset, s_0DR0BN84H2zTEyVrtxAC8C_mode_T*
    qrmanager, s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace)
{
    real_T tol;
    int32_T idxPosATwset;
    int32_T idxPosQR;
    int32_T k;
    int32_T nDepIneq;
    int32_T nFixedConstr;
    int32_T nVar;
    nFixedConstr = workingset->nWConstr[0] + workingset->nWConstr[1];
    nVar = workingset->nVar;
    if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
        nWConstr[4] > 0) {
        tol = 1000.0 * static_cast<real_T>(workingset->nVar) *
            2.2204460492503131E-16;
        for (nDepIneq = 0; nDepIneq < nFixedConstr; nDepIneq++) {
            qrmanager->jpvt.data[nDepIneq] = 1;
        }

        for (nDepIneq = nFixedConstr + 1; nDepIneq <= workingset->nActiveConstr;
            nDepIneq++) {
            qrmanager->jpvt.data[nDepIneq - 1] = 0;
        }

        for (nDepIneq = 0; nDepIneq < workingset->nActiveConstr; nDepIneq++) {
            idxPosQR = qrmanager->ldq * nDepIneq;
            idxPosATwset = workingset->ldA * nDepIneq;
            for (k = 1; k - 1 < nVar; k++) {
                qrmanager->QR.data[(idxPosQR + k) - 1] = workingset->ATwset.data
                    [(idxPosATwset + k) - 1];
            }
        }

        model_factorQRE_j(qrmanager, workingset->nVar, workingset->nActiveConstr);
        nDepIneq = 0;
        for (idxPosQR = workingset->nActiveConstr - 1; idxPosQR + 1 > nVar; idxPosQR
            --) {
            nDepIneq++;
            memspace->workspace_int.data[nDepIneq - 1] = qrmanager->jpvt.data[idxPosQR];
        }

        if (idxPosQR + 1 <= workingset->nVar) {
            nVar = qrmanager->ldq * idxPosQR + idxPosQR;
            while ((idxPosQR + 1 > nFixedConstr) && (std::abs(qrmanager->QR.data[nVar])
                < tol)) {
                nDepIneq++;
                memspace->workspace_int.data[nDepIneq - 1] = qrmanager->
                    jpvt.data[idxPosQR];
                idxPosQR--;
                nVar = (nVar - qrmanager->ldq) - 1;
            }
        }

        model_countsort(memspace->workspace_int.data, nDepIneq,
            memspace->workspace_sort.data, nFixedConstr + 1,
            workingset->nActiveConstr);
        while (nDepIneq > 0) {
            model_removeConstr(workingset, memspace->workspace_int.data[nDepIneq - 1]);
            nDepIneq--;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4wks12v(int32_T m, int32_T n, const real_T
    A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
    real_T c;
    int32_T b;
    int32_T b_c;
    int32_T b_iy;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    for (b_iy = 0; b_iy < n; b_iy++) {
        y_data[b_iy] = -y_data[b_iy];
    }

    b_iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
        ix = 0;
        c = 0.0;
        b = (iac + m) - 1;
        for (ia = iac; ia <= b; ia++) {
            c += A_data[ia - 1] * x_data[ix];
            ix++;
        }

        y_data[b_iy] += c;
        b_iy++;
        iac += lda;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4wks12(int32_T n, const real_T A_data[],
    int32_T lda, const real_T x_data[], real_T y_data[])
{
    real_T c;
    int32_T b_c;
    int32_T b_iy;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    for (b_iy = 0; b_iy < n; b_iy++) {
        y_data[b_iy] = -y_data[b_iy];
    }

    b_iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
        ix = 0;
        c = 0.0;
        for (ia = iac; ia <= iac + 192; ia++) {
            c += A_data[ia - 1] * x_data[ix];
            ix++;
        }

        y_data[b_iy] += c;
        b_iy++;
        iac += lda;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_maxConstraintViolation_ha
(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj, const real_T x_data[])
{
    real_T u1;
    real_T v;
    int32_T b_k;
    int32_T mFixed;
    int32_T mIneq;
    int32_T mLB;
    int32_T mUB;
    mLB = obj->sizes[3];
    mUB = obj->sizes[4];
    mFixed = obj->sizes[0];
    if (obj->probType == 2) {
        v = 0.0;
        mIneq = obj->sizes[2] - 1;
        for (b_k = 0; b_k <= mIneq; b_k++) {
            obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
        }

        model_xgemv_i4wks12(obj->sizes[2], obj->Aineq.data, obj->ldA, x_data,
            obj->maxConstrWorkspace.data);
        for (b_k = 0; b_k <= mIneq; b_k++) {
            obj->maxConstrWorkspace.data[b_k] -= x_data[b_k + 193];
            u1 = obj->maxConstrWorkspace.data[b_k];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }

        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 96U * sizeof
        (real_T));
        model_xgemv_i4wks12(96, obj->Aeq.data, obj->ldA, x_data,
            obj->maxConstrWorkspace.data);
        for (b_k = 0; b_k < 96; b_k++) {
            obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
                x_data[(mIneq + b_k) + 194]) + x_data[(obj->sizes[2] + b_k) + 289];
            u1 = std::abs(obj->maxConstrWorkspace.data[b_k]);
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }
    else {
        v = 0.0;
        mIneq = obj->sizes[2] - 1;
        for (b_k = 0; b_k <= mIneq; b_k++) {
            obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
        }

        model_xgemv_i4wks12v(obj->nVar, obj->sizes[2], obj->Aineq.data, obj->ldA,
            x_data, obj->maxConstrWorkspace.data);
        for (b_k = 0; b_k <= mIneq; b_k++) {
            u1 = obj->maxConstrWorkspace.data[b_k];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }

        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 96U * sizeof
        (real_T));
        model_xgemv_i4wks12v(obj->nVar, 96, obj->Aeq.data, obj->ldA, x_data,
            obj->maxConstrWorkspace.data);
        for (mIneq = 0; mIneq < 96; mIneq++) {
            u1 = std::abs(obj->maxConstrWorkspace.data[mIneq]);
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    if (mLB > 0) {
        for (mIneq = 0; mIneq < mLB; mIneq++) {
            u1 = -x_data[obj->indexLB.data[mIneq] - 1] - obj->lb.data
                [obj->indexLB.data[mIneq] - 1];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    if (mUB > 0) {
        for (mLB = 0; mLB < mUB; mLB++) {
            u1 = x_data[obj->indexUB.data[mLB] - 1] - obj->ub.data[obj->
                indexUB.data[mLB] - 1];
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    if (mFixed > 0) {
        for (mUB = 0; mUB < mFixed; mUB++) {
            u1 = std::abs(x_data[obj->indexFixed.data[mUB] - 1] - obj->ub.data
                [obj->indexFixed.data[mUB] - 1]);
            if ((!(v > u1)) && (!rtIsNaN(u1))) {
                v = u1;
            }
        }
    }

    return v;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_PresolveWorkingSet(s_4PJjBY6NtHkFemjansM2s_model_T
    * solution, s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace,
    s_yK2JoCuYdmZkt0peIhHCXB_mode_T* workingset, s_0DR0BN84H2zTEyVrtxAC8C_mode_T
    * qrmanager)
{
    real_T constrViolation;
    int32_T b;
    boolean_T guard1 = false;
    boolean_T okWorkingSet;
    solution->state = 82;
    b = model_RemoveDependentEq_(memspace, workingset, qrmanager);
    if ((b != -1) && (workingset->nActiveConstr <= qrmanager->ldq)) {
        model_RemoveDependentIneq_(workingset, qrmanager, memspace);
        okWorkingSet = model_feasibleX0ForWorkingSet(memspace->workspace_double.data,
            memspace->workspace_double.size, solution->xstar.data, workingset,
            qrmanager);
        guard1 = false;
        if (!okWorkingSet) {
            model_RemoveDependentIneq__j(workingset, qrmanager, memspace);
            okWorkingSet = model_feasibleX0ForWorkingSet
            (memspace->workspace_double.data, memspace->workspace_double.size,
                solution->xstar.data, workingset, qrmanager);
            if (!okWorkingSet) {
                solution->state = -7;
            }
            else {
                guard1 = true;
            }
        }
        else {
            guard1 = true;
        }

        if (guard1) {
            if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
            {
                constrViolation = model_maxConstraintViolation_ha(workingset,
                    solution->xstar.data);
                if (constrViolation > 1.0E-6) {
                    solution->state = -2;
                }
            }
        }
    }
    else {
        solution->state = -3;
        model_removeAllIneqConstr(workingset);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4wks12vo(int32_T m, int32_T n, const real_T
    A[37249], int32_T lda, const real_T x_data[], real_T y_data[])
{
    int32_T b;
    int32_T c;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    int32_T iy;
    if ((m != 0) && (n != 0)) {
        for (ix = 0; ix < m; ix++) {
            y_data[ix] = 0.0;
        }

        ix = 0;
        c = (n - 1) * lda + 1;
        iac = 1;
        while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
            iy = 0;
            b = (iac + m) - 1;
            for (ia = iac; ia <= b; ia++) {
                y_data[iy] += A[ia - 1] * x_data[ix];
                iy++;
            }

            ix++;
            iac += lda;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_computeGrad_StoreHx(s_Nj0wGC8l1bxAgJt7zANBsB_mode_T*
    obj, const real_T H[37249], const real_T f_data[], const real_T x_data[])
{
    int32_T c_k;
    int32_T iy;
    int32_T maxRegVar;
    switch (obj->objtype) {
    case 5:
        for (maxRegVar = 0; maxRegVar <= obj->nvar - 2; maxRegVar++) {
            obj->grad.data[maxRegVar] = 0.0;
        }

        obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
        break;

    case 3:
        model_xgemv_i4wks12vo(obj->nvar, obj->nvar, H, obj->nvar, x_data,
            obj->Hx.data);
        for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
            obj->grad.data[maxRegVar] = obj->Hx.data[maxRegVar];
        }

        if (obj->hasLinear && (obj->nvar >= 1)) {
            maxRegVar = obj->nvar - 1;
            for (iy = 0; iy <= maxRegVar; iy++) {
                obj->grad.data[iy] += f_data[iy];
            }
        }
        break;

    default:
        maxRegVar = obj->maxVar - 1;
        model_xgemv_i4wks12vo(obj->nvar, obj->nvar, H, obj->nvar, x_data,
            obj->Hx.data);
        for (iy = obj->nvar; iy < maxRegVar; iy++) {
            obj->Hx.data[iy] = obj->beta * x_data[iy];
        }

        for (iy = 0; iy < maxRegVar; iy++) {
            obj->grad.data[iy] = obj->Hx.data[iy];
        }

        if (obj->hasLinear && (obj->nvar >= 1)) {
            maxRegVar = obj->nvar - 1;
            for (iy = 0; iy <= maxRegVar; iy++) {
                obj->grad.data[iy] += f_data[iy];
            }
        }

        maxRegVar = (obj->maxVar - obj->nvar) - 1;
        if (maxRegVar >= 1) {
            iy = obj->nvar;
            for (c_k = 0; c_k < maxRegVar; c_k++) {
                obj->grad.data[iy] += obj->rho;
                iy++;
            }
        }
        break;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_computeFval_ReuseHx(const
    s_Nj0wGC8l1bxAgJt7zANBsB_mode_T* obj, real_T workspace_data[], const real_T
    f_data[], const real_T x_data[])
{
    real_T val;
    int32_T d_i;
    int32_T d_k;
    int32_T maxRegVar_tmp_tmp;
    switch (obj->objtype) {
    case 5:
        val = x_data[obj->nvar - 1] * obj->gammaScalar;
        break;

    case 3:
        if (obj->hasLinear) {
            for (maxRegVar_tmp_tmp = 0; maxRegVar_tmp_tmp < obj->nvar;
                maxRegVar_tmp_tmp++) {
                workspace_data[maxRegVar_tmp_tmp] = 0.5 * obj->Hx.data[maxRegVar_tmp_tmp]
                    + f_data[maxRegVar_tmp_tmp];
            }

            val = 0.0;
            if (obj->nvar >= 1) {
                for (maxRegVar_tmp_tmp = 0; maxRegVar_tmp_tmp < obj->nvar;
                    maxRegVar_tmp_tmp++) {
                    val += workspace_data[maxRegVar_tmp_tmp] * x_data[maxRegVar_tmp_tmp];
                }
            }
        }
        else {
            val = 0.0;
            if (obj->nvar >= 1) {
                for (maxRegVar_tmp_tmp = 0; maxRegVar_tmp_tmp < obj->nvar;
                    maxRegVar_tmp_tmp++) {
                    val += x_data[maxRegVar_tmp_tmp] * obj->Hx.data[maxRegVar_tmp_tmp];
                }
            }

            val *= 0.5;
        }
        break;

    default:
        maxRegVar_tmp_tmp = obj->maxVar - 1;
        if (obj->hasLinear) {
            for (d_k = 0; d_k < obj->nvar; d_k++) {
                workspace_data[d_k] = f_data[d_k];
            }

            d_k = obj->maxVar - obj->nvar;
            for (d_i = 0; d_i <= d_k - 2; d_i++) {
                workspace_data[obj->nvar + d_i] = obj->rho;
            }

            for (d_k = 0; d_k < maxRegVar_tmp_tmp; d_k++) {
                workspace_data[d_k] += 0.5 * obj->Hx.data[d_k];
            }

            val = 0.0;
            if (obj->maxVar - 1 >= 1) {
                for (maxRegVar_tmp_tmp = 0; maxRegVar_tmp_tmp <= obj->maxVar - 2;
                    maxRegVar_tmp_tmp++) {
                    val += workspace_data[maxRegVar_tmp_tmp] * x_data[maxRegVar_tmp_tmp];
                }
            }
        }
        else {
            val = 0.0;
            if (obj->maxVar - 1 >= 1) {
                for (d_k = 0; d_k <= obj->maxVar - 2; d_k++) {
                    val += x_data[d_k] * obj->Hx.data[d_k];
                }
            }

            val *= 0.5;
            for (d_k = obj->nvar; d_k < maxRegVar_tmp_tmp; d_k++) {
                val += x_data[d_k] * obj->rho;
            }
        }
        break;
    }

    return val;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xrotg(real_T* a, real_T* b, real_T* c, real_T* s)
{
    real_T absa;
    real_T absb;
    real_T ads;
    real_T bds;
    real_T roe;
    real_T scale;
    roe = *b;
    absa = std::abs(*a);
    absb = std::abs(*b);
    if (absa > absb) {
        roe = *a;
    }

    scale = absa + absb;
    if (scale == 0.0) {
        *s = 0.0;
        *c = 1.0;
        scale = 0.0;
        *b = 0.0;
    }
    else {
        ads = absa / scale;
        bds = absb / scale;
        scale *= std::sqrt(ads * ads + bds * bds);
        if (roe < 0.0) {
            scale = -scale;
        }

        *c = *a / scale;
        *s = *b / scale;
        if (absa > absb) {
            *b = *s;
        }
        else if (*c != 0.0) {
            *b = 1.0 / *c;
        }
        else {
            *b = 1.0;
        }
    }

    *a = scale;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_deleteColMoveEnd(s_0DR0BN84H2zTEyVrtxAC8C_mode_T
    * obj, int32_T idx)
{
    real_T b_s;
    real_T b_temp;
    real_T c_c;
    real_T e;
    int32_T QRk0;
    int32_T b_ix;
    int32_T d_k;
    int32_T i;
    int32_T idxRotGCol;
    int32_T ix;
    int32_T k;
    if (obj->usedPivoting) {
        i = 1;
        while ((i <= obj->ncols) && (obj->jpvt.data[i - 1] != idx)) {
            i++;
        }

        idx = i;
    }

    if (idx >= obj->ncols) {
        obj->ncols--;
    }
    else {
        obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
        for (i = 0; i < obj->minRowCol; i++) {
            obj->QR.data[i + obj->ldq * (idx - 1)] = obj->QR.data[(obj->ncols - 1) *
                obj->ldq + i];
        }

        obj->ncols--;
        if (obj->mrows < obj->ncols) {
            obj->minRowCol = obj->mrows;
        }
        else {
            obj->minRowCol = obj->ncols;
        }

        if (idx < obj->mrows) {
            if (obj->mrows - 1 < obj->ncols) {
                i = obj->mrows - 1;
            }
            else {
                i = obj->ncols;
            }

            k = i;
            idxRotGCol = (idx - 1) * obj->ldq;
            while (k >= idx) {
                QRk0 = k + idxRotGCol;
                b_temp = obj->QR.data[QRk0 - 1];
                e = obj->QR.data[QRk0];
                model_xrotg(&b_temp, &e, &c_c, &b_s);
                QRk0 = k + idxRotGCol;
                obj->QR.data[QRk0 - 1] = b_temp;
                obj->QR.data[QRk0] = e;
                obj->QR.data[k + obj->ldq * (k - 1)] = 0.0;
                QRk0 = obj->ldq * idx + k;
                b_ix = obj->ncols - idx;
                if (b_ix >= 1) {
                    ix = QRk0 - 1;
                    for (d_k = 0; d_k < b_ix; d_k++) {
                        b_temp = obj->QR.data[ix] * c_c + obj->QR.data[QRk0] * b_s;
                        obj->QR.data[QRk0] = obj->QR.data[QRk0] * c_c - obj->QR.data[ix] *
                            b_s;
                        obj->QR.data[ix] = b_temp;
                        QRk0 += obj->ldq;
                        ix += obj->ldq;
                    }
                }

                QRk0 = (k - 1) * obj->ldq;
                if (obj->mrows >= 1) {
                    b_ix = obj->ldq + QRk0;
                    for (ix = 0; ix < obj->mrows; ix++) {
                        b_temp = obj->Q.data[QRk0] * c_c + obj->Q.data[b_ix] * b_s;
                        obj->Q.data[b_ix] = obj->Q.data[b_ix] * c_c - obj->Q.data[QRk0] *
                            b_s;
                        obj->Q.data[QRk0] = b_temp;
                        b_ix++;
                        QRk0++;
                    }
                }

                k--;
            }

            for (k = idx + 1; k <= i; k++) {
                idxRotGCol = k + (k - 1) * obj->ldq;
                b_temp = obj->QR.data[idxRotGCol - 1];
                e = obj->QR.data[idxRotGCol];
                model_xrotg(&b_temp, &e, &c_c, &b_s);
                obj->QR.data[idxRotGCol - 1] = b_temp;
                obj->QR.data[idxRotGCol] = e;
                QRk0 = (obj->ldq + 1) * k;
                idxRotGCol = obj->ncols - k;
                if (idxRotGCol >= 1) {
                    b_ix = QRk0 - 1;
                    for (ix = 0; ix < idxRotGCol; ix++) {
                        b_temp = obj->QR.data[b_ix] * c_c + obj->QR.data[QRk0] * b_s;
                        obj->QR.data[QRk0] = obj->QR.data[QRk0] * c_c - obj->QR.data[b_ix] *
                            b_s;
                        obj->QR.data[b_ix] = b_temp;
                        QRk0 += obj->ldq;
                        b_ix += obj->ldq;
                    }
                }

                idxRotGCol = (k - 1) * obj->ldq;
                if (obj->mrows >= 1) {
                    QRk0 = obj->ldq + idxRotGCol;
                    for (b_ix = 0; b_ix < obj->mrows; b_ix++) {
                        b_temp = obj->Q.data[idxRotGCol] * c_c + obj->Q.data[QRk0] * b_s;
                        obj->Q.data[QRk0] = obj->Q.data[QRk0] * c_c - obj->Q.data[idxRotGCol]
                            * b_s;
                        obj->Q.data[idxRotGCol] = b_temp;
                        QRk0++;
                        idxRotGCol++;
                    }
                }
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
boolean_T modelModelClass::model_strcmp(const char_T a[7])
{
    int32_T ret;
    static const char_T b[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

    ret = memcmp(&a[0], &b[0], 7);
    return ret == 0;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemm(int32_T m, int32_T n, int32_T k, const real_T
    A[37249], int32_T lda, const real_T B_data[], int32_T ib0, int32_T ldb, real_T
    C_data[], int32_T ldc)
{
    int32_T ar;
    int32_T b_c;
    int32_T b_cr;
    int32_T b_ic;
    int32_T br;
    int32_T c;
    int32_T d;
    int32_T ia;
    int32_T ib;
    if ((m != 0) && (n != 0)) {
        b_c = (n - 1) * ldc;
        br = 0;
        while (((ldc > 0) && (br <= b_c)) || ((ldc < 0) && (br >= b_c))) {
            b_cr = br + m;
            for (ar = br; ar < b_cr; ar++) {
                C_data[ar] = 0.0;
            }

            br += ldc;
        }

        br = ib0;
        b_cr = 0;
        while (((ldc > 0) && (b_cr <= b_c)) || ((ldc < 0) && (b_cr >= b_c))) {
            ar = -1;
            c = br + k;
            for (ib = br; ib < c; ib++) {
                ia = ar;
                d = b_cr + m;
                for (b_ic = b_cr; b_ic < d; b_ic++) {
                    ia++;
                    C_data[b_ic] += B_data[ib - 1] * A[ia];
                }

                ar += lda;
            }

            br += ldb;
            b_cr += ldc;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemm_e(int32_T m, int32_T n, int32_T k, const
    real_T A_data[], int32_T ia0, int32_T lda, const real_T B_data[], int32_T ldb,
    real_T C_data[], int32_T ldc)
{
    real_T temp;
    int32_T ar;
    int32_T b_c;
    int32_T b_cr;
    int32_T b_ic;
    int32_T br;
    int32_T c;
    int32_T w;
    if ((m != 0) && (n != 0)) {
        b_c = (n - 1) * ldc;
        br = 0;
        while (((ldc > 0) && (br <= b_c)) || ((ldc < 0) && (br >= b_c))) {
            b_cr = br + m;
            for (ar = br; ar < b_cr; ar++) {
                C_data[ar] = 0.0;
            }

            br += ldc;
        }

        br = -1;
        b_cr = 0;
        while (((ldc > 0) && (b_cr <= b_c)) || ((ldc < 0) && (b_cr >= b_c))) {
            ar = ia0;
            c = b_cr + m;
            for (b_ic = b_cr; b_ic < c; b_ic++) {
                temp = 0.0;
                for (w = 1; w - 1 < k; w++) {
                    temp += A_data[(w + ar) - 2] * B_data[w + br];
                }

                C_data[b_ic] += temp;
                ar += lda;
            }

            br += ldb;
            b_cr += ldc;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
int32_T modelModelClass::model_ixamax_p(int32_T n, const real_T x_data[],
    int32_T incx)
{
    real_T smax;
    real_T y;
    int32_T idxmax;
    int32_T ix;
    int32_T k;
    if (n < 1) {
        idxmax = 0;
    }
    else {
        idxmax = 1;
        if (n > 1) {
            ix = 0;
            smax = std::abs(x_data[0]);
            for (k = 2; k <= n; k++) {
                ix += incx;
                y = std::abs(x_data[ix]);
                if (y > smax) {
                    idxmax = k;
                    smax = y;
                }
            }
        }
    }

    return idxmax;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_fullColLDL2_(s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* obj,
    int32_T LD_offset, int32_T NColsRemain)
{
    real_T neg_D;
    real_T temp;
    real_T y;
    int32_T LD_diagOffset;
    int32_T LDimSizeP1;
    int32_T b;
    int32_T ijA;
    int32_T j;
    int32_T jA;
    int32_T k;
    int32_T subMatrixDim;
    LDimSizeP1 = obj->ldm;
    for (k = 0; k < NColsRemain; k++) {
        LD_diagOffset = ((LDimSizeP1 + 1) * k + LD_offset) - 1;
        neg_D = -1.0 / obj->FMat.data[LD_diagOffset];
        subMatrixDim = (NColsRemain - k) - 2;
        for (jA = 1; jA - 1 <= subMatrixDim; jA++) {
            obj->workspace_ = obj->FMat.data[LD_diagOffset + jA];
        }

        y = obj->workspace_;
        if (!(neg_D == 0.0)) {
            jA = (LD_diagOffset + LDimSizeP1) + 1;
            for (j = 0; j <= subMatrixDim; j++) {
                if (y != 0.0) {
                    temp = y * neg_D;
                    b = subMatrixDim + jA;
                    for (ijA = jA; ijA < b + 1; ijA++) {
                        obj->FMat.data[ijA] += obj->workspace_ * temp;
                    }
                }

                jA += obj->ldm;
            }
        }

        for (jA = 1; jA - 1 <= subMatrixDim; jA++) {
            j = LD_diagOffset + jA;
            obj->FMat.data[j] /= obj->FMat.data[LD_diagOffset];
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_partialColLDL3_(s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* obj,
    int32_T LD_offset, int32_T NColsRemain)
{
    real_T y;
    int32_T FMat_offset;
    int32_T LD_diagOffset;
    int32_T LDimSizeP1;
    int32_T b_ia;
    int32_T br;
    int32_T c;
    int32_T e;
    int32_T g;
    int32_T ia;
    int32_T ix;
    int32_T iy;
    int32_T k;
    int32_T subBlockSize;
    int32_T subRows;
    LDimSizeP1 = obj->ldm + 1;
    for (k = 0; k < 48; k++) {
        subRows = (NColsRemain - k) - 1;
        LD_diagOffset = (LDimSizeP1 * k + LD_offset) - 1;
        for (subBlockSize = 0; subBlockSize <= subRows; subBlockSize++) {
            obj->workspace_ = obj->FMat.data[LD_diagOffset + subBlockSize];
        }

        for (subBlockSize = 0; subBlockSize < NColsRemain; subBlockSize++) {
            obj->workspace2_ = obj->workspace_;
        }

        subBlockSize = obj->ldm;
        y = obj->workspace2_;
        if ((NColsRemain != 0) && (k != 0)) {
            ix = LD_offset + k;
            FMat_offset = (k - 1) * obj->ldm + 1;
            br = 1;
            while (((subBlockSize > 0) && (br <= FMat_offset)) || ((subBlockSize < 0) &&
                (br >= FMat_offset))) {
                c = (br + NColsRemain) - 1;
                for (ia = br; ia <= c; ia++) {
                    y += -obj->FMat.data[ix - 1] * obj->workspace_;
                }

                ix += obj->ldm;
                br += subBlockSize;
            }
        }

        obj->workspace2_ = y;
        for (subBlockSize = 0; subBlockSize < NColsRemain; subBlockSize++) {
            obj->workspace_ = y;
        }

        for (subBlockSize = 0; subBlockSize <= subRows; subBlockSize++) {
            obj->FMat.data[LD_diagOffset + subBlockSize] = obj->workspace_;
        }

        for (subBlockSize = 1; subBlockSize - 1 < subRows; subBlockSize++) {
            ix = LD_diagOffset + subBlockSize;
            obj->FMat.data[ix] /= obj->FMat.data[LD_diagOffset];
        }
    }

    for (k = 48; k <= NColsRemain - 1; k += 48) {
        ix = NColsRemain - k;
        if (48 < ix) {
            subBlockSize = 48;
        }
        else {
            subBlockSize = ix;
        }

        FMat_offset = k + subBlockSize;
        for (br = k; br < FMat_offset; br++) {
            subRows = FMat_offset - br;
            LD_diagOffset = (LDimSizeP1 * br + LD_offset) - 1;
            for (c = 0; c < 48; c++) {
                obj->workspace2_ = obj->FMat.data[((LD_offset + br) + c * obj->ldm) - 1];
            }

            c = obj->ldm;
            if (subRows != 0) {
                ia = (obj->ldm * 47 + br) + 1;
                g = br + 1;
                while (((c > 0) && (g <= ia)) || ((c < 0) && (g >= ia))) {
                    iy = LD_diagOffset;
                    e = (g + subRows) - 1;
                    for (b_ia = g; b_ia <= e; b_ia++) {
                        obj->FMat.data[iy] += obj->workspace_ * -obj->workspace2_;
                        iy++;
                    }

                    g += c;
                }
            }
        }

        if (FMat_offset < NColsRemain) {
            subRows = ix - subBlockSize;
            LD_diagOffset = ((LD_offset + subBlockSize) + LDimSizeP1 * k) - 1;
            for (ix = 0; ix < 48; ix++) {
                FMat_offset = (LD_offset + k) + ix * obj->ldm;
                for (br = 0; br < subBlockSize; br++) {
                    obj->workspace2_ = obj->FMat.data[(FMat_offset + br) - 1];
                }
            }

            ix = obj->ldm;
            FMat_offset = obj->ldm;
            if ((subRows != 0) && (subBlockSize != 0)) {
                subBlockSize = (subBlockSize - 1) * obj->ldm + LD_diagOffset;
                br = 0;
                while (((FMat_offset > 0) && (LD_diagOffset <= subBlockSize)) ||
                    ((FMat_offset < 0) && (LD_diagOffset >= subBlockSize))) {
                    br++;
                    c = ix * 47 + br;
                    ia = br;
                    while (((ix > 0) && (ia <= c)) || ((ix < 0) && (ia >= c))) {
                        g = LD_diagOffset + subRows;
                        for (iy = LD_diagOffset; iy < g; iy++) {
                            obj->FMat.data[iy] += -obj->workspace2_ * obj->workspace_;
                        }

                        ia += ix;
                    }

                    LD_diagOffset += FMat_offset;
                }
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
int32_T modelModelClass::model_xpotrf(int32_T n, real_T A_data[], int32_T lda)
{
    real_T c;
    real_T ssq;
    int32_T b;
    int32_T b_ix;
    int32_T b_iy;
    int32_T b_j;
    int32_T d;
    int32_T ia;
    int32_T idxA1j;
    int32_T idxAjj;
    int32_T info;
    int32_T ix;
    int32_T iy;
    boolean_T exitg1;
    info = 0;
    b_j = 0;
    exitg1 = false;
    while ((!exitg1) && (b_j <= n - 1)) {
        idxA1j = b_j * lda;
        idxAjj = idxA1j + b_j;
        ssq = 0.0;
        if (b_j >= 1) {
            b_ix = idxA1j;
            b_iy = idxA1j;
            for (iy = 0; iy < b_j; iy++) {
                ssq += A_data[b_ix] * A_data[b_iy];
                b_ix++;
                b_iy++;
            }
        }

        ssq = A_data[idxAjj] - ssq;
        if (ssq > 0.0) {
            ssq = std::sqrt(ssq);
            A_data[idxAjj] = ssq;
            if (b_j + 1 < n) {
                b_ix = (n - b_j) - 2;
                b_iy = (idxA1j + lda) + 1;
                idxAjj += lda;
                if ((b_j != 0) && (b_ix + 1 != 0)) {
                    iy = idxAjj;
                    b = lda * b_ix + b_iy;
                    while (((lda > 0) && (b_iy <= b)) || ((lda < 0) && (b_iy >= b))) {
                        ix = idxA1j;
                        c = 0.0;
                        d = (b_iy + b_j) - 1;
                        for (ia = b_iy; ia <= d; ia++) {
                            c += A_data[ia - 1] * A_data[ix];
                            ix++;
                        }

                        A_data[iy] += -c;
                        iy += lda;
                        b_iy += lda;
                    }
                }

                ssq = 1.0 / ssq;
                idxA1j = (lda * b_ix + idxAjj) + 1;
                b_ix = idxAjj + 1;
                while (((lda > 0) && (b_ix <= idxA1j)) || ((lda < 0) && (b_ix >= idxA1j)))
                {
                    A_data[b_ix - 1] *= ssq;
                    b_ix += lda;
                }
            }

            b_j++;
        }
        else {
            A_data[idxAjj] = ssq;
            info = b_j + 1;
            exitg1 = true;
        }
    }

    return info;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4wks12voz(int32_T m, int32_T n, const real_T
    A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T y_data[])
{
    int32_T b;
    int32_T c;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    int32_T iy;
    if (m != 0) {
        for (ix = 0; ix < m; ix++) {
            y_data[ix] = 0.0;
        }

        ix = 0;
        b = (n - 1) * lda + ia0;
        iac = ia0;
        while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
            iy = 0;
            c = (iac + m) - 1;
            for (ia = iac; ia <= c; ia++) {
                y_data[iy] += A_data[ia - 1] * x_data[ix];
                iy++;
            }

            ix++;
            iac += lda;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factor(s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* obj, const
    real_T A[37249], int32_T ndims, int32_T ldA)
{
    int32_T b_size[2];
    int32_T b;
    int32_T b_idx;
    int32_T iA0;
    int32_T iUU0;
    obj->ndims = ndims;
    for (b_idx = 0; b_idx < ndims; b_idx++) {
        iA0 = ldA * b_idx;
        iUU0 = obj->ldm * b_idx;
        for (b = 1; b - 1 < ndims; b++) {
            obj->FMat.data[(iUU0 + b) - 1] = A[(iA0 + b) - 1];
        }
    }

    b_size[0] = obj->FMat.size[0];
    b_size[1] = obj->FMat.size[1];
    iA0 = obj->FMat.size[0] * obj->FMat.size[1];
    if (0 <= iA0 - 1) {
        std::memcpy(&model_B.b_data_k[0], &obj->FMat.data[0], iA0 * sizeof(real_T));
    }

    iUU0 = model_xpotrf(ndims, model_B.b_data_k, obj->ldm);
    obj->FMat.size[0] = b_size[0];
    obj->FMat.size[1] = b_size[1];
    iA0 = b_size[0] * b_size[1];
    if (0 <= iA0 - 1) {
        std::memcpy(&obj->FMat.data[0], &model_B.b_data_k[0], iA0 * sizeof(real_T));
    }

    obj->info = iUU0;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_solve(const s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* obj,
    real_T rhs_data[])
{
    real_T temp;
    int32_T b_j;
    int32_T c_i;
    int32_T ix;
    int32_T jjA;
    if (obj->ndims != 0) {
        for (b_j = 0; b_j < obj->ndims; b_j++) {
            jjA = b_j * obj->ldm;
            temp = rhs_data[b_j];
            for (c_i = 0; c_i < b_j; c_i++) {
                temp -= obj->FMat.data[jjA + c_i] * rhs_data[c_i];
            }

            rhs_data[b_j] = temp / obj->FMat.data[jjA + b_j];
        }

        for (b_j = obj->ndims - 1; b_j + 1 > 0; b_j--) {
            jjA = b_j * obj->ldm + b_j;
            rhs_data[b_j] /= obj->FMat.data[jjA];
            for (c_i = 1; c_i - 1 < b_j; c_i++) {
                ix = b_j - c_i;
                rhs_data[ix] -= obj->FMat.data[jjA - c_i] * rhs_data[b_j];
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_factor_i(s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* obj, const
    real_T A[37249], int32_T ndims, int32_T ldA)
{
    real_T u0;
    int32_T A_maxDiag_idx;
    int32_T LD_diagOffset;
    int32_T LDimSizeP1_tmp_tmp;
    int32_T b_k;
    int32_T exitg2;
    int32_T order;
    boolean_T exitg1;
    LDimSizeP1_tmp_tmp = obj->ldm + 1;
    obj->ndims = ndims;
    for (A_maxDiag_idx = 0; A_maxDiag_idx < ndims; A_maxDiag_idx++) {
        LD_diagOffset = ldA * A_maxDiag_idx;
        order = obj->ldm * A_maxDiag_idx;
        for (b_k = 1; b_k - 1 < ndims; b_k++) {
            obj->FMat.data[(order + b_k) - 1] = A[(LD_diagOffset + b_k) - 1];
        }
    }

    A_maxDiag_idx = model_ixamax_p(ndims, obj->FMat.data, obj->ldm + 1) - 1;
    u0 = std::abs(obj->FMat.data[obj->ldm * A_maxDiag_idx + A_maxDiag_idx]) *
        2.2204460492503131E-16;
    if (u0 > 0.0) {
        obj->regTol_ = u0;
    }
    else {
        obj->regTol_ = 0.0;
    }

    if (ndims > 128) {
        A_maxDiag_idx = 0;
        exitg1 = false;
        while ((!exitg1) && (A_maxDiag_idx < ndims)) {
            LD_diagOffset = LDimSizeP1_tmp_tmp * A_maxDiag_idx + 1;
            order = ndims - A_maxDiag_idx;
            if (A_maxDiag_idx + 48 <= ndims) {
                model_partialColLDL3_(obj, LD_diagOffset, order);
                A_maxDiag_idx += 48;
            }
            else {
                model_fullColLDL2_(obj, LD_diagOffset, order);
                exitg1 = true;
            }
        }
    }
    else {
        model_fullColLDL2_(obj, 1, ndims);
    }

    if (obj->ConvexCheck) {
        LDimSizeP1_tmp_tmp = 0;
        do {
            exitg2 = 0;
            if (LDimSizeP1_tmp_tmp <= ndims - 1) {
                if (obj->FMat.data[obj->ldm * LDimSizeP1_tmp_tmp + LDimSizeP1_tmp_tmp] <=
                    0.0) {
                    obj->info = -LDimSizeP1_tmp_tmp - 1;
                    exitg2 = 1;
                }
                else {
                    LDimSizeP1_tmp_tmp++;
                }
            }
            else {
                obj->ConvexCheck = false;
                exitg2 = 1;
            }
        } while (exitg2 == 0);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_solve_f(const s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* obj,
    real_T rhs_data[])
{
    real_T temp;
    int32_T b;
    int32_T i;
    int32_T ix;
    int32_T j;
    int32_T jjA;
    int32_T n_tmp;
    n_tmp = obj->ndims - 1;
    if (obj->ndims != 0) {
        for (j = 0; j <= n_tmp; j++) {
            jjA = j * obj->ldm + j;
            b = n_tmp - j;
            for (i = 1; i - 1 < b; i++) {
                ix = j + i;
                rhs_data[ix] -= obj->FMat.data[jjA + i] * rhs_data[j];
            }
        }
    }

    for (j = 0; j <= n_tmp; j++) {
        rhs_data[j] /= obj->FMat.data[obj->ldm * j + j];
    }

    if (obj->ndims != 0) {
        for (n_tmp = obj->ndims - 1; n_tmp + 1 > 0; n_tmp--) {
            j = n_tmp * obj->ldm;
            temp = rhs_data[n_tmp];
            for (jjA = obj->ndims; jjA >= n_tmp + 2; jjA--) {
                temp -= obj->FMat.data[(j + jjA) - 1] * rhs_data[jjA - 1];
            }

            rhs_data[n_tmp] = temp;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_compute_deltax(const real_T H[37249],
    s_4PJjBY6NtHkFemjansM2s_model_T* solution, s_hLeLYpQstaGtKO7KoN11BF_mode_T
    * memspace, const s_0DR0BN84H2zTEyVrtxAC8C_mode_T* qrmanager,
    s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* cholmanager, const
    s_Nj0wGC8l1bxAgJt7zANBsB_mode_T* objective, boolean_T alwaysPositiveDef)
{
    real_T b_c;
    int32_T b_rhs_size[2];
    int32_T b_size[2];
    int32_T A_maxDiag_idx;
    int32_T LD_diagOffset;
    int32_T b_ldw;
    int32_T c_idx;
    int32_T e;
    int32_T exitg2;
    int32_T ia;
    int32_T ix;
    int32_T mNull_tmp;
    int32_T nVar;
    int32_T order;
    boolean_T exitg1;
    nVar = qrmanager->mrows - 1;
    mNull_tmp = qrmanager->mrows - qrmanager->ncols;
    if (mNull_tmp <= 0) {
        for (mNull_tmp = 0; mNull_tmp <= nVar; mNull_tmp++) {
            solution->searchDir.data[mNull_tmp] = 0.0;
        }
    }
    else {
        for (c_idx = 0; c_idx <= nVar; c_idx++) {
            solution->searchDir.data[c_idx] = -objective->grad.data[c_idx];
        }

        if (qrmanager->ncols <= 0) {
            switch (objective->objtype) {
            case 5:
                break;

            case 3:
                if (alwaysPositiveDef) {
                    model_factor(cholmanager, H, qrmanager->mrows, qrmanager->mrows);
                }
                else {
                    model_factor_i(cholmanager, H, qrmanager->mrows, qrmanager->mrows);
                }

                if (cholmanager->info != 0) {
                    solution->state = -6;
                }
                else if (alwaysPositiveDef) {
                    model_solve(cholmanager, solution->searchDir.data);
                }
                else {
                    model_solve_f(cholmanager, solution->searchDir.data);
                }
                break;

            default:
                if (alwaysPositiveDef) {
                    model_factor(cholmanager, H, objective->nvar, objective->nvar);
                    if (cholmanager->info != 0) {
                        solution->state = -6;
                    }
                    else {
                        model_solve(cholmanager, solution->searchDir.data);
                        b_c = 1.0 / objective->beta;
                        for (mNull_tmp = objective->nvar; mNull_tmp < qrmanager->mrows;
                            mNull_tmp++) {
                            solution->searchDir.data[mNull_tmp] *= b_c;
                        }
                    }
                }
                break;
            }
        }
        else {
            c_idx = qrmanager->ldq * qrmanager->ncols + 1;
            if (objective->objtype == 5) {
                for (b_ldw = 0; b_ldw < mNull_tmp; b_ldw++) {
                    memspace->workspace_double.data[b_ldw] = -qrmanager->Q.data
                        [(qrmanager->ncols + b_ldw) * qrmanager->ldq + nVar];
                }

                model_xgemv_i4wks12voz(qrmanager->mrows, mNull_tmp, qrmanager->Q.data,
                    c_idx, qrmanager->ldq, memspace->workspace_double.data,
                    solution->searchDir.data);
            }
            else {
                if (objective->objtype == 3) {
                    b_ldw = memspace->workspace_double.size[0];
                    model_xgemm(qrmanager->mrows, mNull_tmp, qrmanager->mrows, H,
                        qrmanager->mrows, qrmanager->Q.data, c_idx, qrmanager->ldq,
                        memspace->workspace_double.data,
                        memspace->workspace_double.size[0]);
                    model_xgemm_e(mNull_tmp, mNull_tmp, qrmanager->mrows,
                        qrmanager->Q.data, c_idx, qrmanager->ldq,
                        memspace->workspace_double.data, b_ldw,
                        cholmanager->FMat.data, cholmanager->ldm);
                }
                else if (alwaysPositiveDef) {
                    b_ldw = memspace->workspace_double.size[0];
                    model_xgemm(objective->nvar, mNull_tmp, objective->nvar, H,
                        objective->nvar, qrmanager->Q.data, c_idx, qrmanager->ldq,
                        memspace->workspace_double.data,
                        memspace->workspace_double.size[0]);
                    for (A_maxDiag_idx = 0; A_maxDiag_idx < mNull_tmp; A_maxDiag_idx++) {
                        for (LD_diagOffset = objective->nvar; LD_diagOffset <
                            qrmanager->mrows; LD_diagOffset++) {
                            memspace->workspace_double.data[LD_diagOffset +
                                memspace->workspace_double.size[0] * A_maxDiag_idx] =
                                qrmanager->Q.data[LD_diagOffset + qrmanager->Q.size[0] *
                                (A_maxDiag_idx + qrmanager->ncols)] * objective->beta;
                        }
                    }

                    model_xgemm_e(mNull_tmp, mNull_tmp, qrmanager->mrows,
                        qrmanager->Q.data, c_idx, qrmanager->ldq,
                        memspace->workspace_double.data, b_ldw,
                        cholmanager->FMat.data, cholmanager->ldm);
                }

                if (alwaysPositiveDef) {
                    cholmanager->ndims = mNull_tmp;
                    b_size[0] = cholmanager->FMat.size[0];
                    b_size[1] = cholmanager->FMat.size[1];
                    A_maxDiag_idx = cholmanager->FMat.size[0] * cholmanager->FMat.size[1];
                    if (0 <= A_maxDiag_idx - 1) {
                        std::memcpy(&model_B.b_data_c[0], &cholmanager->FMat.data[0],
                            A_maxDiag_idx * sizeof(real_T));
                    }

                    LD_diagOffset = model_xpotrf(mNull_tmp, model_B.b_data_c,
                        cholmanager->ldm);
                    cholmanager->FMat.size[0] = b_size[0];
                    cholmanager->FMat.size[1] = b_size[1];
                    A_maxDiag_idx = b_size[0] * b_size[1];
                    if (0 <= A_maxDiag_idx - 1) {
                        std::memcpy(&cholmanager->FMat.data[0], &model_B.b_data_c[0],
                            A_maxDiag_idx * sizeof(real_T));
                    }

                    cholmanager->info = LD_diagOffset;
                }
                else {
                    b_ldw = cholmanager->ldm + 1;
                    cholmanager->ndims = mNull_tmp;
                    A_maxDiag_idx = model_ixamax_p(mNull_tmp, cholmanager->FMat.data,
                        cholmanager->ldm + 1) - 1;
                    b_c = std::abs(cholmanager->FMat.data[cholmanager->ldm * A_maxDiag_idx
                        + A_maxDiag_idx]) * 2.2204460492503131E-16;
                    if (b_c > 0.0) {
                        cholmanager->regTol_ = b_c;
                    }
                    else {
                        cholmanager->regTol_ = 0.0;
                    }

                    if (mNull_tmp > 128) {
                        A_maxDiag_idx = 0;
                        exitg1 = false;
                        while ((!exitg1) && (A_maxDiag_idx < mNull_tmp)) {
                            LD_diagOffset = b_ldw * A_maxDiag_idx + 1;
                            order = mNull_tmp - A_maxDiag_idx;
                            if (A_maxDiag_idx + 48 <= mNull_tmp) {
                                model_partialColLDL3_(cholmanager, LD_diagOffset, order);
                                A_maxDiag_idx += 48;
                            }
                            else {
                                model_fullColLDL2_(cholmanager, LD_diagOffset, order);
                                exitg1 = true;
                            }
                        }
                    }
                    else {
                        model_fullColLDL2_(cholmanager, 1, mNull_tmp);
                    }

                    if (cholmanager->ConvexCheck) {
                        b_ldw = 0;
                        do {
                            exitg2 = 0;
                            if (b_ldw <= mNull_tmp - 1) {
                                if (cholmanager->FMat.data[cholmanager->ldm * b_ldw + b_ldw] <=
                                    0.0) {
                                    cholmanager->info = -b_ldw - 1;
                                    exitg2 = 1;
                                }
                                else {
                                    b_ldw++;
                                }
                            }
                            else {
                                cholmanager->ConvexCheck = false;
                                exitg2 = 1;
                            }
                        } while (exitg2 == 0);
                    }
                }

                if (cholmanager->info != 0) {
                    solution->state = -6;
                }
                else {
                    b_ldw = qrmanager->ldq;
                    if (qrmanager->mrows != 0) {
                        for (A_maxDiag_idx = 0; A_maxDiag_idx < mNull_tmp; A_maxDiag_idx++)
                        {
                            memspace->workspace_double.data[A_maxDiag_idx] = 0.0;
                        }

                        A_maxDiag_idx = 0;
                        LD_diagOffset = (mNull_tmp - 1) * qrmanager->ldq + c_idx;
                        order = c_idx;
                        while (((b_ldw > 0) && (order <= LD_diagOffset)) || ((b_ldw < 0) &&
                            (order >= LD_diagOffset))) {
                            ix = 0;
                            b_c = 0.0;
                            e = order + nVar;
                            for (ia = order; ia <= e; ia++) {
                                b_c += qrmanager->Q.data[ia - 1] * objective->grad.data[ix];
                                ix++;
                            }

                            memspace->workspace_double.data[A_maxDiag_idx] += -b_c;
                            A_maxDiag_idx++;
                            order += b_ldw;
                        }
                    }

                    if (alwaysPositiveDef) {
                        b_rhs_size[0] = memspace->workspace_double.size[0];
                        b_rhs_size[1] = memspace->workspace_double.size[1];
                        A_maxDiag_idx = memspace->workspace_double.size[0] *
                            memspace->workspace_double.size[1];
                        if (0 <= A_maxDiag_idx - 1) {
                            std::memcpy(&model_B.b_rhs_data[0],
                                &memspace->workspace_double.data[0], A_maxDiag_idx *
                                sizeof(real_T));
                        }

                        if (cholmanager->ndims != 0) {
                            for (nVar = 0; nVar < cholmanager->ndims; nVar++) {
                                b_ldw = nVar * cholmanager->ldm;
                                b_c = model_B.b_rhs_data[nVar];
                                for (A_maxDiag_idx = 0; A_maxDiag_idx < nVar; A_maxDiag_idx++) {
                                    b_c -= cholmanager->FMat.data[b_ldw + A_maxDiag_idx] *
                                        model_B.b_rhs_data[A_maxDiag_idx];
                                }

                                model_B.b_rhs_data[nVar] = b_c / cholmanager->FMat.data[b_ldw +
                                    nVar];
                            }
                        }

                        model_xtrsv(cholmanager->ndims, cholmanager->FMat.data,
                            cholmanager->ldm, model_B.b_rhs_data);
                    }
                    else {
                        nVar = cholmanager->ndims - 1;
                        b_rhs_size[0] = memspace->workspace_double.size[0];
                        b_rhs_size[1] = memspace->workspace_double.size[1];
                        A_maxDiag_idx = memspace->workspace_double.size[0] *
                            memspace->workspace_double.size[1];
                        if (0 <= A_maxDiag_idx - 1) {
                            std::memcpy(&model_B.b_rhs_data[0],
                                &memspace->workspace_double.data[0], A_maxDiag_idx *
                                sizeof(real_T));
                        }

                        if (cholmanager->ndims != 0) {
                            for (b_ldw = 0; b_ldw <= nVar; b_ldw++) {
                                A_maxDiag_idx = b_ldw * cholmanager->ldm + b_ldw;
                                LD_diagOffset = nVar - b_ldw;
                                for (order = 1; order - 1 < LD_diagOffset; order++) {
                                    ix = b_ldw + order;
                                    model_B.b_rhs_data[ix] -= model_B.b_rhs_data[b_ldw] *
                                        cholmanager->FMat.data[A_maxDiag_idx + order];
                                }
                            }
                        }

                        for (b_ldw = 0; b_ldw <= nVar; b_ldw++) {
                            model_B.b_rhs_data[b_ldw] /= cholmanager->FMat.data
                                [cholmanager->ldm * b_ldw + b_ldw];
                        }

                        if (cholmanager->ndims != 0) {
                            for (nVar = cholmanager->ndims - 1; nVar + 1 > 0; nVar--) {
                                b_ldw = nVar * cholmanager->ldm;
                                b_c = model_B.b_rhs_data[nVar];
                                for (A_maxDiag_idx = cholmanager->ndims; A_maxDiag_idx >= nVar +
                                    2; A_maxDiag_idx--) {
                                    b_c -= cholmanager->FMat.data[(b_ldw + A_maxDiag_idx) - 1] *
                                        model_B.b_rhs_data[A_maxDiag_idx - 1];
                                }

                                model_B.b_rhs_data[nVar] = b_c;
                            }
                        }
                    }

                    memspace->workspace_double.size[0] = b_rhs_size[0];
                    memspace->workspace_double.size[1] = b_rhs_size[1];
                    A_maxDiag_idx = b_rhs_size[0] * b_rhs_size[1];
                    if (0 <= A_maxDiag_idx - 1) {
                        std::memcpy(&memspace->workspace_double.data[0],
                            &model_B.b_rhs_data[0], A_maxDiag_idx * sizeof(real_T));
                    }

                    model_xgemv_i4wks12voz(qrmanager->mrows, mNull_tmp, qrmanager->Q.data,
                        c_idx, qrmanager->ldq, model_B.b_rhs_data, solution->searchDir.data);
                }
            }
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_xnrm2_f(int32_T n, const real_T x_data[])
{
    real_T absxk;
    real_T scale;
    real_T t;
    real_T y;
    int32_T k;
    y = 0.0;
    if (n >= 1) {
        if (n == 1) {
            y = std::abs(x_data[0]);
        }
        else {
            scale = 3.3121686421112381E-170;
            for (k = 0; k < n; k++) {
                absxk = std::abs(x_data[k]);
                if (absxk > scale) {
                    t = scale / absxk;
                    y = y * t * t + 1.0;
                    scale = absxk;
                }
                else {
                    t = absxk / scale;
                    y += t * t;
                }
            }

            y = scale * std::sqrt(y);
        }
    }

    return y;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_xgemv_i4wks12vozf(int32_T m, int32_T n, const real_T
    A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
    real_T c;
    int32_T b;
    int32_T b_c;
    int32_T b_iy;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    for (b_iy = 0; b_iy < n; b_iy++) {
        y_data[b_iy] = -y_data[b_iy];
    }

    b_iy = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
        ix = 0;
        c = 0.0;
        b = (iac + m) - 1;
        for (ia = iac; ia <= b; ia++) {
            c += A_data[ia - 1] * x_data[ix];
            ix++;
        }

        y_data[b_iy] += c;
        b_iy++;
        iac += lda;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_feasibleratiotest(const real_T solution_xstar_data[],
    const real_T solution_searchDir_data[], real_T workspace_data[], const int32_T
    workspace_size[2], int32_T workingset_nVar, int32_T workingset_ldA, const
    real_T workingset_Aineq_data[], const real_T workingset_bineq_data[], const
    real_T workingset_lb_data[], const real_T workingset_ub_data[], const int32_T
    workingset_indexLB_data[], const int32_T workingset_indexUB_data[], const
    int32_T workingset_sizes[5], const int32_T workingset_isActiveIdx[6], const
    boolean_T workingset_isActiveConstr_data[], const int32_T workingset_nWConstr
    [5], boolean_T isPhaseOne, real_T* alpha, boolean_T* newBlocking, int32_T
    * constrType, int32_T* constrIdx)
{
    real_T alphaTemp;
    real_T denomTol;
    real_T phaseOneCorrectionP;
    real_T phaseOneCorrectionX;
    real_T pk_corrected;
    real_T ratio;
    int32_T b;
    int32_T b_iy;
    int32_T ia;
    int32_T iac;
    int32_T ix;
    int32_T iyend;
    int32_T ldw;
    int32_T totalIneq;
    totalIneq = workingset_sizes[2] - 1;
    *alpha = 1.0E+30;
    *newBlocking = false;
    *constrType = 0;
    *constrIdx = 0;
    denomTol = 2.2204460492503131E-13 * model_xnrm2_f(workingset_nVar,
        solution_searchDir_data);
    if (workingset_nWConstr[2] < workingset_sizes[2]) {
        for (ldw = 0; ldw <= totalIneq; ldw++) {
            workspace_data[ldw] = workingset_bineq_data[ldw];
        }

        model_xgemv_i4wks12vozf(workingset_nVar, workingset_sizes[2],
            workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
        ldw = workspace_size[0];
        iyend = workspace_size[0] + workingset_sizes[2];
        for (b_iy = workspace_size[0]; b_iy < iyend; b_iy++) {
            workspace_data[b_iy] = 0.0;
        }

        iyend = workspace_size[0];
        b_iy = (workingset_sizes[2] - 1) * workingset_ldA + 1;
        iac = 1;
        while (((workingset_ldA > 0) && (iac <= b_iy)) || ((workingset_ldA < 0) &&
            (iac >= b_iy))) {
            ix = 0;
            alphaTemp = 0.0;
            b = (iac + workingset_nVar) - 1;
            for (ia = iac; ia <= b; ia++) {
                alphaTemp += workingset_Aineq_data[ia - 1] * solution_searchDir_data[ix];
                ix++;
            }

            workspace_data[iyend] += alphaTemp;
            iyend++;
            iac += workingset_ldA;
        }

        for (iyend = 0; iyend <= totalIneq; iyend++) {
            b_iy = ldw + iyend;
            if ((workspace_data[b_iy] > denomTol) && (!workingset_isActiveConstr_data
                [(workingset_isActiveIdx[2] + iyend) - 1])) {
                alphaTemp = std::abs(workspace_data[iyend]);
                phaseOneCorrectionX = 1.0E-6 - workspace_data[iyend];
                if ((alphaTemp < phaseOneCorrectionX) || rtIsNaN(phaseOneCorrectionX)) {
                    phaseOneCorrectionX = alphaTemp;
                }

                alphaTemp = phaseOneCorrectionX / workspace_data[b_iy];
                if (alphaTemp < *alpha) {
                    *alpha = alphaTemp;
                    *constrType = 3;
                    *constrIdx = iyend + 1;
                    *newBlocking = true;
                }
            }
        }
    }

    if (workingset_nWConstr[3] < workingset_sizes[3]) {
        phaseOneCorrectionX = solution_xstar_data[workingset_nVar - 1] *
            static_cast<real_T>(isPhaseOne);
        phaseOneCorrectionP = solution_searchDir_data[workingset_nVar - 1] *
            static_cast<real_T>(isPhaseOne);
        for (totalIneq = 0; totalIneq <= workingset_sizes[3] - 2; totalIneq++) {
            pk_corrected = -solution_searchDir_data[workingset_indexLB_data[totalIneq]
                - 1] - phaseOneCorrectionP;
            if ((pk_corrected > denomTol) && (!workingset_isActiveConstr_data
                [(workingset_isActiveIdx[3] + totalIneq) - 1])) {
                ratio = (-solution_xstar_data[workingset_indexLB_data[totalIneq] - 1] -
                    workingset_lb_data[workingset_indexLB_data[totalIneq] - 1]) -
                    phaseOneCorrectionX;
                alphaTemp = std::abs(ratio);
                if ((!(alphaTemp < 1.0E-6 - ratio)) && (!rtIsNaN(1.0E-6 - ratio))) {
                    alphaTemp = 1.0E-6 - ratio;
                }

                alphaTemp /= pk_corrected;
                if (alphaTemp < *alpha) {
                    *alpha = alphaTemp;
                    *constrType = 4;
                    *constrIdx = totalIneq + 1;
                    *newBlocking = true;
                }
            }
        }

        totalIneq = workingset_indexLB_data[workingset_sizes[3] - 1] - 1;
        phaseOneCorrectionX = -solution_searchDir_data[totalIneq];
        if ((phaseOneCorrectionX > denomTol) && (!workingset_isActiveConstr_data
            [(workingset_isActiveIdx[3] + workingset_sizes[3]) - 2])) {
            ratio = -solution_xstar_data[totalIneq] - workingset_lb_data[totalIneq];
            alphaTemp = std::abs(ratio);
            if ((!(alphaTemp < 1.0E-6 - ratio)) && (!rtIsNaN(1.0E-6 - ratio))) {
                alphaTemp = 1.0E-6 - ratio;
            }

            alphaTemp /= phaseOneCorrectionX;
            if (alphaTemp < *alpha) {
                *alpha = alphaTemp;
                *constrType = 4;
                *constrIdx = workingset_sizes[3];
                *newBlocking = true;
            }
        }
    }

    if (workingset_nWConstr[4] < workingset_sizes[4]) {
        phaseOneCorrectionX = solution_xstar_data[workingset_nVar - 1] *
            static_cast<real_T>(isPhaseOne);
        phaseOneCorrectionP = solution_searchDir_data[workingset_nVar - 1] *
            static_cast<real_T>(isPhaseOne);
        for (totalIneq = 0; totalIneq < workingset_sizes[4]; totalIneq++) {
            pk_corrected = solution_searchDir_data[workingset_indexUB_data[totalIneq]
                - 1] - phaseOneCorrectionP;
            if ((pk_corrected > denomTol) && (!workingset_isActiveConstr_data
                [(workingset_isActiveIdx[4] + totalIneq) - 1])) {
                ratio = (solution_xstar_data[workingset_indexUB_data[totalIneq] - 1] -
                    workingset_ub_data[workingset_indexUB_data[totalIneq] - 1]) -
                    phaseOneCorrectionX;
                alphaTemp = std::abs(ratio);
                if ((!(alphaTemp < 1.0E-6 - ratio)) && (!rtIsNaN(1.0E-6 - ratio))) {
                    alphaTemp = 1.0E-6 - ratio;
                }

                alphaTemp /= pk_corrected;
                if (alphaTemp < *alpha) {
                    *alpha = alphaTemp;
                    *constrType = 5;
                    *constrIdx = totalIneq + 1;
                    *newBlocking = true;
                }
            }
        }
    }

    if (!isPhaseOne) {
        *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
        if (!(*alpha < 1.0)) {
            *alpha = 1.0;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_checkUnboundedOrIllPosed
(s_4PJjBY6NtHkFemjansM2s_model_T* solution, const
    s_Nj0wGC8l1bxAgJt7zANBsB_mode_T* objective)
{
    if (objective->objtype == 5) {
        if (model_xnrm2_f(objective->nvar, solution->searchDir.data) > 100.0 *
            static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
            solution->state = 3;
        }
        else {
            solution->state = 4;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::mode_addBoundToActiveSetMatrix_
(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj, int32_T TYPE, int32_T idx_local)
{
    int32_T colOffset;
    int32_T idx;
    int32_T idx_bnd_local;
    obj->nWConstr[TYPE - 1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
    if (TYPE == 5) {
        idx_bnd_local = obj->indexUB.data[idx_local - 1];
        obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
    }
    else {
        idx_bnd_local = obj->indexLB.data[idx_local - 1];
        obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
    }

    for (idx = 0; idx <= idx_bnd_local - 2; idx++) {
        obj->ATwset.data[(idx + colOffset) + 1] = 0.0;
    }

    obj->ATwset.data[idx_bnd_local + colOffset] = static_cast<real_T>(TYPE == 5) *
        2.0 - 1.0;
    for (idx_bnd_local++; idx_bnd_local <= obj->nVar; idx_bnd_local++) {
        obj->ATwset.data[idx_bnd_local + colOffset] = 0.0;
    }

    switch (obj->probType) {
    case 3:
    case 2:
        break;

    default:
        obj->ATwset.data[obj->nVar + colOffset] = -1.0;
        break;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_addAineqConstr(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj,
    int32_T idx_local)
{
    int32_T iAineq0;
    int32_T iAw0;
    int32_T idx;
    obj->nWConstr[2]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 3;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAineq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    for (idx = 0; idx < obj->nVar; idx++) {
        obj->ATwset.data[iAw0 + idx] = obj->Aineq.data[iAineq0 + idx];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::mode_checkStoppingAndUpdateFval(int32_T* activeSetChangeID,
    const real_T f_data[], s_4PJjBY6NtHkFemjansM2s_model_T* solution,
    s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace, const
    s_Nj0wGC8l1bxAgJt7zANBsB_mode_T* objective, s_yK2JoCuYdmZkt0peIhHCXB_mode_T
    * workingset, s_0DR0BN84H2zTEyVrtxAC8C_mode_T* qrmanager, real_T
    options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
    updateFval)
{
    real_T b;
    real_T constrViolation_new;
    int32_T b_k;
    int32_T nVar;
    int32_T y_size_idx_0;
    boolean_T nonDegenerateWset;
    solution->iterations++;
    nVar = objective->nvar - 1;
    if ((solution->iterations >= runTimeOptions_MaxIterations) &&
        ((solution->state != 1) || (objective->objtype == 5))) {
        solution->state = 0;
    }

    if (solution->iterations - solution->iterations / 50 * 50 == 0) {
        b = model_maxConstraintViolation_ha(workingset, solution->xstar.data);
        solution->maxConstr = b;
        if (b > 1.0E-6) {
            y_size_idx_0 = solution->searchDir.size;
            if (0 <= solution->searchDir.size - 1) {
                std::memcpy(&model_B.y_data_ld[0], &solution->searchDir.data[0],
                    solution->searchDir.size * sizeof(real_T));
            }

            for (b_k = 0; b_k <= nVar; b_k++) {
                model_B.y_data_ld[b_k] = solution->xstar.data[b_k];
            }

            if (0 <= y_size_idx_0 - 1) {
                std::memcpy(&solution->searchDir.data[0], &model_B.y_data_ld[0],
                    y_size_idx_0 * sizeof(real_T));
            }

            nonDegenerateWset = model_feasibleX0ForWorkingSet
            (memspace->workspace_double.data, memspace->workspace_double.size,
                solution->searchDir.data, workingset, qrmanager);
            if ((!nonDegenerateWset) && (solution->state != 0)) {
                solution->state = -2;
            }

            *activeSetChangeID = 0;
            constrViolation_new = model_maxConstraintViolation_ha(workingset,
                solution->searchDir.data);
            if (constrViolation_new < b) {
                for (b_k = 0; b_k <= nVar; b_k++) {
                    solution->xstar.data[b_k] = solution->searchDir.data[b_k];
                }

                solution->maxConstr = constrViolation_new;
            }
        }
    }

    if ((options_ObjectiveLimit > (rtMinusInf)) && updateFval) {
        b = model_computeFval_ReuseHx(objective, memspace->workspace_double.data,
            f_data, solution->xstar.data);
        solution->fstar = b;
        if ((b < options_ObjectiveLimit) && ((solution->state != 0) ||
            (objective->objtype != 5))) {
            solution->state = 2;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_iterate(const real_T H[37249], const real_T f_data[],
    s_4PJjBY6NtHkFemjansM2s_model_T* solution, s_hLeLYpQstaGtKO7KoN11BF_mode_T
    * memspace, s_yK2JoCuYdmZkt0peIhHCXB_mode_T* workingset,
    s_0DR0BN84H2zTEyVrtxAC8C_mode_T* qrmanager, s_QpTiCKBiUSXrsbbsJa2mqG_mode_T
    * cholmanager, s_Nj0wGC8l1bxAgJt7zANBsB_mode_T* objective, const char_T
    options_SolverName[7], real_T options_StepTolerance, real_T
    options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
    real_T i;
    real_T normDelta;
    real_T s;
    real_T temp;
    int32_T c_size[2];
    int32_T TYPE;
    int32_T activeSetChangeID;
    int32_T b_ix;
    int32_T c_iy;
    int32_T exitg1;
    int32_T globalActiveConstrIdx;
    int32_T iQR0;
    int32_T ia;
    int32_T iy;
    int32_T iyend;
    int32_T j;
    int32_T nVar;
    int32_T workingIdx;
    boolean_T guard1 = false;
    boolean_T guard11 = false;
    boolean_T subProblemChanged;
    boolean_T updateFval;
    subProblemChanged = true;
    updateFval = true;
    activeSetChangeID = 0;
    TYPE = objective->objtype;
    nVar = workingset->nVar;
    globalActiveConstrIdx = 0;
    model_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
    solution->fstar = model_computeFval_ReuseHx(objective,
        memspace->workspace_double.data, f_data, solution->xstar.data);
    if (solution->iterations < runTimeOptions_MaxIterations) {
        solution->state = -5;
    }
    else {
        solution->state = 0;
    }

    for (workingIdx = 0; workingIdx < workingset->mConstrMax; workingIdx++) {
        solution->lambda.data[workingIdx] = 0.0;
    }

    do {
        exitg1 = 0;
        if (solution->state == -5) {
            guard11 = false;
            if (subProblemChanged) {
                switch (activeSetChangeID) {
                case 1:
                    workingIdx = (workingset->nActiveConstr - 1) * workingset->ldA;
                    if (qrmanager->mrows < qrmanager->ncols + 1) {
                        qrmanager->minRowCol = qrmanager->mrows;
                    }
                    else {
                        qrmanager->minRowCol = qrmanager->ncols + 1;
                    }

                    iQR0 = qrmanager->ldq * qrmanager->ncols;
                    iy = qrmanager->ldq;
                    if (qrmanager->mrows != 0) {
                        iyend = iQR0 + qrmanager->mrows;
                        for (c_iy = iQR0; c_iy < iyend; c_iy++) {
                            qrmanager->QR.data[c_iy] = 0.0;
                        }

                        iyend = (qrmanager->mrows - 1) * qrmanager->ldq + 1;
                        c_iy = 1;
                        while (((iy > 0) && (c_iy <= iyend)) || ((iy < 0) && (c_iy >= iyend)))
                        {
                            b_ix = workingIdx;
                            normDelta = 0.0;
                            j = (c_iy + qrmanager->mrows) - 1;
                            for (ia = c_iy; ia <= j; ia++) {
                                normDelta += qrmanager->Q.data[ia - 1] * workingset->
                                    ATwset.data[b_ix];
                                b_ix++;
                            }

                            qrmanager->QR.data[iQR0] += normDelta;
                            iQR0++;
                            c_iy += iy;
                        }
                    }

                    qrmanager->ncols++;
                    qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
                    for (workingIdx = qrmanager->mrows - 2; workingIdx + 2 >
                        qrmanager->ncols; workingIdx--) {
                        iQR0 = workingIdx + (qrmanager->ncols - 1) * qrmanager->ldq;
                        temp = qrmanager->QR.data[iQR0];
                        i = qrmanager->QR.data[iQR0 + 1];
                        model_xrotg(&temp, &i, &normDelta, &s);
                        qrmanager->QR.data[iQR0] = temp;
                        qrmanager->QR.data[iQR0 + 1] = i;
                        iQR0 = qrmanager->ldq * workingIdx;
                        if (qrmanager->mrows >= 1) {
                            iy = qrmanager->ldq + iQR0;
                            for (iyend = 0; iyend < qrmanager->mrows; iyend++) {
                                temp = qrmanager->Q.data[iQR0] * normDelta + qrmanager->
                                    Q.data[iy] * s;
                                qrmanager->Q.data[iy] = qrmanager->Q.data[iy] * normDelta -
                                    qrmanager->Q.data[iQR0] * s;
                                qrmanager->Q.data[iQR0] = temp;
                                iy++;
                                iQR0++;
                            }
                        }
                    }
                    break;

                case -1:
                    model_deleteColMoveEnd(qrmanager, globalActiveConstrIdx);
                    break;

                default:
                    model_factorQR_j(qrmanager, workingset->ATwset.data, nVar,
                        workingset->nActiveConstr, workingset->ldA);
                    model_computeQ_(qrmanager, qrmanager->mrows);
                    break;
                }

                model_compute_deltax(H, solution, memspace, qrmanager, cholmanager,
                    objective, model_strcmp(options_SolverName));
                if (solution->state != -5) {
                    exitg1 = 1;
                }
                else {
                    normDelta = model_xnrm2_f(nVar, solution->searchDir.data);
                    guard11 = true;
                }
            }
            else {
                iy = solution->searchDir.size;
                if (0 <= solution->searchDir.size - 1) {
                    std::memcpy(&model_B.y_data_g[0], &solution->searchDir.data[0],
                        solution->searchDir.size * sizeof(real_T));
                }

                for (workingIdx = 0; workingIdx < nVar; workingIdx++) {
                    model_B.y_data_g[workingIdx] = 0.0;
                }

                if (0 <= iy - 1) {
                    std::memcpy(&solution->searchDir.data[0], &model_B.y_data_g[0], iy *
                        sizeof(real_T));
                }

                normDelta = 0.0;
                guard11 = true;
            }

            if (guard11) {
                if ((!subProblemChanged) || (normDelta < options_StepTolerance) ||
                    (workingset->nActiveConstr >= nVar)) {
                    c_size[0] = memspace->workspace_double.size[0];
                    c_size[1] = memspace->workspace_double.size[1];
                    iQR0 = memspace->workspace_double.size[0] *
                        memspace->workspace_double.size[1];
                    if (0 <= iQR0 - 1) {
                        std::memcpy(&model_B.c_data[0], &memspace->workspace_double.data[0],
                            iQR0 * sizeof(real_T));
                    }

                    if (qrmanager->ncols > 0) {
                        normDelta = 100.0 * static_cast<real_T>(qrmanager->mrows) *
                            2.2204460492503131E-16;
                        updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
                        if (updateFval) {
                            workingIdx = qrmanager->ncols;
                            guard1 = false;
                            if (qrmanager->mrows < qrmanager->ncols) {
                                iQR0 = (qrmanager->ncols - 1) * qrmanager->ldq +
                                    qrmanager->mrows;
                                while ((workingIdx > qrmanager->mrows) && (std::abs
                                (qrmanager->QR.data[iQR0 - 1]) >= normDelta)) {
                                    workingIdx--;
                                    iQR0 -= qrmanager->ldq;
                                }

                                updateFval = (workingIdx == qrmanager->mrows);
                                if (!updateFval) {
                                }
                                else {
                                    guard1 = true;
                                }
                            }
                            else {
                                guard1 = true;
                            }

                            if (guard1) {
                                iQR0 = (workingIdx - 1) * qrmanager->ldq + workingIdx;
                                while ((workingIdx >= 1) && (std::abs(qrmanager->QR.data[iQR0 -
                                    1]) >= normDelta)) {
                                    workingIdx--;
                                    iQR0 = (iQR0 - qrmanager->ldq) - 1;
                                }

                                updateFval = (workingIdx == 0);
                            }
                        }

                        if (!updateFval) {
                            solution->state = -7;
                        }
                        else {
                            c_size[0] = memspace->workspace_double.size[0];
                            c_size[1] = memspace->workspace_double.size[1];
                            iQR0 = memspace->workspace_double.size[0] *
                                memspace->workspace_double.size[1];
                            if (0 <= iQR0 - 1) {
                                std::memcpy(&model_B.c_data[0], &memspace->
                                    workspace_double.data[0], iQR0 * sizeof(real_T));
                            }

                            model_xgemv_i4w(qrmanager->mrows, qrmanager->ncols,
                                qrmanager->Q.data, qrmanager->ldq,
                                objective->grad.data, model_B.c_data);
                            model_xtrsv(qrmanager->ncols, qrmanager->QR.data, qrmanager->ldq,
                                model_B.c_data);
                            for (workingIdx = 0; workingIdx < qrmanager->ncols; workingIdx++)
                            {
                                solution->lambda.data[workingIdx] = -model_B.c_data[workingIdx];
                            }
                        }
                    }

                    memspace->workspace_double.size[0] = c_size[0];
                    memspace->workspace_double.size[1] = c_size[1];
                    iQR0 = c_size[0] * c_size[1];
                    if (0 <= iQR0 - 1) {
                        std::memcpy(&memspace->workspace_double.data[0], &model_B.c_data[0],
                            iQR0 * sizeof(real_T));
                    }

                    if ((solution->state != -7) || (workingset->nActiveConstr > nVar)) {
                        workingIdx = 0;
                        normDelta = 0.0;
                        for (iQR0 = workingset->nWConstr[0] + workingset->nWConstr[1]; iQR0 <
                            workingset->nActiveConstr; iQR0++) {
                            if (solution->lambda.data[iQR0] < normDelta) {
                                normDelta = solution->lambda.data[iQR0];
                                workingIdx = iQR0 + 1;
                            }
                        }

                        if (workingIdx == 0) {
                            solution->state = 1;
                        }
                        else {
                            activeSetChangeID = -1;
                            globalActiveConstrIdx = workingIdx;
                            subProblemChanged = true;
                            model_removeConstr(workingset, workingIdx);
                            solution->lambda.data[workingIdx - 1] = 0.0;
                        }
                    }
                    else {
                        workingIdx = workingset->nActiveConstr;
                        activeSetChangeID = 0;
                        globalActiveConstrIdx = workingset->nActiveConstr;
                        subProblemChanged = true;
                        model_removeConstr(workingset, workingset->nActiveConstr);
                        solution->lambda.data[workingIdx - 1] = 0.0;
                    }

                    updateFval = false;
                }
                else {
                    iQR0 = memspace->workspace_double.size[0] *
                        memspace->workspace_double.size[1];
                    for (workingIdx = 0; workingIdx < iQR0; workingIdx++) {
                    }

                    model_feasibleratiotest(solution->xstar.data, solution->searchDir.data,
                        memspace->workspace_double.data, memspace->workspace_double.size,
                        workingset->nVar, workingset->ldA, workingset->Aineq.data,
                        workingset->bineq.data, workingset->lb.data, workingset->ub.data,
                        workingset->indexLB.data, workingset->indexUB.data,
                        workingset->sizes, workingset->isActiveIdx,
                        workingset->isActiveConstr.data, workingset->nWConstr, TYPE == 5,
                        &normDelta, &updateFval, &workingIdx, &iQR0);
                    if (updateFval) {
                        switch (workingIdx) {
                        case 3:
                            model_addAineqConstr(workingset, iQR0);
                            break;

                        case 4:
                            mode_addBoundToActiveSetMatrix_(workingset, 4, iQR0);
                            break;

                        default:
                            mode_addBoundToActiveSetMatrix_(workingset, 5, iQR0);
                            break;
                        }

                        activeSetChangeID = 1;
                    }
                    else {
                        model_checkUnboundedOrIllPosed(solution, objective);
                        subProblemChanged = false;
                        if (workingset->nActiveConstr == 0) {
                            solution->state = 1;
                        }
                    }

                    if ((nVar >= 1) && (!(normDelta == 0.0))) {
                        for (workingIdx = 0; workingIdx < nVar; workingIdx++) {
                            solution->xstar.data[workingIdx] += normDelta *
                                solution->searchDir.data[workingIdx];
                        }
                    }

                    model_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
                    updateFval = true;
                }

                mode_checkStoppingAndUpdateFval(&activeSetChangeID, f_data, solution,
                    memspace, objective, workingset, qrmanager, options_ObjectiveLimit,
                    runTimeOptions_MaxIterations, updateFval);
            }
        }
        else {
            if (!updateFval) {
                solution->fstar = model_computeFval_ReuseHx(objective,
                    memspace->workspace_double.data, f_data, solution->xstar.data);
            }

            exitg1 = 1;
        }
    } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_linearForm_(boolean_T obj_hasLinear, int32_T
    obj_nvar, real_T workspace_data[], const real_T H[37249], const real_T f_data[],
    const real_T x_data[])
{
    real_T c;
    int32_T b;
    int32_T b_c;
    int32_T fMultiplier;
    int32_T ia;
    int32_T iac;
    int32_T iy;
    fMultiplier = 0;
    if (obj_hasLinear) {
        for (fMultiplier = 0; fMultiplier < obj_nvar; fMultiplier++) {
            workspace_data[fMultiplier] = f_data[fMultiplier];
        }

        fMultiplier = 1;
    }

    if (obj_nvar != 0) {
        if (fMultiplier != 1) {
            for (fMultiplier = 0; fMultiplier < obj_nvar; fMultiplier++) {
                workspace_data[fMultiplier] = 0.0;
            }
        }

        fMultiplier = 0;
        b_c = (obj_nvar - 1) * obj_nvar + 1;
        iac = 1;
        while (((obj_nvar > 0) && (iac <= b_c)) || ((obj_nvar < 0) && (iac >= b_c)))
        {
            c = 0.5 * x_data[fMultiplier];
            iy = 0;
            b = (iac + obj_nvar) - 1;
            for (ia = iac; ia <= b; ia++) {
                workspace_data[iy] += H[ia - 1] * c;
                iy++;
            }

            fMultiplier++;
            iac += obj_nvar;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_computeFval(const s_Nj0wGC8l1bxAgJt7zANBsB_mode_T*
    obj, real_T workspace_data[], const real_T H[37249], const real_T f_data[],
    const real_T x_data[])
{
    real_T val;
    int32_T idx;
    switch (obj->objtype) {
    case 5:
        val = x_data[obj->nvar - 1] * obj->gammaScalar;
        break;

    case 3:
        model_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H, f_data,
            x_data);
        val = 0.0;
        if (obj->nvar >= 1) {
            for (idx = 0; idx < obj->nvar; idx++) {
                val += workspace_data[idx] * x_data[idx];
            }
        }
        break;

    default:
        model_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H, f_data,
            x_data);
        for (idx = obj->nvar; idx < obj->maxVar - 1; idx++) {
            workspace_data[idx] = 0.5 * obj->beta * x_data[idx] + obj->rho;
        }

        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
            for (idx = 0; idx <= obj->maxVar - 2; idx++) {
                val += workspace_data[idx] * x_data[idx];
            }
        }
        break;
    }

    return val;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_phaseone(const real_T H[37249], const real_T f_data[],
    s_4PJjBY6NtHkFemjansM2s_model_T* solution, s_hLeLYpQstaGtKO7KoN11BF_mode_T
    * memspace, s_yK2JoCuYdmZkt0peIhHCXB_mode_T* workingset,
    s_0DR0BN84H2zTEyVrtxAC8C_mode_T* qrmanager, s_QpTiCKBiUSXrsbbsJa2mqG_mode_T
    * cholmanager, s_Nj0wGC8l1bxAgJt7zANBsB_mode_T* objective,
    s1TgE9KstXgkd2qJxO1bF4F_model_T* options, const
    s1TgE9KstXgkd2qJxO1bF4F_model_T* runTimeOptions)
{
    int32_T PHASEONE;
    int32_T PROBTYPE_ORIG;
    int32_T mEqFixed;
    int32_T nVar_tmp;
    boolean_T exitg1;
    PROBTYPE_ORIG = workingset->probType;
    nVar_tmp = workingset->nVar;
    solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
    if (workingset->probType == 3) {
        PHASEONE = 1;
    }
    else {
        PHASEONE = 4;
    }

    model_removeAllIneqConstr(workingset);
    model_setProblemType(workingset, PHASEONE);
    objective->prev_objtype = objective->objtype;
    objective->prev_nvar = objective->nvar;
    objective->prev_hasLinear = objective->hasLinear;
    objective->objtype = 5;
    objective->nvar = nVar_tmp + 1;
    objective->gammaScalar = 1.0;
    objective->hasLinear = true;
    options->ObjectiveLimit = 1.0E-6;
    options->StepTolerance = 1.4901161193847657E-10;
    solution->fstar = model_computeFval(objective, memspace->workspace_double.data,
        H, f_data, solution->xstar.data);
    solution->state = 5;
    model_iterate(H, f_data, solution, memspace, workingset, qrmanager,
        cholmanager, objective, options->SolverName,
        options->StepTolerance, options->ObjectiveLimit,
        runTimeOptions->MaxIterations);
    if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
        workingset->sizes[3]) - 2]) {
        PHASEONE = workingset->sizes[0] + 97;
        exitg1 = false;
        while ((!exitg1) && (PHASEONE <= workingset->nActiveConstr)) {
            if ((workingset->Wid.data[PHASEONE - 1] == 4) &&
                (workingset->Wlocalidx.data[PHASEONE - 1] == workingset->sizes[3])) {
                model_removeConstr(workingset, PHASEONE);
                exitg1 = true;
            }
            else {
                PHASEONE++;
            }
        }
    }

    PHASEONE = workingset->nActiveConstr;
    mEqFixed = workingset->sizes[0] + 96;
    while ((PHASEONE > mEqFixed) && (PHASEONE > nVar_tmp)) {
        model_removeConstr(workingset, PHASEONE);
        PHASEONE--;
    }

    solution->maxConstr = solution->xstar.data[nVar_tmp];
    model_setProblemType(workingset, PROBTYPE_ORIG);
    objective->objtype = objective->prev_objtype;
    objective->nvar = objective->prev_nvar;
    objective->hasLinear = objective->prev_hasLinear;
    options->ObjectiveLimit = (rtMinusInf);
    options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_driver_n(const real_T H[37249], const real_T f_data[],
    s_4PJjBY6NtHkFemjansM2s_model_T* solution, s_hLeLYpQstaGtKO7KoN11BF_mode_T
    * memspace, s_yK2JoCuYdmZkt0peIhHCXB_mode_T* workingset,
    s_0DR0BN84H2zTEyVrtxAC8C_mode_T* qrmanager, s_QpTiCKBiUSXrsbbsJa2mqG_mode_T
    * cholmanager, s_Nj0wGC8l1bxAgJt7zANBsB_mode_T* objective,
    s1TgE9KstXgkd2qJxO1bF4F_model_T* options, s1TgE9KstXgkd2qJxO1bF4F_model_T
    * runTimeOptions)
{
    real_T b;
    int32_T b_idx;
    int32_T nVar;
    int32_T y_size_idx_0;
    boolean_T guard1 = false;
    solution->iterations = 0;
    runTimeOptions->RemainFeasible = true;
    nVar = workingset->nVar - 1;
    guard1 = false;
    if (workingset->probType == 3) {
        for (b_idx = 0; b_idx < workingset->sizes[0]; b_idx++) {
            solution->xstar.data[workingset->indexFixed.data[b_idx] - 1] =
                workingset->ub.data[workingset->indexFixed.data[b_idx] - 1];
        }

        for (b_idx = 0; b_idx < workingset->sizes[3]; b_idx++) {
            if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] + b_idx) -
                1]) {
                solution->xstar.data[workingset->indexLB.data[b_idx] - 1] =
                    -workingset->lb.data[workingset->indexLB.data[b_idx] - 1];
            }
        }

        for (b_idx = 0; b_idx < workingset->sizes[4]; b_idx++) {
            if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] + b_idx) -
                1]) {
                solution->xstar.data[workingset->indexUB.data[b_idx] - 1] =
                    workingset->ub.data[workingset->indexUB.data[b_idx] - 1];
            }
        }

        model_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
        if (solution->state < 0) {
        }
        else {
            guard1 = true;
        }
    }
    else {
        solution->state = 82;
        guard1 = true;
    }

    if (guard1) {
        solution->iterations = 0;
        b = model_maxConstraintViolation_ha(workingset, solution->xstar.data);
        solution->maxConstr = b;
        if (b > 1.0E-6) {
            model_phaseone(H, f_data, solution, memspace, workingset, qrmanager,
                cholmanager, objective, options, runTimeOptions);
            if (solution->state != 0) {
                b = model_maxConstraintViolation_ha(workingset, solution->xstar.data);
                solution->maxConstr = b;
                if (b > 1.0E-6) {
                    for (b_idx = 0; b_idx < workingset->mConstrMax; b_idx++) {
                        solution->lambda.data[b_idx] = 0.0;
                    }

                    solution->fstar = model_computeFval(objective,
                        memspace->workspace_double.data, H, f_data, solution->xstar.data);
                    solution->state = -2;
                }
                else {
                    if (b > 0.0) {
                        y_size_idx_0 = solution->searchDir.size;
                        if (0 <= solution->searchDir.size - 1) {
                            std::memcpy(&model_B.y_data_d[0], &solution->searchDir.data[0],
                                solution->searchDir.size * sizeof(real_T));
                        }

                        for (b_idx = 0; b_idx <= nVar; b_idx++) {
                            model_B.y_data_d[b_idx] = solution->xstar.data[b_idx];
                        }

                        if (0 <= y_size_idx_0 - 1) {
                            std::memcpy(&solution->searchDir.data[0], &model_B.y_data_d[0],
                                y_size_idx_0 * sizeof(real_T));
                        }

                        model_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
                        b = model_maxConstraintViolation_ha(workingset, solution->xstar.data);
                        if (b >= solution->maxConstr) {
                            solution->maxConstr = b;
                            y_size_idx_0 = solution->xstar.size;
                            if (0 <= solution->xstar.size - 1) {
                                std::memcpy(&model_B.y_data_d[0], &solution->xstar.data[0],
                                    solution->xstar.size * sizeof(real_T));
                            }

                            for (b_idx = 0; b_idx <= nVar; b_idx++) {
                                model_B.y_data_d[b_idx] = solution->searchDir.data[b_idx];
                            }

                            if (0 <= y_size_idx_0 - 1) {
                                std::memcpy(&solution->xstar.data[0], &model_B.y_data_d[0],
                                    y_size_idx_0 * sizeof(real_T));
                            }
                        }
                    }

                    model_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                        cholmanager, objective, options->SolverName,
                        options->StepTolerance, options->ObjectiveLimit,
                        runTimeOptions->MaxIterations);
                }
            }
        }
        else {
            model_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                cholmanager, objective, options->SolverName,
                options->StepTolerance, options->ObjectiveLimit,
                runTimeOptions->MaxIterations);
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_addAeqConstr(s_yK2JoCuYdmZkt0peIhHCXB_mode_T* obj,
    int32_T idx_local)
{
    int32_T b_idx;
    int32_T iAeq0;
    int32_T iAw0;
    int32_T totalEq;
    totalEq = obj->nWConstr[0] + obj->nWConstr[1];
    if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
        obj->nWConstr[1]++;
        obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
        obj->nActiveConstr++;
        obj->Wid.data[obj->nActiveConstr - 1] = 2;
        obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
        iAeq0 = (idx_local - 1) * obj->ldA;
        iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
        for (totalEq = 1; totalEq - 1 < obj->nVar; totalEq++) {
            obj->ATwset.data[(iAw0 + totalEq) - 1] = obj->Aeq.data[(iAeq0 + totalEq) -
                1];
        }

        obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
    }
    else {
        obj->nActiveConstr++;
        iAeq0 = obj->nActiveConstr - 1;
        obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[totalEq];
        obj->Wlocalidx.data[iAeq0] = obj->Wlocalidx.data[totalEq];
        for (iAw0 = 0; iAw0 < obj->nVar; iAw0++) {
            obj->ATwset.data[iAw0 + obj->ldA * iAeq0] = obj->ATwset.data[obj->ldA *
                totalEq + iAw0];
        }

        obj->bwset.data[iAeq0] = obj->bwset.data[totalEq];
        obj->nWConstr[1]++;
        obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
        obj->Wid.data[totalEq] = 2;
        obj->Wlocalidx.data[totalEq] = idx_local;
        iAeq0 = (idx_local - 1) * obj->ldA;
        iAw0 = obj->ldA * totalEq;
        for (b_idx = 1; b_idx - 1 < obj->nVar; b_idx++) {
            obj->ATwset.data[(iAw0 + b_idx) - 1] = obj->Aeq.data[(iAeq0 + b_idx) - 1];
        }

        obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
boolean_T modelModelClass::model_soc(const real_T Hessian[37249], const real_T
    grad_data[], s_4PJjBY6NtHkFemjansM2s_model_T* TrialState,
    s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace, s_yK2JoCuYdmZkt0peIhHCXB_mode_T
    * WorkingSet, s_0DR0BN84H2zTEyVrtxAC8C_mode_T* QRManager,
    s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* CholManager, s_Nj0wGC8l1bxAgJt7zANBsB_mode_T*
    QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_model_T* qpoptions)
{
    s1TgE9KstXgkd2qJxO1bF4F_model_T qpoptions_0;
    s1TgE9KstXgkd2qJxO1bF4F_model_T qpoptions_1;
    real_T oldDirIdx;
    int32_T b_ia;
    int32_T iac;
    int32_T idx_Aineq;
    int32_T idx_Aineq_tmp;
    int32_T idx_Partition;
    int32_T idx_upper;
    int32_T iy;
    int32_T mConstrMax;
    int32_T nVar;
    int32_T nWIneq_old;
    int32_T nWLower_old;
    int32_T nWUpper_old;
    boolean_T success;
    nWIneq_old = WorkingSet->nWConstr[2];
    nWLower_old = WorkingSet->nWConstr[3];
    nWUpper_old = WorkingSet->nWConstr[4];
    nVar = WorkingSet->nVar - 1;
    mConstrMax = WorkingSet->mConstrMax - 1;
    for (idx_Aineq = 0; idx_Aineq <= nVar; idx_Aineq++) {
        TrialState->xstarsqp[idx_Aineq] = TrialState->xstarsqp_old[idx_Aineq];
    }

    for (idx_Aineq = 0; idx_Aineq <= nVar; idx_Aineq++) {
        TrialState->socDirection.data[idx_Aineq] = TrialState->xstar.data[idx_Aineq];
    }

    for (idx_Aineq = 0; idx_Aineq <= mConstrMax; idx_Aineq++) {
        TrialState->lambda_old.data[idx_Aineq] = TrialState->lambda.data[idx_Aineq];
    }

    for (idx_Aineq = 0; idx_Aineq < 96; idx_Aineq++) {
        WorkingSet->beq[idx_Aineq] = -TrialState->cEq[idx_Aineq];
    }

    idx_Aineq_tmp = WorkingSet->ldA;
    iy = 0;
    idx_upper = WorkingSet->ldA * 95 + 1;
    iac = 1;
    while (((idx_Aineq_tmp > 0) && (iac <= idx_upper)) || ((idx_Aineq_tmp < 0) &&
        (iac >= idx_upper))) {
        idx_Partition = 0;
        oldDirIdx = 0.0;
        idx_Aineq = (iac + WorkingSet->nVar) - 1;
        for (b_ia = iac; b_ia <= idx_Aineq; b_ia++) {
            oldDirIdx += WorkingSet->Aeq.data[b_ia - 1] * TrialState->
                searchDir.data[idx_Partition];
            idx_Partition++;
        }

        WorkingSet->beq[iy] += oldDirIdx;
        iy++;
        iac += idx_Aineq_tmp;
    }

    for (idx_Aineq = 0; idx_Aineq < 96; idx_Aineq++) {
        WorkingSet->bwset.data[WorkingSet->sizes[0] + idx_Aineq] = WorkingSet->
            beq[idx_Aineq];
    }

    for (idx_Aineq = 0; idx_Aineq < WorkingSet->sizes[2]; idx_Aineq++) {
        WorkingSet->bineq.data[idx_Aineq] = -TrialState->cIneq.data[idx_Aineq];
    }

    idx_Aineq_tmp = WorkingSet->ldA;
    iy = 0;
    idx_upper = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA + 1;
    iac = 1;
    while (((idx_Aineq_tmp > 0) && (iac <= idx_upper)) || ((idx_Aineq_tmp < 0) &&
        (iac >= idx_upper))) {
        idx_Partition = 0;
        oldDirIdx = 0.0;
        idx_Aineq = (iac + WorkingSet->nVar) - 1;
        for (b_ia = iac; b_ia <= idx_Aineq; b_ia++) {
            oldDirIdx += WorkingSet->Aineq.data[b_ia - 1] * TrialState->
                searchDir.data[idx_Partition];
            idx_Partition++;
        }

        WorkingSet->bineq.data[iy] += oldDirIdx;
        iy++;
        iac += idx_Aineq_tmp;
    }

    idx_Aineq = 1;
    iy = WorkingSet->sizes[2] + 1;
    idx_upper = (WorkingSet->sizes[2] + WorkingSet->sizes[3]) + 1;
    for (iac = WorkingSet->isActiveIdx[2] - 1; iac < WorkingSet->nActiveConstr;
        iac++) {
        switch (WorkingSet->Wid.data[iac]) {
        case 3:
            idx_Partition = idx_Aineq;
            idx_Aineq++;
            WorkingSet->bwset.data[iac] = WorkingSet->bineq.data
                [WorkingSet->Wlocalidx.data[iac] - 1];
            break;

        case 4:
            idx_Partition = iy;
            iy++;
            break;

        default:
            idx_Partition = idx_upper;
            idx_upper++;
            break;
        }

        TrialState->workingset_old.data[idx_Partition - 1] =
            WorkingSet->Wlocalidx.data[iac];
    }

    for (idx_Aineq = 0; idx_Aineq <= nVar; idx_Aineq++) {
        TrialState->xstar.data[idx_Aineq] = TrialState->xstarsqp[idx_Aineq];
    }

    qpoptions_0 = *qpoptions;
    qpoptions_1 = *qpoptions;
    model_driver_n(Hessian, grad_data, TrialState, memspace, WorkingSet, QRManager,
        CholManager, QPObjective, &qpoptions_0, &qpoptions_1);
    while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
        [WorkingSet->mEqRemoved - 1] >= 1)) {
        model_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
            [WorkingSet->mEqRemoved - 1]);
        WorkingSet->mEqRemoved--;
    }

    for (idx_Aineq = 0; idx_Aineq <= nVar; idx_Aineq++) {
        oldDirIdx = TrialState->socDirection.data[idx_Aineq];
        TrialState->socDirection.data[idx_Aineq] = TrialState->xstar.data[idx_Aineq]
            - TrialState->socDirection.data[idx_Aineq];
        TrialState->xstar.data[idx_Aineq] = oldDirIdx;
    }

    success = (model_xnrm2_f(nVar + 1, TrialState->socDirection.data) <=
        model_xnrm2_f(nVar + 1, TrialState->xstar.data) * 2.0);
    idx_Aineq = WorkingSet->sizes[2];
    iy = WorkingSet->sizes[3];
    for (nVar = 0; nVar < 96; nVar++) {
        WorkingSet->beq[nVar] = -TrialState->cEq[nVar];
    }

    for (nVar = 0; nVar < 96; nVar++) {
        WorkingSet->bwset.data[WorkingSet->sizes[0] + nVar] = WorkingSet->beq[nVar];
    }

    for (nVar = 0; nVar < idx_Aineq; nVar++) {
        WorkingSet->bineq.data[nVar] = -TrialState->cIneq.data[nVar];
    }

    if (!success) {
        model_removeAllIneqConstr(WorkingSet);
        for (nVar = 0; nVar < nWIneq_old; nVar++) {
            model_addAineqConstr(WorkingSet, TrialState->workingset_old.data[nVar]);
        }

        for (nWIneq_old = 0; nWIneq_old < nWLower_old; nWIneq_old++) {
            mode_addBoundToActiveSetMatrix_(WorkingSet, 4,
                TrialState->workingset_old.data[nWIneq_old + idx_Aineq]);
        }

        for (nWLower_old = 0; nWLower_old < nWUpper_old; nWLower_old++) {
            mode_addBoundToActiveSetMatrix_(WorkingSet, 5,
                TrialState->workingset_old.data[(nWLower_old + idx_Aineq) + iy]);
        }

        for (nWUpper_old = 0; nWUpper_old <= mConstrMax; nWUpper_old++) {
            TrialState->lambda.data[nWUpper_old] = TrialState->
                lambda_old.data[nWUpper_old];
        }
    }
    else {
        model_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
            WorkingSet->sizes, WorkingSet->isActiveIdx,
            WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
            memspace->workspace_double.data);
    }

    return success;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_normal(const real_T Hessian[37249], const real_T
    grad_data[], s_4PJjBY6NtHkFemjansM2s_model_T* TrialState,
    sG8JZ69axY52WWR6RKyApQC_model_T* MeritFunction,
    s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace, s_yK2JoCuYdmZkt0peIhHCXB_mode_T
    * WorkingSet, s_0DR0BN84H2zTEyVrtxAC8C_mode_T* QRManager,
    s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* CholManager, s_Nj0wGC8l1bxAgJt7zANBsB_mode_T*
    QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_model_T* qpoptions)
{
    s1TgE9KstXgkd2qJxO1bF4F_model_T qpoptions_0;
    s1TgE9KstXgkd2qJxO1bF4F_model_T qpoptions_1;
    real_T constrViolationEq;
    real_T constrViolationIneq;
    real_T penaltyParamTrial;
    int32_T k;
    boolean_T nonlinEqRemoved;
    qpoptions_0 = *qpoptions;
    qpoptions_1 = *qpoptions;
    model_driver_n(Hessian, grad_data, TrialState, memspace, WorkingSet, QRManager,
        CholManager, QPObjective, &qpoptions_0, &qpoptions_1);
    if (TrialState->state > 0) {
        penaltyParamTrial = MeritFunction->penaltyParam;
        constrViolationEq = 0.0;
        for (k = 0; k < 96; k++) {
            constrViolationEq += std::abs(TrialState->cEq[k]);
        }

        constrViolationIneq = 0.0;
        for (k = 0; k < WorkingSet->sizes[2]; k++) {
            if (TrialState->cIneq.data[k] > 0.0) {
                constrViolationIneq += TrialState->cIneq.data[k];
            }
        }

        constrViolationEq += constrViolationIneq;
        constrViolationIneq = MeritFunction->linearizedConstrViol;
        MeritFunction->linearizedConstrViol = 0.0;
        constrViolationIneq += constrViolationEq;
        if ((constrViolationIneq > 2.2204460492503131E-16) && (TrialState->fstar >
            0.0)) {
            if (TrialState->sqpFval == 0.0) {
                penaltyParamTrial = 1.0;
            }
            else {
                penaltyParamTrial = 1.5;
            }

            penaltyParamTrial = penaltyParamTrial * TrialState->fstar /
                constrViolationIneq;
        }

        if (penaltyParamTrial < MeritFunction->penaltyParam) {
            MeritFunction->phi = penaltyParamTrial * constrViolationEq +
                TrialState->sqpFval;
            if (((MeritFunction->initConstrViolationEq +
                MeritFunction->initConstrViolationIneq) * penaltyParamTrial +
                MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
                (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
                MeritFunction->nPenaltyDecreases++;
                if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
                {
                    MeritFunction->threshold *= 10.0;
                }

                if (penaltyParamTrial > 1.0E-10) {
                    MeritFunction->penaltyParam = penaltyParamTrial;
                }
                else {
                    MeritFunction->penaltyParam = 1.0E-10;
                }
            }
            else {
                MeritFunction->phi = MeritFunction->penaltyParam * constrViolationEq +
                    TrialState->sqpFval;
            }
        }
        else {
            if (!(penaltyParamTrial > 1.0E-10)) {
                penaltyParamTrial = 1.0E-10;
            }

            MeritFunction->penaltyParam = penaltyParamTrial;
            MeritFunction->phi = penaltyParamTrial * constrViolationEq +
                TrialState->sqpFval;
        }

        penaltyParamTrial = TrialState->fstar - MeritFunction->penaltyParam *
            constrViolationEq;
        if (penaltyParamTrial < 0.0) {
            MeritFunction->phiPrimePlus = penaltyParamTrial;
        }
        else {
            MeritFunction->phiPrimePlus = 0.0;
        }
    }

    model_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
        WorkingSet->sizes, WorkingSet->isActiveIdx,
        WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
        memspace->workspace_double.data);
    nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
    while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
        [WorkingSet->mEqRemoved - 1] >= 1)) {
        model_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
            [WorkingSet->mEqRemoved - 1]);
        WorkingSet->mEqRemoved--;
    }

    if (nonlinEqRemoved) {
        for (k = 0; k < 96; k++) {
            WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + k] = k + 1;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_relaxed(const real_T Hessian[37249], const real_T
    grad_data[], s_4PJjBY6NtHkFemjansM2s_model_T* TrialState,
    sG8JZ69axY52WWR6RKyApQC_model_T* MeritFunction,
    s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace, s_yK2JoCuYdmZkt0peIhHCXB_mode_T
    * WorkingSet, s_0DR0BN84H2zTEyVrtxAC8C_mode_T* QRManager,
    s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* CholManager, s_Nj0wGC8l1bxAgJt7zANBsB_mode_T*
    QPObjective, s1TgE9KstXgkd2qJxO1bF4F_model_T* qpoptions)
{
    s1TgE9KstXgkd2qJxO1bF4F_model_T qpoptions_0;
    s1TgE9KstXgkd2qJxO1bF4F_model_T qpoptions_1;
    real_T beta;
    real_T qpfvalLinearExcess;
    real_T qpfvalQuadExcess;
    real_T rho;
    real_T y;
    int32_T b_mIneq;
    int32_T mFiniteLB;
    int32_T mIneq;
    int32_T mLBOrig;
    int32_T nVarMax;
    int32_T nVarOrig;
    int32_T temp;
    int32_T tf_tmp;
    boolean_T b_tf;
    boolean_T tf;
    nVarOrig = WorkingSet->nVar;
    nVarMax = WorkingSet->nVarMax;
    mIneq = WorkingSet->sizes[2];
    beta = 0.0;
    for (temp = 0; temp < nVarOrig; temp++) {
        beta += Hessian[193 * temp + temp];
    }

    beta /= static_cast<real_T>(WorkingSet->nVar);
    if (TrialState->sqpIterations <= 1) {
        rho = std::abs(grad_data[model_ixamax(QPObjective->nvar, grad_data) - 1]);
        if ((1.0 > rho) || rtIsNaN(rho)) {
            rho = 1.0;
        }

        rho *= 100.0;
    }
    else {
        rho = std::abs(TrialState->lambdasqp.data[model_ixamax(WorkingSet->mConstr,
            TrialState->lambdasqp.data) - 1]);
    }

    QPObjective->hasLinear = true;
    QPObjective->nvar = WorkingSet->nVar;
    QPObjective->objtype = 4;
    QPObjective->beta = beta;
    QPObjective->rho = rho;
    model_setProblemType(WorkingSet, 2);
    model_B.b_WorkingSet = *WorkingSet;
    b_mIneq = WorkingSet->sizes[2] - 1;
    mLBOrig = (WorkingSet->sizes[3] - WorkingSet->sizes[2]) - 191;
    for (temp = 0; temp <= b_mIneq; temp++) {
        memspace->workspace_double.data[temp] = WorkingSet->bineq.data[temp];
    }

    model_xgemv_i4wks12vozf(nVarOrig, WorkingSet->sizes[2], WorkingSet->Aineq.data,
        WorkingSet->ldA, TrialState->xstar.data, memspace->workspace_double.data);
    for (temp = 0; temp <= b_mIneq; temp++) {
        TrialState->xstar.data[nVarOrig + temp] = static_cast<real_T>
            (memspace->workspace_double.data[temp] > 0.0) *
            memspace->workspace_double.data[temp];
        if (memspace->workspace_double.data[temp] <= 1.0E-6) {
            mode_addBoundToActiveSetMatrix_(&model_B.b_WorkingSet, 4, mLBOrig + temp);
        }
    }

    std::memcpy(&memspace->workspace_double.data[0], &model_B.b_WorkingSet.beq[0],
        96U * sizeof(real_T));
    model_xgemv_i4wks12vozf(nVarOrig, 96, model_B.b_WorkingSet.Aeq.data,
        model_B.b_WorkingSet.ldA, TrialState->xstar.data,
        memspace->workspace_double.data);
    for (temp = 0; temp < 96; temp++) {
        mFiniteLB = b_mIneq + temp;
        if (memspace->workspace_double.data[temp] <= 0.0) {
            TrialState->xstar.data[(nVarOrig + mFiniteLB) + 1] = 0.0;
            TrialState->xstar.data[(nVarOrig + mFiniteLB) + 97] =
                -memspace->workspace_double.data[temp];
            mode_addBoundToActiveSetMatrix_(&model_B.b_WorkingSet, 4, (mLBOrig +
                mFiniteLB) + 1);
            if (memspace->workspace_double.data[temp] >= -1.0E-6) {
                mode_addBoundToActiveSetMatrix_(&model_B.b_WorkingSet, 4, (mLBOrig +
                    mFiniteLB) + 97);
            }
        }
        else {
            tf_tmp = nVarOrig + mFiniteLB;
            TrialState->xstar.data[tf_tmp + 1] = memspace->workspace_double.data[temp];
            TrialState->xstar.data[tf_tmp + 97] = 0.0;
            mode_addBoundToActiveSetMatrix_(&model_B.b_WorkingSet, 4, (mLBOrig +
                mFiniteLB) + 97);
            if (memspace->workspace_double.data[temp] <= 1.0E-6) {
                mode_addBoundToActiveSetMatrix_(&model_B.b_WorkingSet, 4, (mLBOrig +
                    mFiniteLB) + 1);
            }
        }
    }

    temp = qpoptions->MaxIterations;
    qpoptions->MaxIterations = (qpoptions->MaxIterations +
        model_B.b_WorkingSet.nVar) - nVarOrig;
    qpoptions_0 = *qpoptions;
    qpoptions_1 = *qpoptions;
    model_driver_n(Hessian, grad_data, TrialState, memspace, &model_B.b_WorkingSet,
        QRManager, CholManager, QPObjective, &qpoptions_0, &qpoptions_1);
    qpoptions->MaxIterations = temp;
    mLBOrig = model_B.b_WorkingSet.sizes[2] - 1;
    mFiniteLB = model_B.b_WorkingSet.sizes[3] - 193;
    temp = 0;
    for (b_mIneq = 0; b_mIneq < 96; b_mIneq++) {
        tf_tmp = (model_B.b_WorkingSet.isActiveIdx[3] + mFiniteLB) + b_mIneq;
        tf = model_B.b_WorkingSet.isActiveConstr.data[tf_tmp];
        b_tf = model_B.b_WorkingSet.isActiveConstr.data[tf_tmp + 96];
        memspace->workspace_int.data[b_mIneq] = tf;
        memspace->workspace_int.data[b_mIneq + 96] = b_tf;
        temp = (temp + tf) + b_tf;
    }

    for (b_mIneq = 0; b_mIneq <= mLBOrig; b_mIneq++) {
        tf = model_B.b_WorkingSet.isActiveConstr.data
            [(((model_B.b_WorkingSet.isActiveIdx[3] + mFiniteLB) - mLBOrig) + b_mIneq)
            - 1];
        memspace->workspace_int.data[b_mIneq + 192] = tf;
        temp += tf;
    }

    if (TrialState->state != -6) {
        b_mIneq = (model_B.b_WorkingSet.nVarMax - nVarOrig) - 1;
        qpfvalLinearExcess = 0.0;
        qpfvalQuadExcess = 0.0;
        if (b_mIneq >= 1) {
            mLBOrig = nVarOrig + b_mIneq;
            for (mFiniteLB = nVarOrig; mFiniteLB < mLBOrig; mFiniteLB++) {
                qpfvalLinearExcess += std::abs(TrialState->xstar.data[mFiniteLB]);
            }

            mLBOrig = nVarOrig;
            mFiniteLB = nVarOrig;
            for (tf_tmp = 0; tf_tmp < b_mIneq; tf_tmp++) {
                qpfvalQuadExcess += TrialState->xstar.data[mLBOrig] *
                    TrialState->xstar.data[mFiniteLB];
                mLBOrig++;
                mFiniteLB++;
            }
        }

        beta = (TrialState->fstar - rho * qpfvalLinearExcess) - beta / 2.0 *
            qpfvalQuadExcess;
        b_mIneq = (nVarMax - nVarOrig) - 1;
        rho = MeritFunction->penaltyParam;
        qpfvalLinearExcess = 0.0;
        for (nVarMax = 0; nVarMax < 96; nVarMax++) {
            qpfvalLinearExcess += std::abs(TrialState->cEq[nVarMax]);
        }

        qpfvalQuadExcess = 0.0;
        for (nVarMax = 0; nVarMax < mIneq; nVarMax++) {
            if (TrialState->cIneq.data[nVarMax] > 0.0) {
                qpfvalQuadExcess += TrialState->cIneq.data[nVarMax];
            }
        }

        qpfvalLinearExcess += qpfvalQuadExcess;
        qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
        y = 0.0;
        if (b_mIneq >= 1) {
            mIneq = nVarOrig + b_mIneq;
            for (nVarMax = nVarOrig; nVarMax < mIneq; nVarMax++) {
                y += std::abs(TrialState->xstar.data[nVarMax]);
            }
        }

        MeritFunction->linearizedConstrViol = y;
        qpfvalQuadExcess = (qpfvalLinearExcess + qpfvalQuadExcess) - y;
        if ((qpfvalQuadExcess > 2.2204460492503131E-16) && (beta > 0.0)) {
            if (TrialState->sqpFval == 0.0) {
                rho = 1.0;
            }
            else {
                rho = 1.5;
            }

            rho = rho * beta / qpfvalQuadExcess;
        }

        if (rho < MeritFunction->penaltyParam) {
            MeritFunction->phi = rho * qpfvalLinearExcess + TrialState->sqpFval;
            if (((MeritFunction->initConstrViolationEq +
                MeritFunction->initConstrViolationIneq) * rho +
                MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
                (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
                MeritFunction->nPenaltyDecreases++;
                if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
                {
                    MeritFunction->threshold *= 10.0;
                }

                if (rho > 1.0E-10) {
                    MeritFunction->penaltyParam = rho;
                }
                else {
                    MeritFunction->penaltyParam = 1.0E-10;
                }
            }
            else {
                MeritFunction->phi = MeritFunction->penaltyParam * qpfvalLinearExcess +
                    TrialState->sqpFval;
            }
        }
        else {
            if (!(rho > 1.0E-10)) {
                rho = 1.0E-10;
            }

            MeritFunction->penaltyParam = rho;
            MeritFunction->phi = rho * qpfvalLinearExcess + TrialState->sqpFval;
        }

        beta -= MeritFunction->penaltyParam * qpfvalLinearExcess;
        if (beta < 0.0) {
            MeritFunction->phiPrimePlus = beta;
        }
        else {
            MeritFunction->phiPrimePlus = 0.0;
        }

        b_mIneq = model_B.b_WorkingSet.isActiveIdx[1] - 1;
        for (nVarMax = 0; nVarMax < 96; nVarMax++) {
            if (memspace->workspace_int.data[nVarMax] != 0) {
                if (memspace->workspace_int.data[nVarMax + 96] != 0) {
                    tf = true;
                }
                else {
                    tf = false;
                }
            }
            else {
                tf = false;
            }

            mIneq = b_mIneq + nVarMax;
            TrialState->lambda.data[mIneq] *= static_cast<real_T>(tf);
        }

        for (mIneq = model_B.b_WorkingSet.isActiveIdx[2] - 1; mIneq <
            model_B.b_WorkingSet.nActiveConstr; mIneq++) {
            if (model_B.b_WorkingSet.Wid.data[mIneq] == 3) {
                TrialState->lambda.data[mIneq] *= static_cast<real_T>
                    (memspace->
                        workspace_int.data[model_B.b_WorkingSet.Wlocalidx.data[mIneq] + 191]);
            }
        }
    }

    *WorkingSet = model_B.b_WorkingSet;
    mIneq = (model_B.b_WorkingSet.sizes[3] - model_B.b_WorkingSet.sizes[2]) - 192;
    nVarMax = model_B.b_WorkingSet.nActiveConstr;
    while ((nVarMax > model_B.b_WorkingSet.sizes[0] + 96) && (temp > 0)) {
        if ((WorkingSet->Wid.data[nVarMax - 1] == 4) && (WorkingSet->
            Wlocalidx.data[nVarMax - 1] > mIneq)) {
            beta = TrialState->lambda.data[WorkingSet->nActiveConstr - 1];
            TrialState->lambda.data[WorkingSet->nActiveConstr - 1] = 0.0;
            TrialState->lambda.data[nVarMax - 1] = beta;
            model_removeConstr(WorkingSet, nVarMax);
            temp--;
        }

        nVarMax--;
    }

    QPObjective->hasLinear = true;
    QPObjective->nvar = nVarOrig;
    QPObjective->objtype = 3;
    model_setProblemType(WorkingSet, 3);
    model_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
        WorkingSet->sizes, WorkingSet->isActiveIdx,
        WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
        memspace->workspace_double.data);
}

// Function for MATLAB Function: '<S4>/NLMPC'
boolean_T modelModelClass::model_step_n(int32_T* STEP_TYPE, real_T Hessian[37249],
    const real_T lb[193], const real_T ub[193], s_4PJjBY6NtHkFemjansM2s_model_T
    * TrialState, sG8JZ69axY52WWR6RKyApQC_model_T* MeritFunction,
    s_hLeLYpQstaGtKO7KoN11BF_mode_T* memspace, s_yK2JoCuYdmZkt0peIhHCXB_mode_T
    * WorkingSet, s_0DR0BN84H2zTEyVrtxAC8C_mode_T* QRManager,
    s_QpTiCKBiUSXrsbbsJa2mqG_mode_T* CholManager, s_Nj0wGC8l1bxAgJt7zANBsB_mode_T*
    QPObjective, s1TgE9KstXgkd2qJxO1bF4F_model_T* qpoptions)
{
    real_T nrmDirInf;
    real_T nrmGradInf;
    real_T u1;
    int32_T b_k;
    int32_T exitg1;
    int32_T iH0;
    int32_T nVar;
    int32_T y_size_idx_0;
    boolean_T checkBoundViolation;
    boolean_T guard1 = false;
    boolean_T stepSuccess;
    stepSuccess = true;
    checkBoundViolation = true;
    nVar = WorkingSet->nVar - 1;
    if (*STEP_TYPE != 3) {
        for (b_k = 0; b_k <= nVar; b_k++) {
            TrialState->xstar.data[b_k] = TrialState->xstarsqp[b_k];
        }
    }
    else {
        y_size_idx_0 = TrialState->searchDir.size;
        if (0 <= TrialState->searchDir.size - 1) {
            std::memcpy(&model_B.y_data_j[0], &TrialState->searchDir.data[0],
                TrialState->searchDir.size * sizeof(real_T));
        }

        for (b_k = 0; b_k <= nVar; b_k++) {
            model_B.y_data_j[b_k] = TrialState->xstar.data[b_k];
        }

        if (0 <= y_size_idx_0 - 1) {
            std::memcpy(&TrialState->searchDir.data[0], &model_B.y_data_j[0],
                y_size_idx_0 * sizeof(real_T));
        }
    }

    do {
        exitg1 = 0;
        guard1 = false;
        switch (*STEP_TYPE) {
        case 1:
            model_normal(Hessian, TrialState->grad.data, TrialState, MeritFunction,
                memspace, WorkingSet, QRManager, CholManager, QPObjective,
                qpoptions);
            if ((TrialState->state <= 0) && (TrialState->state != -6)) {
                *STEP_TYPE = 2;
            }
            else {
                y_size_idx_0 = TrialState->delta_x.size;
                if (0 <= TrialState->delta_x.size - 1) {
                    std::memcpy(&model_B.y_data_j[0], &TrialState->delta_x.data[0],
                        TrialState->delta_x.size * sizeof(real_T));
                }

                for (b_k = 0; b_k <= nVar; b_k++) {
                    model_B.y_data_j[b_k] = TrialState->xstar.data[b_k];
                }

                if (0 <= y_size_idx_0 - 1) {
                    std::memcpy(&TrialState->delta_x.data[0], &model_B.y_data_j[0],
                        y_size_idx_0 * sizeof(real_T));
                }

                guard1 = true;
            }
            break;

        case 2:
            model_removeAllIneqConstr(WorkingSet);
            for (b_k = 0; b_k < WorkingSet->sizes[3]; b_k++) {
                nrmGradInf = WorkingSet->lb.data[WorkingSet->indexLB.data[b_k] - 1];
                if (-TrialState->xstar.data[WorkingSet->indexLB.data[b_k] - 1] >
                    nrmGradInf) {
                    if (rtIsInf(ub[WorkingSet->indexLB.data[b_k] - 1])) {
                        TrialState->xstar.data[WorkingSet->indexLB.data[b_k] - 1] =
                            -nrmGradInf + std::abs(nrmGradInf);
                    }
                    else {
                        TrialState->xstar.data[WorkingSet->indexLB.data[b_k] - 1] =
                            (WorkingSet->ub.data[WorkingSet->indexLB.data[b_k] - 1] -
                                nrmGradInf) / 2.0;
                    }
                }
            }

            for (b_k = 0; b_k < WorkingSet->sizes[4]; b_k++) {
                nrmGradInf = WorkingSet->ub.data[WorkingSet->indexUB.data[b_k] - 1];
                if (TrialState->xstar.data[WorkingSet->indexUB.data[b_k] - 1] >
                    nrmGradInf) {
                    if (rtIsInf(lb[WorkingSet->indexUB.data[b_k] - 1])) {
                        TrialState->xstar.data[WorkingSet->indexUB.data[b_k] - 1] =
                            nrmGradInf - std::abs(nrmGradInf);
                    }
                    else {
                        TrialState->xstar.data[WorkingSet->indexUB.data[b_k] - 1] =
                            (nrmGradInf - WorkingSet->lb.data[WorkingSet->indexUB.data[b_k] -
                                1]) / 2.0;
                    }
                }
            }

            model_relaxed(Hessian, TrialState->grad.data, TrialState, MeritFunction,
                memspace, WorkingSet, QRManager, CholManager, QPObjective,
                qpoptions);
            y_size_idx_0 = TrialState->delta_x.size;
            if (0 <= TrialState->delta_x.size - 1) {
                std::memcpy(&model_B.y_data_j[0], &TrialState->delta_x.data[0],
                    TrialState->delta_x.size * sizeof(real_T));
            }

            for (b_k = 0; b_k <= nVar; b_k++) {
                model_B.y_data_j[b_k] = TrialState->xstar.data[b_k];
            }

            if (0 <= y_size_idx_0 - 1) {
                std::memcpy(&TrialState->delta_x.data[0], &model_B.y_data_j[0],
                    y_size_idx_0 * sizeof(real_T));
            }

            guard1 = true;
            break;

        default:
            stepSuccess = model_soc(Hessian, TrialState->grad.data, TrialState,
                memspace, WorkingSet, QRManager, CholManager, QPObjective, qpoptions);
            checkBoundViolation = stepSuccess;
            if (stepSuccess && (TrialState->state != -6)) {
                for (b_k = 0; b_k <= nVar; b_k++) {
                    TrialState->delta_x.data[b_k] = TrialState->xstar.data[b_k] +
                        TrialState->socDirection.data[b_k];
                }
            }

            guard1 = true;
            break;
        }

        if (guard1) {
            if (TrialState->state != -6) {
                exitg1 = 1;
            }
            else {
                nrmGradInf = 0.0;
                nrmDirInf = 1.0;
                for (b_k = 0; b_k < 193; b_k++) {
                    u1 = std::abs(TrialState->grad.data[b_k]);
                    if ((!(nrmGradInf > u1)) && (!rtIsNaN(u1))) {
                        nrmGradInf = u1;
                    }

                    u1 = std::abs(TrialState->xstar.data[b_k]);
                    if ((!(nrmDirInf > u1)) && (!rtIsNaN(u1))) {
                        nrmDirInf = u1;
                    }
                }

                nrmGradInf /= nrmDirInf;
                if ((2.2204460492503131E-16 > nrmGradInf) || rtIsNaN(nrmGradInf)) {
                    nrmGradInf = 2.2204460492503131E-16;
                }

                for (b_k = 0; b_k < 193; b_k++) {
                    iH0 = 193 * b_k;
                    for (y_size_idx_0 = 0; y_size_idx_0 < b_k; y_size_idx_0++) {
                        Hessian[iH0 + y_size_idx_0] = 0.0;
                    }

                    Hessian[b_k + 193 * b_k] = nrmGradInf;
                    iH0 += b_k;
                    for (y_size_idx_0 = 0; y_size_idx_0 <= 191 - b_k; y_size_idx_0++) {
                        Hessian[(iH0 + y_size_idx_0) + 1] = 0.0;
                    }
                }
            }
        }
    } while (exitg1 == 0);

    if (checkBoundViolation) {
        for (nVar = 0; nVar < WorkingSet->sizes[3]; nVar++) {
            nrmGradInf = TrialState->delta_x.data[WorkingSet->indexLB.data[nVar] - 1];
            nrmDirInf = (TrialState->xstarsqp[WorkingSet->indexLB.data[nVar] - 1] +
                nrmGradInf) - lb[WorkingSet->indexLB.data[nVar] - 1];
            if (nrmDirInf < 0.0) {
                TrialState->delta_x.data[WorkingSet->indexLB.data[nVar] - 1] =
                    nrmGradInf - nrmDirInf;
                TrialState->xstar.data[WorkingSet->indexLB.data[nVar] - 1] -= nrmDirInf;
            }
        }

        for (nVar = 0; nVar < WorkingSet->sizes[4]; nVar++) {
            nrmGradInf = TrialState->delta_x.data[WorkingSet->indexUB.data[nVar] - 1];
            nrmDirInf = (ub[WorkingSet->indexUB.data[nVar] - 1] - TrialState->
                xstarsqp[WorkingSet->indexUB.data[nVar] - 1]) - nrmGradInf;
            if (nrmDirInf < 0.0) {
                TrialState->delta_x.data[WorkingSet->indexUB.data[nVar] - 1] =
                    nrmGradInf + nrmDirInf;
                TrialState->xstar.data[WorkingSet->indexUB.data[nVar] - 1] += nrmDirInf;
            }
        }
    }

    return stepSuccess;
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_quadraticObjective_p(real_T runtimedata_lastMV,
    const real_T runtimedata_ref[96], const real_T X[97], const real_T U[97],
    real_T e)
{
    real_T f;
    real_T wtUerr;
    real_T yerr;
    int32_T i;
    f = 0.0;
    for (i = 0; i < 96; i++) {
        yerr = X[i + 1] - runtimedata_ref[i];
        f += yerr * yerr;
        if (i + 1 == 1) {
            yerr = U[i] - runtimedata_lastMV;
        }
        else {
            yerr = U[i] - U[i - 1];
        }

        wtUerr = 0.0 * U[i];
        f += wtUerr * wtUerr;
        yerr *= 0.1;
        f += yerr * yerr;
    }

    f += 100000.0 * e * e;
    return f;
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_anon_pa(real_T runtimedata_x, real_T
    runtimedata_lastMV, const real_T runtimedata_ref[96], const real_T z[193])
{
    real_T Umv[97];
    real_T X[97];
    real_T e;
    real_T varargout_1;
    std::memset(&X[0], 0, 97U * sizeof(real_T));
    std::memset(&Umv[0], 0, 97U * sizeof(real_T));
    model_znlmpc_getDecisions(z, &X[1], &Umv[0], &e);
    X[0] = runtimedata_x;
    Umv[96] = Umv[95];
    varargout_1 = model_quadraticObjective_p(runtimedata_lastMV, runtimedata_ref,
        X, Umv, e) + model_customCostFunction(Umv);
    return varargout_1;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_computeObjective_(real_T
    obj_objfun_workspace_runtimedat, real_T obj_objfun_workspace_runtimed_0, const
    real_T obj_objfun_workspace_runtimed_1[96], const real_T x[193], real_T* fval,
    int32_T* status)
{
    *fval = model_anon_pa(obj_objfun_workspace_runtimedat,
        obj_objfun_workspace_runtimed_0,
        obj_objfun_workspace_runtimed_1, x);
    *status = 1;
    if (rtIsInf(*fval) || rtIsNaN(*fval)) {
        if (rtIsNaN(*fval)) {
            *status = -3;
        }
        else if (*fval < 0.0) {
            *status = -1;
        }
        else {
            *status = -2;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_stateEvolution_h(const real_T X[97], const real_T U
    [97], real_T parameters_f1, real_T parameters_f2, real_T c[96])
{
    int32_T i;
    for (i = 0; i < 96; i++) {
        c[i] = 0.0;
        c[i] = X[i + 1] - ((parameters_f2 * 900.0 / 200000.0 * U[i] * 100.0 -
            (parameters_f2 - parameters_f1 / 100.0 * 200.0 / 900.0) *
            900.0 / 200000.0 * 100.0) + X[i]);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_outputBounds_e(const real_T runtimedata_OutputMin[96],
    const real_T runtimedata_OutputMax[96], const real_T X[97], real_T e, real_T
    c_data[], int32_T c_size[2])
{
    real_T b_c[192];
    real_T b_c_data[192];
    real_T b_c_tmp;
    int32_T b_i;
    int32_T i;
    uint8_T b_data[192];
    boolean_T b_b[96];
    boolean_T icf[2];
    boolean_T exitg1;
    boolean_T y;
    for (i = 0; i < 96; i++) {
        b_b[i] = rtIsInf(runtimedata_OutputMin[i]);
    }

    y = true;
    i = 0;
    exitg1 = false;
    while ((!exitg1) && (i <= 95)) {
        if (!b_b[i]) {
            y = false;
            exitg1 = true;
        }
        else {
            i++;
        }
    }

    if (y) {
        for (i = 0; i < 96; i++) {
            b_b[i] = rtIsInf(runtimedata_OutputMax[i]);
        }

        y = true;
        i = 0;
        exitg1 = false;
        while ((!exitg1) && (i <= 95)) {
            if (!b_b[i]) {
                y = false;
                exitg1 = true;
            }
            else {
                i++;
            }
        }
    }
    else {
        y = false;
    }

    if (y) {
        c_size[0] = 0;
        c_size[1] = 0;
    }
    else {
        std::memset(&b_c[0], 0, 192U * sizeof(real_T));
        icf[0] = true;
        icf[1] = true;
        if (model_any(icf)) {
            for (i = 0; i < 96; i++) {
                b_c_tmp = X[i + 1];
                b_c[i << 1] = (0.0 - e) - b_c_tmp;
                b_c[(i << 1) + 1] = (b_c_tmp - 100.0) - e;
            }
        }

        i = 0;
        for (b_i = 0; b_i < 192; b_i++) {
            i++;
        }

        b_i = i;
        for (i = 0; i < 192; i++) {
            b_data[i] = static_cast<uint8_T>(i + 1);
        }

        for (i = 0; i < b_i; i++) {
            b_c_data[i] = b_c[b_data[i] - 1];
        }

        c_size[0] = b_i;
        c_size[1] = 1;
        if (0 <= b_i - 1) {
            std::memcpy(&c_data[0], &b_c_data[0], b_i * sizeof(real_T));
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_anon_pau(real_T runtimedata_x, const real_T
    runtimedata_OutputMin[96], const real_T runtimedata_OutputMax[96], real_T
    runtimedata_Parameters_f1, real_T runtimedata_Parameters_f2, const real_T z
    [193], real_T varargout_1_data[], int32_T* varargout_1_size, real_T
    varargout_2[96])
{
    real_T c_data[192];
    real_T U[97];
    real_T X[97];
    real_T e;
    int32_T c_size[2];
    int32_T c;
    int32_T i;
    model_znlmpc_getXUe(z, runtimedata_x, X, U, &e);
    model_stateEvolution_h(X, U, runtimedata_Parameters_f1,
        runtimedata_Parameters_f2, varargout_2);
    model_outputBounds_e(runtimedata_OutputMin, runtimedata_OutputMax, X, e,
        c_data, c_size);
    if ((c_size[0] != 0) && (c_size[1] != 0)) {
        c = c_size[0];
    }
    else {
        c = 0;
    }

    *varargout_1_size = c + 194;
    if ((c_size[0] != 0) && (c_size[1] != 0)) {
        c = c_size[0];
    }
    else {
        c = 0;
    }

    if (0 <= c - 1) {
        std::memcpy(&varargout_1_data[0], &c_data[0], c * sizeof(real_T));
    }

    if ((c_size[0] != 0) && (c_size[1] != 0)) {
        c = c_size[0];
    }
    else {
        c = 0;
    }

    for (i = 0; i < 97; i++) {
        varargout_1_data[i + c] = 10.0 - X[i];
    }

    if ((c_size[0] != 0) && (c_size[1] != 0)) {
        c = c_size[0];
    }
    else {
        c = 0;
    }

    for (i = 0; i < 97; i++) {
        varargout_1_data[(i + c) + 97] = X[i] - 100.0;
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
int32_T modelModelClass::model_computeConstraints_(real_T
    obj_nonlcon_workspace_runtimeda, const real_T obj_nonlcon_workspace_runtime_0
    [96], const real_T obj_nonlcon_workspace_runtime_1[96], real_T
    obj_nonlcon_workspace_runtime_2, real_T obj_nonlcon_workspace_runtime_3,
    int32_T obj_mCineq, const real_T x[193], real_T Cineq_workspace_data[],
    int32_T ineq0, real_T Ceq_workspace[96])
{
    real_T varargout_1_data[386];
    real_T varargout_2[96];
    int32_T ineqEnd;
    int32_T status;
    int32_T tmp;
    int32_T varargout_1_size;
    ineqEnd = (ineq0 + obj_mCineq) - 2;
    model_anon_pau(obj_nonlcon_workspace_runtimeda,
        obj_nonlcon_workspace_runtime_0,
        obj_nonlcon_workspace_runtime_1,
        obj_nonlcon_workspace_runtime_2,
        obj_nonlcon_workspace_runtime_3, x, varargout_1_data,
        &varargout_1_size, varargout_2);
    if (ineq0 > ineqEnd + 1) {
        varargout_1_size = -1;
        ineqEnd = -1;
    }
    else {
        varargout_1_size = ineq0 - 2;
    }

    tmp = ineqEnd - varargout_1_size;
    for (ineqEnd = 0; ineqEnd < tmp; ineqEnd++) {
        Cineq_workspace_data[(varargout_1_size + ineqEnd) + 1] =
            varargout_1_data[ineqEnd];
    }

    std::memcpy(&Ceq_workspace[0], &varargout_2[0], 96U * sizeof(real_T));
    status = model_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data, ineq0);
    if (status == 1) {
        status = model_checkVectorNonFinite_h(Ceq_workspace);
    }

    return status;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_evalObjAndConstr(real_T
    obj_objfun_workspace_runtimedat, real_T obj_objfun_workspace_runtimed_0, const
    real_T obj_objfun_workspace_runtimed_1[96], real_T
    obj_nonlcon_workspace_runtimeda, const real_T obj_nonlcon_workspace_runtime_0
    [96], const real_T obj_nonlcon_workspace_runtime_1[96], real_T
    obj_nonlcon_workspace_runtime_2, real_T obj_nonlcon_workspace_runtime_3,
    int32_T obj_mCineq, const real_T x[193], real_T Cineq_workspace_data[],
    int32_T ineq0, real_T Ceq_workspace[96], real_T* fval, int32_T* status)
{
    model_computeObjective_(obj_objfun_workspace_runtimedat,
        obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1, x, fval,
        status);
    if (*status == 1) {
        *status = model_computeConstraints_(obj_nonlcon_workspace_runtimeda,
            obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
            obj_nonlcon_workspace_runtime_2, obj_nonlcon_workspace_runtime_3,
            obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace);
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_computeLinearResiduals(const real_T x[193], int32_T
    nVar, real_T workspaceIneq_data[], const int32_T* workspaceIneq_size, int32_T
    mLinIneq, const real_T AineqT_data[], const real_T bineq_data[], int32_T ldAi)
{
    real_T c;
    int32_T b;
    int32_T ia;
    int32_T ix;
    int32_T k;
    int32_T loop_ub;
    int32_T y_size_idx_0;
    if (mLinIneq > 0) {
        if (0 <= *workspaceIneq_size - 1) {
            std::memcpy(&model_B.y_data_dh[0], &workspaceIneq_data[0],
                *workspaceIneq_size * sizeof(real_T));
        }

        for (k = 0; k < mLinIneq; k++) {
            model_B.y_data_dh[k] = bineq_data[k];
        }

        if (0 <= *workspaceIneq_size - 1) {
            std::memcpy(&workspaceIneq_data[0], &model_B.y_data_dh[0],
                *workspaceIneq_size * sizeof(real_T));
        }

        for (k = 0; k < mLinIneq; k++) {
            workspaceIneq_data[k] = -workspaceIneq_data[k];
        }

        k = 0;
        loop_ub = (mLinIneq - 1) * ldAi + 1;
        y_size_idx_0 = 1;
        while (((ldAi > 0) && (y_size_idx_0 <= loop_ub)) || ((ldAi < 0) &&
            (y_size_idx_0 >= loop_ub))) {
            ix = 0;
            c = 0.0;
            b = (y_size_idx_0 + nVar) - 1;
            for (ia = y_size_idx_0; ia <= b; ia++) {
                c += AineqT_data[ia - 1] * x[ix];
                ix++;
            }

            workspaceIneq_data[k] += c;
            k++;
            y_size_idx_0 += ldAi;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
real_T modelModelClass::model_computeMeritFcn(real_T obj_penaltyParam, real_T
    fval, const real_T Cineq_workspace_data[], int32_T mIneq, const real_T
    Ceq_workspace[96], boolean_T evalWellDefined)
{
    real_T constrViolationEq;
    real_T constrViolationIneq;
    real_T val;
    int32_T k;
    if (evalWellDefined) {
        constrViolationEq = 0.0;
        for (k = 0; k < 96; k++) {
            constrViolationEq += std::abs(Ceq_workspace[k]);
        }

        constrViolationIneq = 0.0;
        for (k = 0; k < mIneq; k++) {
            if (Cineq_workspace_data[k] > 0.0) {
                constrViolationIneq += Cineq_workspace_data[k];
            }
        }

        val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
    }
    else {
        val = (rtInf);
    }

    return val;
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_linesearch(boolean_T* evalWellDefined, const real_T
    bineq_data[], int32_T WorkingSet_nVar, int32_T WorkingSet_ldA, const real_T
    WorkingSet_Aineq_data[], s_4PJjBY6NtHkFemjansM2s_model_T* TrialState, real_T
    MeritFunction_penaltyParam, real_T MeritFunction_phi, real_T
    MeritFunction_phiPrimePlus, real_T MeritFunction_phiFullStep, real_T
    FcnEvaluator_objfun_workspace_r, real_T FcnEvaluator_objfun_workspace_0, const
    real_T FcnEvaluator_objfun_workspace_1[96], const
    s_iMrk9lYy4GSFeZiuOV2cXH_mode_T* FcnEvaluator_nonlcon_workspace_, int32_T
    FcnEvaluator_mCineq, boolean_T socTaken, real_T* alpha, int32_T* exitflag)
{
    real_T phi_alpha;
    int32_T exitg1;
    int32_T loop_ub;
    int32_T mLinIneq;
    int32_T y_size_idx_0;
    boolean_T exitg2;
    boolean_T tooSmallX;
    mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
    *alpha = 1.0;
    *exitflag = 1;
    phi_alpha = MeritFunction_phiFullStep;
    y_size_idx_0 = TrialState->searchDir.size;
    if (0 <= TrialState->searchDir.size - 1) {
        std::memcpy(&model_B.y_data_dy[0], &TrialState->searchDir.data[0],
            TrialState->searchDir.size * sizeof(real_T));
    }

    for (loop_ub = 0; loop_ub < WorkingSet_nVar; loop_ub++) {
        model_B.y_data_dy[loop_ub] = TrialState->delta_x.data[loop_ub];
    }

    if (0 <= y_size_idx_0 - 1) {
        std::memcpy(&TrialState->searchDir.data[0], &model_B.y_data_dy[0],
            y_size_idx_0 * sizeof(real_T));
    }

    do {
        exitg1 = 0;
        if (TrialState->FunctionEvaluations < 19300) {
            if ((*evalWellDefined) && (phi_alpha <= *alpha * 0.0001 *
                MeritFunction_phiPrimePlus + MeritFunction_phi)) {
                exitg1 = 1;
            }
            else {
                *alpha *= 0.7;
                for (loop_ub = 0; loop_ub < WorkingSet_nVar; loop_ub++) {
                    TrialState->delta_x.data[loop_ub] = *alpha * TrialState->
                        xstar.data[loop_ub];
                }

                if (socTaken) {
                    phi_alpha = *alpha * *alpha;
                    if ((WorkingSet_nVar >= 1) && (!(phi_alpha == 0.0))) {
                        for (loop_ub = 0; loop_ub < WorkingSet_nVar; loop_ub++) {
                            TrialState->delta_x.data[loop_ub] += phi_alpha *
                                TrialState->socDirection.data[loop_ub];
                        }
                    }
                }

                tooSmallX = true;
                loop_ub = 0;
                exitg2 = false;
                while ((!exitg2) && (loop_ub <= WorkingSet_nVar - 1)) {
                    phi_alpha = std::abs(TrialState->xstarsqp[loop_ub]);
                    if ((1.0 > phi_alpha) || rtIsNaN(phi_alpha)) {
                        phi_alpha = 1.0;
                    }

                    if (1.0E-6 * phi_alpha <= std::abs(TrialState->delta_x.data[loop_ub]))
                    {
                        tooSmallX = false;
                        exitg2 = true;
                    }
                    else {
                        loop_ub++;
                    }
                }

                if (tooSmallX) {
                    *exitflag = -2;
                    exitg1 = 1;
                }
                else {
                    for (loop_ub = 0; loop_ub < WorkingSet_nVar; loop_ub++) {
                        TrialState->xstarsqp[loop_ub] = TrialState->xstarsqp_old[loop_ub] +
                            TrialState->delta_x.data[loop_ub];
                    }

                    model_evalObjAndConstr(FcnEvaluator_objfun_workspace_r,
                        FcnEvaluator_objfun_workspace_0, FcnEvaluator_objfun_workspace_1,
                        FcnEvaluator_nonlcon_workspace_->x,
                        FcnEvaluator_nonlcon_workspace_->OutputMin,
                        FcnEvaluator_nonlcon_workspace_->OutputMax,
                        FcnEvaluator_nonlcon_workspace_->Parameters.f1,
                        FcnEvaluator_nonlcon_workspace_->Parameters.f2, FcnEvaluator_mCineq,
                        TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
                        TrialState->cEq, &phi_alpha, &loop_ub);
                    TrialState->sqpFval = phi_alpha;
                    model_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
                        TrialState->cIneq.data, &TrialState->cIneq.size, mLinIneq,
                        WorkingSet_Aineq_data, bineq_data, WorkingSet_ldA);
                    TrialState->FunctionEvaluations++;
                    *evalWellDefined = (loop_ub == 1);
                    phi_alpha = model_computeMeritFcn(MeritFunction_penaltyParam,
                        phi_alpha, TrialState->cIneq.data, TrialState->mIneq,
                        TrialState->cEq, *evalWellDefined);
                }
            }
        }
        else {
            *exitflag = 0;
            exitg1 = 1;
        }
    } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_driver(const real_T bineq_data[], const real_T lb
    [193], const real_T ub[193], s_4PJjBY6NtHkFemjansM2s_model_T* TrialState,
    sG8JZ69axY52WWR6RKyApQC_model_T* MeritFunction, const
    s_AtPELYDMULP2d8RTGmYMLB_mode_T* FcnEvaluator, s_hLeLYpQstaGtKO7KoN11BF_mode_T
    * memspace, s_yK2JoCuYdmZkt0peIhHCXB_mode_T* WorkingSet,
    s_0DR0BN84H2zTEyVrtxAC8C_mode_T* QRManager, s_QpTiCKBiUSXrsbbsJa2mqG_mode_T
    * CholManager, s_Nj0wGC8l1bxAgJt7zANBsB_mode_T* QPObjective, const int32_T
    * fscales_lineq_constraint_size, const int32_T* fscales_cineq_constraint_size,
    real_T Hessian[37249])
{
    s1TgE9KstXgkd2qJxO1bF4F_model_T expl_temp;
    s7RdrPWkr8UPAUyTdDJkLaG_model_T Flags;
    real_T optimRelativeFactor;
    real_T p;
    int32_T b_c;
    int32_T b_ia;
    int32_T b_iy;
    int32_T ia;
    int32_T idxLambdaNonlinIneq;
    int32_T ix;
    int32_T iy;
    int32_T loop_ub;
    int32_T mConstr_tmp;
    int32_T mFixed;
    int32_T mIneq;
    int32_T mLB;
    int32_T mUB;
    int32_T u1;
    boolean_T isFeasible;
    boolean_T o;
    static const int8_T u[37249] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1 };

    static const char_T t[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

    s1TgE9KstXgkd2qJxO1bF4F_model_T expl_temp_0;
    real_T TrialState_0[193];
    int32_T mLinIneq_tmp_tmp;
    int32_T nVar_tmp_tmp;
    for (idxLambdaNonlinIneq = 0; idxLambdaNonlinIneq < 37249; idxLambdaNonlinIneq
        ++) {
        Hessian[idxLambdaNonlinIneq] = u[idxLambdaNonlinIneq];
    }

    nVar_tmp_tmp = WorkingSet->nVar;
    mFixed = WorkingSet->sizes[0];
    mIneq = WorkingSet->sizes[2];
    mLB = WorkingSet->sizes[3];
    mUB = WorkingSet->sizes[4];
    mConstr_tmp = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) +
        WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 95;
    mLinIneq_tmp_tmp = WorkingSet->sizes[2] - TrialState->mNonlinIneq;
    u1 = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) +
        (WorkingSet->sizes[0] << 1);
    if (WorkingSet->nVar > u1) {
        u1 = WorkingSet->nVar;
    }

    u1 *= 10;
    TrialState->steplength = 1.0;
    Flags.fevalOK = true;
    Flags.stepAccepted = false;
    Flags.failedLineSearch = false;
    Flags.stepType = 1;
    model_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
        WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data,
        WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
        WorkingSet->sizes[0], WorkingSet->indexLB.data,
        WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdasqp.data);
    optimRelativeFactor = std::abs(TrialState->grad.data[model_ixamax
    (WorkingSet->nVar, TrialState->grad.data) - 1]);
    if ((1.0 > optimRelativeFactor) || rtIsNaN(optimRelativeFactor)) {
        optimRelativeFactor = 1.0;
    }

    if (rtIsInf(optimRelativeFactor)) {
        optimRelativeFactor = 1.0;
    }

    MeritFunction->nlpPrimalFeasError = model_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
        TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
        WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
        WorkingSet->indexUB.data, WorkingSet->sizes[4], ub);
    if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
    (MeritFunction->nlpPrimalFeasError)) {
        MeritFunction->feasRelativeFactor = 1.0;
    }
    else {
        MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
    }

    if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
    (MeritFunction->nlpPrimalFeasError)) {
        p = 1.0;
    }
    else {
        p = MeritFunction->nlpPrimalFeasError;
    }

    isFeasible = (MeritFunction->nlpPrimalFeasError <= 1.0E-6 * p);
    model_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data, &o, &p);
    Flags.gradOK = o;
    MeritFunction->nlpDualFeasError = p;
    if (!o) {
        Flags.done = true;
        if (isFeasible) {
            TrialState->sqpExitFlag = 2;
        }
        else {
            TrialState->sqpExitFlag = -2;
        }
    }
    else {
        MeritFunction->nlpComplError = 0.0;
        if (p > 0.0) {
            MeritFunction->firstOrderOpt = p;
        }
        else {
            MeritFunction->firstOrderOpt = 0.0;
        }

        for (idxLambdaNonlinIneq = 0; idxLambdaNonlinIneq <= mConstr_tmp;
            idxLambdaNonlinIneq++) {
            TrialState->lambdasqp_old.data[idxLambdaNonlinIneq] =
                TrialState->lambdasqp.data[idxLambdaNonlinIneq];
        }

        if (isFeasible && (p <= 1.0E-6 * optimRelativeFactor)) {
            Flags.done = true;
            TrialState->sqpExitFlag = 1;
        }
        else {
            Flags.done = false;
            if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
                Flags.done = true;
                TrialState->sqpExitFlag = -3;
            }
        }
    }

    model_saveJacobian(TrialState, WorkingSet->nVar, WorkingSet->sizes[2],
        WorkingSet->Aineq.data, TrialState->iNonIneq0,
        WorkingSet->Aeq.data, WorkingSet->ldA);
    model_saveState(TrialState);
    if (!Flags.done) {
        TrialState->sqpIterations = 1;
    }

    while (!Flags.done) {
        if ((!Flags.stepAccepted) && (!Flags.failedLineSearch)) {
            expl_temp.IterDisplayQP = false;
            expl_temp.RemainFeasible = false;
            expl_temp.ProbRelTolFactor = 1.0;
            expl_temp.ConstrRelTolFactor = 1.0;
            expl_temp.PricingTolerance = 0.0;
            expl_temp.ObjectiveLimit = (rtMinusInf);
            expl_temp.ConstraintTolerance = 1.0E-6;
            expl_temp.OptimalityTolerance = 2.2204460492503131E-14;
            expl_temp.StepTolerance = 1.0E-6;
            expl_temp.MaxIterations = u1;
            for (idxLambdaNonlinIneq = 0; idxLambdaNonlinIneq < 7; idxLambdaNonlinIneq
                ++) {
                expl_temp.SolverName[idxLambdaNonlinIneq] = t[idxLambdaNonlinIneq];
            }
        }

        while ((!Flags.stepAccepted) && (!Flags.failedLineSearch)) {
            mode_updateWorkingSetForNewQP_d(TrialState->xstarsqp, WorkingSet, mIneq,
                TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq, mLB,
                lb, mUB, ub, mFixed);
            idxLambdaNonlinIneq = Flags.stepType;
            expl_temp_0 = expl_temp;
            isFeasible = model_step_n(&idxLambdaNonlinIneq, Hessian, lb, ub,
                TrialState, MeritFunction, memspace, WorkingSet, QRManager, CholManager,
                QPObjective, &expl_temp_0);
            Flags.stepAccepted = isFeasible;
            Flags.stepType = idxLambdaNonlinIneq;
            if (isFeasible) {
                for (loop_ub = 0; loop_ub < nVar_tmp_tmp; loop_ub++) {
                    TrialState->xstarsqp[loop_ub] += TrialState->delta_x.data[loop_ub];
                }

                model_evalObjAndConstr(FcnEvaluator->objfun.workspace.runtimedata.x,
                    FcnEvaluator->objfun.workspace.runtimedata.lastMV,
                    FcnEvaluator->objfun.workspace.runtimedata.ref,
                    FcnEvaluator->nonlcon.workspace.runtimedata.x,
                    FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
                    FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
                    FcnEvaluator->nonlcon.workspace.runtimedata.Parameters.f1,
                    FcnEvaluator->nonlcon.workspace.runtimedata.Parameters.f2,
                    FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->cIneq.data,
                    TrialState->iNonIneq0, TrialState->cEq, &optimRelativeFactor, &loop_ub);
                TrialState->sqpFval = optimRelativeFactor;
                Flags.fevalOK = (loop_ub == 1);
                TrialState->FunctionEvaluations++;
                model_computeLinearResiduals(TrialState->xstarsqp, nVar_tmp_tmp,
                    TrialState->cIneq.data, &TrialState->cIneq.size, mLinIneq_tmp_tmp,
                    WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
                MeritFunction->phiFullStep = model_computeMeritFcn
                (MeritFunction->penaltyParam, optimRelativeFactor,
                    TrialState->cIneq.data, mIneq, TrialState->cEq, Flags.fevalOK);
            }

            if ((idxLambdaNonlinIneq == 1) && isFeasible && Flags.fevalOK &&
                (MeritFunction->phi < MeritFunction->phiFullStep) &&
                (TrialState->sqpFval < TrialState->sqpFval_old)) {
                Flags.stepType = 3;
                Flags.stepAccepted = false;
            }
            else {
                model_linesearch(&Flags.fevalOK, bineq_data, WorkingSet->nVar,
                    WorkingSet->ldA, WorkingSet->Aineq.data, TrialState,
                    MeritFunction->penaltyParam, MeritFunction->phi,
                    MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
                    FcnEvaluator->objfun.workspace.runtimedata.x,
                    FcnEvaluator->objfun.workspace.runtimedata.lastMV,
                    FcnEvaluator->objfun.workspace.runtimedata.ref,
                    &FcnEvaluator->nonlcon.workspace.runtimedata,
                    FcnEvaluator->mCineq, (idxLambdaNonlinIneq == 3) &&
                    isFeasible, &optimRelativeFactor, &loop_ub);
                TrialState->steplength = optimRelativeFactor;
                if (loop_ub > 0) {
                    Flags.stepAccepted = true;
                }
                else {
                    Flags.failedLineSearch = true;
                }
            }
        }

        if (Flags.stepAccepted && (!Flags.failedLineSearch)) {
            for (idxLambdaNonlinIneq = 0; idxLambdaNonlinIneq < nVar_tmp_tmp;
                idxLambdaNonlinIneq++) {
                TrialState->xstarsqp[idxLambdaNonlinIneq] = TrialState->
                    xstarsqp_old[idxLambdaNonlinIneq] + TrialState->
                    delta_x.data[idxLambdaNonlinIneq];
            }

            for (idxLambdaNonlinIneq = 0; idxLambdaNonlinIneq <= mConstr_tmp;
                idxLambdaNonlinIneq++) {
                TrialState->lambdasqp.data[idxLambdaNonlinIneq] +=
                    (TrialState->lambda.data[idxLambdaNonlinIneq] -
                        TrialState->lambdasqp.data[idxLambdaNonlinIneq]) *
                    TrialState->steplength;
            }

            model_saveState(TrialState);
            Flags.gradOK = true;
            std::memcpy(&TrialState_0[0], &TrialState->xstarsqp[0], 193U * sizeof
            (real_T));
            evalObjAndConstrAndDerivatives
            (FcnEvaluator->objfun.workspace.runtimedata.x,
                FcnEvaluator->objfun.workspace.runtimedata.lastMV,
                FcnEvaluator->objfun.workspace.runtimedata.ref,
                FcnEvaluator->nonlcon.workspace.runtimedata.x,
                FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
                FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
                FcnEvaluator->nonlcon.workspace.runtimedata.Parameters.f1,
                FcnEvaluator->nonlcon.workspace.runtimedata.Parameters.f2,
                FcnEvaluator->mCineq, TrialState_0, TrialState->grad.data,
                TrialState->cIneq.data, TrialState->iNonIneq0, TrialState->cEq,
                WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->ldA,
                WorkingSet->Aeq.data, WorkingSet->ldA, &TrialState->sqpFval,
                &idxLambdaNonlinIneq);
            TrialState->FunctionEvaluations++;
            Flags.fevalOK = (idxLambdaNonlinIneq == 1);
        }
        else {
            TrialState->sqpFval = TrialState->sqpFval_old;
            std::memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 193U *
                sizeof(real_T));
            ix = TrialState->cIneq.size;
            loop_ub = TrialState->cIneq.size;
            if (0 <= TrialState->cIneq.size - 1) {
                std::memcpy(&model_B.y_data_m[0], &TrialState->cIneq.data[0],
                    TrialState->cIneq.size * sizeof(real_T));
            }

            for (idxLambdaNonlinIneq = 0; idxLambdaNonlinIneq < TrialState->mIneq;
                idxLambdaNonlinIneq++) {
                model_B.y_data_m[idxLambdaNonlinIneq] = TrialState->
                    cIneq_old.data[idxLambdaNonlinIneq];
            }

            if (0 <= ix - 1) {
                std::memcpy(&TrialState->cIneq.data[0], &model_B.y_data_m[0], ix *
                    sizeof(real_T));
            }

            std::memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 96U * sizeof
            (real_T));
        }

        model_test_exit(&Flags, memspace, MeritFunction,
            fscales_lineq_constraint_size, fscales_cineq_constraint_size,
            WorkingSet, TrialState, QRManager, lb, ub);
        if ((!Flags.done) && Flags.stepAccepted) {
            Flags.stepAccepted = false;
            Flags.stepType = 1;
            Flags.failedLineSearch = false;
            idxLambdaNonlinIneq = mFixed + TrialState->iNonIneq0;
            loop_ub = WorkingSet->ldA;
            for (ix = 0; ix < nVar_tmp_tmp; ix++) {
                TrialState->delta_gradLag.data[ix] = TrialState->grad.data[ix];
            }

            if (nVar_tmp_tmp >= 1) {
                for (ix = 0; ix < nVar_tmp_tmp; ix++) {
                    TrialState->delta_gradLag.data[ix] += -TrialState->grad_old.data[ix];
                }
            }

            model_xgemv_i4wks12vozfw(nVar_tmp_tmp, 96, WorkingSet->Aeq.data, 1,
                WorkingSet->ldA, TrialState->lambdasqp.data, mFixed + 1,
                TrialState->delta_gradLag.data);
            ix = mFixed;
            b_c = WorkingSet->ldA * 95 + 1;
            b_iy = 1;
            while (((loop_ub > 0) && (b_iy <= b_c)) || ((loop_ub < 0) && (b_iy >= b_c)))
            {
                iy = 0;
                b_ia = (b_iy + nVar_tmp_tmp) - 1;
                for (ia = b_iy; ia <= b_ia; ia++) {
                    TrialState->delta_gradLag.data[iy] += TrialState->
                        JacCeqTrans_old.data[ia - 1] * -TrialState->lambdasqp.data[ix];
                    iy++;
                }

                ix++;
                b_iy += loop_ub;
            }

            model_xgemv_i4wks12vozfw(nVar_tmp_tmp, TrialState->mNonlinIneq,
                WorkingSet->Aineq.data, WorkingSet->ldA * (TrialState->iNonIneq0 - 1) +
                1, WorkingSet->ldA, TrialState->lambdasqp.data, idxLambdaNonlinIneq + 96,
                TrialState->delta_gradLag.data);
            ix = (TrialState->mNonlinIneq - 1) * WorkingSet->ldA + 1;
            b_c = 1;
            while (((loop_ub > 0) && (b_c <= ix)) || ((loop_ub < 0) && (b_c >= ix))) {
                b_iy = 0;
                iy = (b_c + nVar_tmp_tmp) - 1;
                for (b_ia = b_c; b_ia <= iy; b_ia++) {
                    TrialState->delta_gradLag.data[b_iy] +=
                        TrialState->JacCineqTrans_old.data[b_ia - 1] *
                        -TrialState->lambdasqp.data[idxLambdaNonlinIneq + 95];
                    b_iy++;
                }

                idxLambdaNonlinIneq++;
                b_c += loop_ub;
            }

            model_saveJacobian(TrialState, nVar_tmp_tmp, mIneq, WorkingSet->Aineq.data,
                TrialState->iNonIneq0, WorkingSet->Aeq.data,
                WorkingSet->ldA);
            loop_ub = memspace->workspace_double.size[0] *
                memspace->workspace_double.size[1];
            model_BFGSUpdate(nVar_tmp_tmp, Hessian, TrialState->delta_x.data,
                TrialState->delta_gradLag.data,
                memspace->workspace_double.data);
            TrialState->sqpIterations++;
        }
    }
}

// Function for MATLAB Function: '<S4>/NLMPC'
void modelModelClass::model_fmincon(const s_iMrk9lYy4GSFeZiuOV2cXH_mode_T
    * fun_workspace_runtimedata, const sHwyw6iy4my0aQg5J32XtHE_model_T
    * fun_workspace_userdata, const real_T x0[193], const real_T Aineq_data[],
    const real_T bineq_data[], const int32_T* bineq_size, const real_T lb[193],
    const real_T ub[193], const s_iMrk9lYy4GSFeZiuOV2cXH_mode_T
    * nonlcon_workspace_runtimedata, const sHwyw6iy4my0aQg5J32XtHE_model_T
    * nonlcon_workspace_userdata, real_T x[193], real_T* fval, real_T* exitflag,
    s2Sdh1LWFf6aTBwZ8BHQ75D_model_T* output)
{
    sG8JZ69axY52WWR6RKyApQC_model_T MeritFunction;
    real_T varargout_1_data[386];
    real_T absxk;
    real_T scale;
    real_T t;
    real_T ub_0;
    int32_T varargout_3_size[2];
    int32_T b_y_size_idx_0;
    int32_T ia;
    int32_T ix;
    int32_T k;
    int32_T loop_ub;
    int32_T mConstrMax;
    int32_T mFixed;
    int32_T mIneq;
    int32_T mLB;
    int32_T mUB;
    int32_T maxDims;
    int32_T varargout_1_size;
    boolean_T guard1 = false;
    model_anon(nonlcon_workspace_runtimedata->x,
        nonlcon_workspace_runtimedata->OutputMin,
        nonlcon_workspace_runtimedata->OutputMax,
        nonlcon_workspace_runtimedata->Parameters.f1,
        nonlcon_workspace_runtimedata->Parameters.f2, x0, varargout_1_data,
        &varargout_1_size, model_B.TrialState.cEq, model_B.varargout_3_data,
        varargout_3_size, model_B.varargout_4);
    mIneq = *bineq_size + varargout_1_size;
    mConstrMax = (mIneq + mIneq) + 675;
    if (mIneq + 386 > mConstrMax) {
        maxDims = mIneq + 386;
    }
    else {
        maxDims = mConstrMax;
    }

    model_factoryConstruct(mIneq + 386, mConstrMax, mIneq, varargout_1_size,
        &model_B.TrialState);
    model_B.FcnEvaluator.objfun.workspace.runtimedata = *fun_workspace_runtimedata;
    model_B.FcnEvaluator.objfun.workspace.userdata = *fun_workspace_userdata;
    model_B.FcnEvaluator.nonlcon.workspace.runtimedata =
        *nonlcon_workspace_runtimedata;
    model_B.FcnEvaluator.nonlcon.workspace.userdata = *nonlcon_workspace_userdata;
    model_B.FcnEvaluator.nVar = 193;
    model_B.FcnEvaluator.mCineq = varargout_1_size;
    model_B.FcnEvaluator.mCeq = 96;
    model_B.FcnEvaluator.NonFiniteSupport = true;
    model_B.FcnEvaluator.SpecifyObjectiveGradient = true;
    model_B.FcnEvaluator.SpecifyConstraintGradient = true;
    model_B.FcnEvaluator.ScaleProblem = false;
    model_factoryConstruct_hh1q(mIneq + 386, &model_B.QPObjective.grad.size,
        &model_B.QPObjective.Hx.size, &model_B.QPObjective.hasLinear,
        &model_B.QPObjective.nvar, &model_B.QPObjective.maxVar,
        &model_B.QPObjective.beta, &model_B.QPObjective.rho,
        &model_B.QPObjective.objtype, &model_B.QPObjective.prev_objtype,
        &model_B.QPObjective.prev_nvar, &model_B.QPObjective.prev_hasLinear,
        &model_B.QPObjective.gammaScalar);
    model_B.QPObjective.hasLinear = true;
    model_B.QPObjective.nvar = 193;
    model_B.QPObjective.objtype = 3;
    model_B.memspace.workspace_double.size[0] = maxDims;
    model_B.memspace.workspace_double.size[1] = mIneq + 386;
    model_B.memspace.workspace_int.size = maxDims;
    model_B.memspace.workspace_sort.size = maxDims;
    model_factoryConstruct_hh1q4(mIneq, mIneq + 386, mConstrMax,
        &model_B.WorkingSet);
    mLB = 0;
    mUB = 0;
    mFixed = 0;
    for (k = 0; k < 193; k++) {
        model_B.TrialState.xstarsqp[k] = x0[k];
        ub_0 = ub[k];
        scale = lb[k];
        guard1 = false;
        if ((!rtIsInf(scale)) && (!rtIsNaN(scale))) {
            if (std::abs(scale - ub_0) < 1.0E-6) {
                mFixed++;
                model_B.WorkingSet.indexFixed.data[mFixed - 1] = k + 1;
            }
            else {
                mLB++;
                model_B.WorkingSet.indexLB.data[mLB - 1] = k + 1;
                guard1 = true;
            }
        }
        else {
            guard1 = true;
        }

        if (guard1) {
            if ((!rtIsInf(ub_0)) && (!rtIsNaN(ub_0))) {
                mUB++;
                model_B.WorkingSet.indexUB.data[mUB - 1] = k + 1;
            }
        }
    }

    model_loadProblem(&model_B.WorkingSet, mIneq, *bineq_size, Aineq_data, mLB,
        mUB, mFixed, mConstrMax);
    for (mConstrMax = 0; mConstrMax < mLB; mConstrMax++) {
        ub_0 =
            model_B.TrialState.xstarsqp[model_B.WorkingSet.indexLB.data[mConstrMax] -
            1];
        scale = lb[model_B.WorkingSet.indexLB.data[mConstrMax] - 1];
        if ((ub_0 > scale) || rtIsNaN(scale)) {
            model_B.TrialState.xstarsqp[model_B.WorkingSet.indexLB.data[mConstrMax] -
                1] = ub_0;
        }
        else {
            model_B.TrialState.xstarsqp[model_B.WorkingSet.indexLB.data[mConstrMax] -
                1] = scale;
        }
    }

    for (mConstrMax = 0; mConstrMax < mUB; mConstrMax++) {
        ub_0 =
            model_B.TrialState.xstarsqp[model_B.WorkingSet.indexUB.data[mConstrMax] -
            1];
        scale = ub[model_B.WorkingSet.indexUB.data[mConstrMax] - 1];
        if ((ub_0 < scale) || rtIsNaN(scale)) {
            model_B.TrialState.xstarsqp[model_B.WorkingSet.indexUB.data[mConstrMax] -
                1] = ub_0;
        }
        else {
            model_B.TrialState.xstarsqp[model_B.WorkingSet.indexUB.data[mConstrMax] -
                1] = scale;
        }
    }

    for (mConstrMax = 0; mConstrMax < mFixed; mConstrMax++) {
        model_B.TrialState.xstarsqp[model_B.WorkingSet.indexFixed.data[mConstrMax] -
            1] = ub[model_B.WorkingSet.indexFixed.data[mConstrMax] - 1];
    }

    evalObjAndConstrAndDerivatives(fun_workspace_runtimedata->x,
        fun_workspace_runtimedata->lastMV, fun_workspace_runtimedata->ref,
        nonlcon_workspace_runtimedata->x, nonlcon_workspace_runtimedata->OutputMin,
        nonlcon_workspace_runtimedata->OutputMax,
        nonlcon_workspace_runtimedata->Parameters.f1,
        nonlcon_workspace_runtimedata->Parameters.f2, varargout_1_size,
        model_B.TrialState.xstarsqp, model_B.TrialState.grad.data,
        model_B.TrialState.cIneq.data, model_B.TrialState.iNonIneq0,
        model_B.TrialState.cEq, model_B.WorkingSet.Aineq.data,
        model_B.TrialState.iNonIneq0, model_B.WorkingSet.ldA,
        model_B.WorkingSet.Aeq.data, model_B.WorkingSet.ldA, &ub_0, &mConstrMax);
    model_B.TrialState.sqpFval = ub_0;
    model_B.TrialState.FunctionEvaluations = 1;
    mConstrMax = model_B.WorkingSet.ldA;
    if (*bineq_size > 0) {
        b_y_size_idx_0 = model_B.TrialState.cIneq.size;
        loop_ub = model_B.TrialState.cIneq.size;
        if (0 <= loop_ub - 1) {
            std::memcpy(&model_B.b_y_data[0], &model_B.TrialState.cIneq.data[0],
                loop_ub * sizeof(real_T));
        }

        for (k = 0; k < *bineq_size; k++) {
            model_B.b_y_data[k] = bineq_data[k];
        }

        if (0 <= b_y_size_idx_0 - 1) {
            std::memcpy(&model_B.TrialState.cIneq.data[0], &model_B.b_y_data[0],
                b_y_size_idx_0 * sizeof(real_T));
        }

        for (k = 0; k < *bineq_size; k++) {
            model_B.TrialState.cIneq.data[k] = -model_B.TrialState.cIneq.data[k];
        }

        k = 0;
        loop_ub = (*bineq_size - 1) * model_B.WorkingSet.ldA + 1;
        b_y_size_idx_0 = 1;
        while (((mConstrMax > 0) && (b_y_size_idx_0 <= loop_ub)) || ((mConstrMax < 0)
            && (b_y_size_idx_0 >= loop_ub))) {
            ix = 0;
            scale = 0.0;
            for (ia = b_y_size_idx_0; ia <= b_y_size_idx_0 + 192; ia++) {
                scale += model_B.WorkingSet.Aineq.data[ia - 1] *
                    model_B.TrialState.xstarsqp[ix];
                ix++;
            }

            model_B.TrialState.cIneq.data[k] += scale;
            k++;
            b_y_size_idx_0 += mConstrMax;
        }
    }

    model_updateWorkingSetForNewQP(x0, &model_B.WorkingSet, mIneq,
        model_B.TrialState.cIneq.data, model_B.TrialState.cEq, mLB, lb, mUB, ub,
        mFixed);
    model_initActiveSet(&model_B.WorkingSet);
    MeritFunction.penaltyParam = 1.0;
    MeritFunction.threshold = 0.0001;
    MeritFunction.nPenaltyDecreases = 0;
    MeritFunction.linearizedConstrViol = 0.0;
    MeritFunction.initFval = ub_0;
    ub_0 = 0.0;
    for (mLB = 0; mLB < 96; mLB++) {
        ub_0 += std::abs(model_B.TrialState.cEq[mLB]);
    }

    MeritFunction.initConstrViolationEq = ub_0;
    ub_0 = 0.0;
    for (mLB = 0; mLB < mIneq; mLB++) {
        if (model_B.TrialState.cIneq.data[mLB] > 0.0) {
            ub_0 += model_B.TrialState.cIneq.data[mLB];
        }
    }

    MeritFunction.initConstrViolationIneq = ub_0;
    MeritFunction.phi = 0.0;
    MeritFunction.phiPrimePlus = 0.0;
    MeritFunction.phiFullStep = 0.0;
    MeritFunction.feasRelativeFactor = 0.0;
    MeritFunction.nlpPrimalFeasError = 0.0;
    MeritFunction.nlpDualFeasError = 0.0;
    MeritFunction.nlpComplError = 0.0;
    MeritFunction.firstOrderOpt = 0.0;
    MeritFunction.hasObjective = true;
    model_factoryConstruct_hh(maxDims, maxDims, &model_B.QRManager.ldq,
        model_B.QRManager.QR.size, model_B.QRManager.Q.data,
        model_B.QRManager.Q.size, model_B.QRManager.jpvt.data,
        &model_B.QRManager.jpvt.size, &model_B.QRManager.mrows,
        &model_B.QRManager.ncols, &model_B.QRManager.tau.size,
        &model_B.QRManager.minRowCol, &model_B.QRManager.usedPivoting);
    model_factoryConstruct_hh1(maxDims, model_B.CholManager.FMat.size,
        &model_B.CholManager.ldm, &model_B.CholManager.ndims,
        &model_B.CholManager.info, &model_B.CholManager.scaleFactor,
        &model_B.CholManager.ConvexCheck, &model_B.CholManager.regTol_,
        &model_B.CholManager.workspace_, &model_B.CholManager.workspace2_);
    model_driver(bineq_data, lb, ub, &model_B.TrialState, &MeritFunction,
        &model_B.FcnEvaluator, &model_B.memspace, &model_B.WorkingSet,
        &model_B.QRManager, &model_B.CholManager, &model_B.QPObjective,
        bineq_size, &varargout_1_size, model_B.unusedExpr);
    *fval = model_B.TrialState.sqpFval;
    *exitflag = model_B.TrialState.sqpExitFlag;
    output->iterations = model_B.TrialState.sqpIterations;
    output->funcCount = model_B.TrialState.FunctionEvaluations;
    output->algorithm[0] = 's';
    output->algorithm[1] = 'q';
    output->algorithm[2] = 'p';
    output->constrviolation = MeritFunction.nlpPrimalFeasError;
    ub_0 = 0.0;
    scale = 3.3121686421112381E-170;
    for (mIneq = 0; mIneq < 193; mIneq++) {
        x[mIneq] = model_B.TrialState.xstarsqp[mIneq];
        absxk = std::abs(model_B.TrialState.delta_x.data[mIneq]);
        if (absxk > scale) {
            t = scale / absxk;
            ub_0 = ub_0 * t * t + 1.0;
            scale = absxk;
        }
        else {
            t = absxk / scale;
            ub_0 += t * t;
        }
    }

    output->stepsize = scale * std::sqrt(ub_0);
    output->lssteplength = model_B.TrialState.steplength;
    output->firstorderopt = MeritFunction.firstOrderOpt;
}

// Model step function
void modelModelClass::step()
{
    cell_0_model_T expl_temp;
    s2Sdh1LWFf6aTBwZ8BHQ75D_model_T Out;
    sHwyw6iy4my0aQg5J32XtHE_model_T userdata;
    real_T B_data[384];
    real_T z[193];
    real_T z0[193];
    real_T zLB[193];
    real_T zUB[193];
    real_T rtb_mvseq[97];
    real_T rtb_xseq[97];
    real_T tmp[95];
    real_T tmp_0[95];
    real_T ExitFlag;
    real_T rtb_e;
    int32_T A_size[2];
    int32_T i;

    // Outputs for Atomic SubSystem: '<Root>/model'
    // Outputs for Atomic SubSystem: '<S1>/Triggers'
    // Switch: '<S33>/Switch' incorporates:
    //   Constant: '<S27>/Constant'
    //   Constant: '<S28>/Constant'
    //   Inport: '<Root>/Level'
    //   Logic: '<S33>/Logical Operator'
    //   Logic: '<S33>/Logical Operator4'
    //   Logic: '<S33>/Logical Operator5'
    //   RelationalOperator: '<S27>/Compare'
    //   RelationalOperator: '<S28>/Compare'
    //   UnitDelay: '<S33>/Unit Delay'

    model_DW.UnitDelay_DSTATE = ((model_U.Level <= setDown) || ((!(model_U.Level >=
        resetDown)) && model_DW.UnitDelay_DSTATE));

    // Logic: '<S34>/Logical Operator4' incorporates:
    //   Constant: '<S29>/Constant'
    //   Constant: '<S30>/Constant'
    //   Inport: '<Root>/Level'
    //   Logic: '<S34>/Logical Operator'
    //   Logic: '<S34>/Logical Operator5'
    //   RelationalOperator: '<S29>/Compare'
    //   RelationalOperator: '<S30>/Compare'
    //   UnitDelay: '<S34>/Unit Delay'

    model_DW.UnitDelay_DSTATE_c = ((model_U.Level >= setUp) || ((!(model_U.Level <=
        resetUp)) && model_DW.UnitDelay_DSTATE_c));

    // End of Outputs for SubSystem: '<S1>/Triggers'
    if ((&model_M)->Timing.TaskCounters.TID[2] == 0) {
        // Delay: '<S5>/mv_Delay' incorporates:
        //   Delay: '<S1>/Delay'

        if (model_DW.icLoad) {
            for (i = 0; i < 97; i++) {
                model_DW.mv_Delay_DSTATE[i] = model_DW.Delay_DSTATE[0U];
            }
        }

        // End of Delay: '<S5>/mv_Delay'

        // Delay: '<S5>/x_Delay' incorporates:
        //   Inport: '<Root>/Level'

        if (model_DW.icLoad_i) {
            for (i = 0; i < 97; i++) {
                model_DW.x_Delay_DSTATE[i] = model_U.Level;
            }
        }

        // Delay: '<S5>/slack_delay' incorporates:
        //   Constant: '<S2>/e.init_zero'

        if (model_DW.icLoad_j) {
            model_DW.slack_delay_DSTATE = 0.0;
        }

        // MATLAB Function: '<S4>/NLMPC' incorporates:
        //   BusCreator: '<S1>/Bus Creator'
        //   Constant: '<S1>/Constant1'
        //   Inport: '<Root>/Level'
        //   Inport: '<Root>/Protok'

        std::memcpy(&expl_temp.f3[0], &Tf[0], 97U * sizeof(real_T));
        expl_temp.f2 = model_U.Protok;
        expl_temp.f1 = model_U.Level;
        for (i = 0; i < 95; i++) {
            // Selector: '<S5>/Selector' incorporates:
            //   Constant: '<S5>/Constant'
            //   Delay: '<S5>/x_Delay'

            tmp[i] = model_DW.x_Delay_DSTATE[static_cast<int32_T>
                (model_ConstP.Constant_Value[i]) - 1];

            // Selector: '<S5>/Selector1' incorporates:
            //   Constant: '<S5>/Constant1'
            //   Delay: '<S5>/x_Delay'

            tmp_0[i] = model_DW.mv_Delay_DSTATE[static_cast<int32_T>
                (model_ConstP.Constant1_Value[i]) - 1];
        }

        // Outputs for Atomic SubSystem: '<S1>/Triggers'
        // Switch: '<S3>/Switch1' incorporates:
        //   Constant: '<S3>/Constant22'
        //   Constant: '<S3>/Constant23'
        //   UnitDelay: '<S33>/Unit Delay'

        if (model_DW.UnitDelay_DSTATE) {
            ExitFlag = ifDown;
        }
        else {
            ExitFlag = elseDown;
        }

        // End of Switch: '<S3>/Switch1'

        // Switch: '<S3>/Switch2' incorporates:
        //   Constant: '<S3>/Constant1'
        //   Constant: '<S3>/Constant2'
        //   Switch: '<S34>/Switch'

        if (model_DW.UnitDelay_DSTATE_c) {
            rtb_e = ifUp;
        }
        else {
            rtb_e = elseUp;
        }

        // End of Switch: '<S3>/Switch2'

        // MATLAB Function: '<S4>/NLMPC' incorporates:
        //   Delay: '<S1>/Delay'
        //   Delay: '<S5>/slack_delay'
        //   Inport: '<Root>/Level'
        //   Inport: '<Root>/Vrijeme'
        //   Lookup_n-D: '<S1>/Lookup Table ref'
        //   Sum: '<S1>/Add'
        //   Sum: '<S3>/Add'

        mode_znlmpc_generateRuntimeData(model_U.Level, model_DW.Delay_DSTATE[0],
            look1_binlxpw(model_U.Vrijeme, breakPoints, tableData, 96U) + (ExitFlag +
                rtb_e), &expl_temp, tmp, tmp_0, model_DW.slack_delay_DSTATE,
            &model_B.runtimedata, &userdata, z0);

        // End of Outputs for SubSystem: '<S1>/Triggers'
        model_znlmpc_getZBounds(&model_B.runtimedata, z0, zLB, zUB);
        model_znlmpc_getUBounds(&model_B.runtimedata, model_B.A_data, A_size, B_data,
            &i);
        model_fmincon(&model_B.runtimedata, &userdata, z0, model_B.A_data, B_data,
            &i, zLB, zUB, &model_B.runtimedata, &userdata, z, &rtb_e,
            &ExitFlag, &Out);
        if ((ExitFlag == 0.0) && (Out.constrviolation > 1.0E-6)) {
            ExitFlag = -2.0;
        }

        model_znlmpc_getXUe(z, model_U.Level, rtb_xseq, rtb_mvseq, &rtb_e);
        if ((ExitFlag > 0.0) || (ExitFlag == 0.0)) {
            model_B.mv = rtb_mvseq[0];
        }
        else {
            model_B.mv = model_DW.Delay_DSTATE[0];
        }
    }

    if ((&model_M)->Timing.TaskCounters.TID[1] == 0) {
        // DiscretePulseGenerator: '<S1>/Pulse Generator'
        model_B.PulseGenerator = ((model_DW.clockTickCounter < 1) &&
            (model_DW.clockTickCounter >= 0));

        // DiscretePulseGenerator: '<S1>/Pulse Generator'
        if (model_DW.clockTickCounter >= 1) {
            model_DW.clockTickCounter = 0;
        }
        else {
            model_DW.clockTickCounter++;
        }
    }

    // Update for Delay: '<S1>/Delay' incorporates:
    //   Inport: '<Root>/PumpStatus'

    for (i = 0; i < 899; i++) {
        model_DW.Delay_DSTATE[i] = model_DW.Delay_DSTATE[i + 1];
    }

    model_DW.Delay_DSTATE[899] = model_U.PumpStatus;

    // End of Update for Delay: '<S1>/Delay'
    if ((&model_M)->Timing.TaskCounters.TID[2] == 0) {
        // Update for Delay: '<S5>/mv_Delay'
        model_DW.icLoad = false;

        // Update for Delay: '<S5>/x_Delay'
        model_DW.icLoad_i = false;

        // Update for Delay: '<S5>/mv_Delay'
        std::memcpy(&model_DW.mv_Delay_DSTATE[0], &rtb_mvseq[0], 97U * sizeof(real_T));

        // Update for Delay: '<S5>/x_Delay'
        std::memcpy(&model_DW.x_Delay_DSTATE[0], &rtb_xseq[0], 97U * sizeof(real_T));

        // Update for Delay: '<S5>/slack_delay'
        model_DW.icLoad_j = false;
        model_DW.slack_delay_DSTATE = rtb_e;

        // Outport: '<Root>/nlpStatus'
        model_Y.nlpStatus = ExitFlag;
    }

    // Switch: '<S1>/Switch'
    if (model_B.mv > 0.5) {
        // Outport: '<Root>/pumpStatus' incorporates:
        //   Constant: '<S1>/Constant3'

        model_Y.pumpStatus = PumpOn;
    }
    else {
        // Outport: '<Root>/pumpStatus' incorporates:
        //   Constant: '<S1>/Constant4'

        model_Y.pumpStatus = PumpOff;
    }

    // End of Switch: '<S1>/Switch'

    // Outport: '<Root>/Out8' incorporates:
    //   Inport: '<Root>/In17'
    //   Sum: '<S1>/Add1'

    model_Y.Out8 = model_U.watchdogRead + model_B.PulseGenerator;

    // End of Outputs for SubSystem: '<Root>/model'
    rate_scheduler((&model_M));
}

// Model initialize function
void modelModelClass::initialize()
{
    // Registration code

    // initialize non-finites
    rt_InitInfAndNaN(sizeof(real_T));

    {
        int32_T i;

        // SystemInitialize for Atomic SubSystem: '<Root>/model'
        // InitializeConditions for Delay: '<S1>/Delay'
        for (i = 0; i < 900; i++) {
            model_DW.Delay_DSTATE[i] = 1.0;
        }

        // End of InitializeConditions for Delay: '<S1>/Delay'

        // InitializeConditions for Delay: '<S5>/mv_Delay'
        model_DW.icLoad = true;

        // InitializeConditions for Delay: '<S5>/x_Delay'
        model_DW.icLoad_i = true;

        // InitializeConditions for Delay: '<S5>/slack_delay'
        model_DW.icLoad_j = true;

        // End of SystemInitialize for SubSystem: '<Root>/model'
    }
}

// Model terminate function
void modelModelClass::terminate()
{
    // (no terminate code required)
}

// Constructor
modelModelClass::modelModelClass() :
    model_B(),
    model_DW(),
    model_U(),
    model_Y(),
    model_M()
{
    // Currently there is no constructor body generated.
}

// Destructor
modelModelClass::~modelModelClass()
{
    // Currently there is no destructor body generated.
}

// Real-Time Model get method
modelModelClass::RT_MODEL_model_T* modelModelClass::getRTM()
{
    return (&model_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
